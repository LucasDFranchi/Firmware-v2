
ecu_rework.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003794  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080038d8  080038d8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038d8  080038d8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080038e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000024  08003904  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003904  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc16  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224f  00000000  00000000  0002dc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0002feb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  00030be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c82  00000000  00000000  00031810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbc4  00000000  00000000  00049492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c437  00000000  00000000  00057056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e348d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003600  00000000  00000000  000e34e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08003888 	.word	0x08003888

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08003888 	.word	0x08003888

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 ff86 	bl	8001060 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81a 	bl	800018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f982 	bl	8000460 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f872 	bl	8000244 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000160:	f000 f930 	bl	80003c4 <MX_TIM3_Init>
  MX_CAN_Init();
 8000164:	f000 f8ac 	bl	80002c0 <MX_CAN_Init>
  MX_TIM2_Init();
 8000168:	f000 f8e0 	bl	800032c <MX_TIM2_Init>
  HAL_CAN_Start(&hcan);
 800016c:	4806      	ldr	r0, [pc, #24]	; (8000188 <main+0x3c>)
 800016e:	f001 fdb1 	bl	8001cd4 <HAL_CAN_Start>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000172:	b672      	cpsid	i
}
 8000174:	bf00      	nop
  /* USER CODE BEGIN 2 */
  __disable_irq();
  SM_Init();
 8000176:	f000 fbf7 	bl	8000968 <SM_Init>
  SUPP_InitAndStart();
 800017a:	f000 f9ed 	bl	8000558 <SUPP_InitAndStart>
  __ASM volatile ("cpsie i" : : : "memory");
 800017e:	b662      	cpsie	i
}
 8000180:	bf00      	nop

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	  SM_Update();
 8000182:	f000 fc35 	bl	80009f0 <SM_Update>
 8000186:	e7fc      	b.n	8000182 <main+0x36>
 8000188:	2000009c 	.word	0x2000009c

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b094      	sub	sp, #80	; 0x50
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000196:	2228      	movs	r2, #40	; 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f003 fb6c 	bl	8003878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	f107 0314 	add.w	r3, r7, #20
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
 80001a8:	605a      	str	r2, [r3, #4]
 80001aa:	609a      	str	r2, [r3, #8]
 80001ac:	60da      	str	r2, [r3, #12]
 80001ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001bc:	2301      	movs	r3, #1
 80001be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ce:	2302      	movs	r3, #2
 80001d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 f956 	bl	8002494 <HAL_RCC_OscConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001ee:	f000 f9d3 	bl	8000598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f2:	230f      	movs	r3, #15
 80001f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000202:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2102      	movs	r1, #2
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fbc0 	bl	8002994 <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800021a:	f000 f9bd 	bl	8000598 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800021e:	2302      	movs	r3, #2
 8000220:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000226:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fd38 	bl	8002ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000236:	f000 f9af 	bl	8000598 <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3750      	adds	r7, #80	; 0x50
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <MX_ADC1_Init+0x78>)
 8000258:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <MX_ADC1_Init+0x74>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000268:	2200      	movs	r2, #0
 800026a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <MX_ADC1_Init+0x74>)
 800026e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000276:	2200      	movs	r2, #0
 8000278:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <MX_ADC1_Init+0x74>)
 800027c:	2201      	movs	r2, #1
 800027e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000282:	f000 ff73 	bl	800116c <HAL_ADC_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800028c:	f000 f984 	bl	8000598 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000290:	2309      	movs	r3, #9
 8000292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000294:	2301      	movs	r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000298:	2307      	movs	r3, #7
 800029a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_ADC1_Init+0x74>)
 80002a2:	f001 f9d3 	bl	800164c <HAL_ADC_ConfigChannel>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002ac:	f000 f974 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	2000010c 	.word	0x2000010c
 80002bc:	40012400 	.word	0x40012400

080002c0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <MX_CAN_Init+0x64>)
 80002c6:	4a18      	ldr	r2, [pc, #96]	; (8000328 <MX_CAN_Init+0x68>)
 80002c8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <MX_CAN_Init+0x64>)
 80002cc:	2212      	movs	r2, #18
 80002ce:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <MX_CAN_Init+0x64>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <MX_CAN_Init+0x64>)
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_CAN_Init+0x64>)
 80002de:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80002e2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_CAN_Init+0x64>)
 80002e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002ea:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <MX_CAN_Init+0x64>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_CAN_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MX_CAN_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_CAN_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <MX_CAN_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_CAN_Init+0x64>)
 800030c:	2200      	movs	r2, #0
 800030e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <MX_CAN_Init+0x64>)
 8000312:	f001 fbe4 	bl	8001ade <HAL_CAN_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800031c:	f000 f93c 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000009c 	.word	0x2000009c
 8000328:	40006400 	.word	0x40006400

0800032c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000340:	463b      	mov	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000348:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <MX_TIM2_Init+0x94>)
 800034a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000352:	2247      	movs	r2, #71	; 0x47
 8000354:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000356:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_TIM2_Init+0x94>)
 800035e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000362:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800036a:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_TIM2_Init+0x94>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000370:	4813      	ldr	r0, [pc, #76]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000372:	f002 fe0f 	bl	8002f94 <HAL_TIM_Base_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800037c:	f000 f90c 	bl	8000598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000384:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	4619      	mov	r1, r3
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <MX_TIM2_Init+0x94>)
 800038e:	f002 fff5 	bl	800337c <HAL_TIM_ConfigClockSource>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000398:	f000 f8fe 	bl	8000598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800039c:	2320      	movs	r3, #32
 800039e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a4:	463b      	mov	r3, r7
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_TIM2_Init+0x94>)
 80003aa:	f003 f9d1 	bl	8003750 <HAL_TIMEx_MasterConfigSynchronization>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003b4:	f000 f8f0 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3718      	adds	r7, #24
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000013c 	.word	0x2000013c

080003c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	f107 0308 	add.w	r3, r7, #8
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	463b      	mov	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_TIM3_Init+0x94>)
 80003e2:	4a1e      	ldr	r2, [pc, #120]	; (800045c <MX_TIM3_Init+0x98>)
 80003e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_TIM3_Init+0x94>)
 80003e8:	2247      	movs	r2, #71	; 0x47
 80003ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_TIM3_Init+0x94>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_TIM3_Init+0x94>)
 80003f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80003f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_TIM3_Init+0x94>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_TIM3_Init+0x94>)
 8000402:	2200      	movs	r2, #0
 8000404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000406:	4814      	ldr	r0, [pc, #80]	; (8000458 <MX_TIM3_Init+0x94>)
 8000408:	f002 fdc4 	bl	8002f94 <HAL_TIM_Base_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000412:	f000 f8c1 	bl	8000598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800041c:	f107 0308 	add.w	r3, r7, #8
 8000420:	4619      	mov	r1, r3
 8000422:	480d      	ldr	r0, [pc, #52]	; (8000458 <MX_TIM3_Init+0x94>)
 8000424:	f002 ffaa 	bl	800337c <HAL_TIM_ConfigClockSource>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800042e:	f000 f8b3 	bl	8000598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000432:	2320      	movs	r3, #32
 8000434:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800043a:	463b      	mov	r3, r7
 800043c:	4619      	mov	r1, r3
 800043e:	4806      	ldr	r0, [pc, #24]	; (8000458 <MX_TIM3_Init+0x94>)
 8000440:	f003 f986 	bl	8003750 <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800044a:	f000 f8a5 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000c4 	.word	0x200000c4
 800045c:	40000400 	.word	0x40000400

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000474:	4b35      	ldr	r3, [pc, #212]	; (800054c <MX_GPIO_Init+0xec>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a34      	ldr	r2, [pc, #208]	; (800054c <MX_GPIO_Init+0xec>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b32      	ldr	r3, [pc, #200]	; (800054c <MX_GPIO_Init+0xec>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b2f      	ldr	r3, [pc, #188]	; (800054c <MX_GPIO_Init+0xec>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a2e      	ldr	r2, [pc, #184]	; (800054c <MX_GPIO_Init+0xec>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b2c      	ldr	r3, [pc, #176]	; (800054c <MX_GPIO_Init+0xec>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a4:	4b29      	ldr	r3, [pc, #164]	; (800054c <MX_GPIO_Init+0xec>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a28      	ldr	r2, [pc, #160]	; (800054c <MX_GPIO_Init+0xec>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b26      	ldr	r3, [pc, #152]	; (800054c <MX_GPIO_Init+0xec>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0308 	and.w	r3, r3, #8
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_LOCK_OUT_Pin|FAN_OUT1_Pin|HLIM_OUT_Pin|PC_OUT_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80004c2:	4823      	ldr	r0, [pc, #140]	; (8000550 <MX_GPIO_Init+0xf0>)
 80004c4:	f001 ffcd 	bl	8002462 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_OUT2_Pin|FLT_OUT_Pin|LLIM_OUT_Pin|NEG_OUT_Pin
 80004c8:	2200      	movs	r2, #0
 80004ca:	f247 31c0 	movw	r1, #29632	; 0x73c0
 80004ce:	4821      	ldr	r0, [pc, #132]	; (8000554 <MX_GPIO_Init+0xf4>)
 80004d0:	f001 ffc7 	bl	8002462 <HAL_GPIO_WritePin>
                          |DCDC_OUT_Pin|SWAP_OUT_Pin|SUPP_LOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_LOCK_OUT_Pin FAN_OUT1_Pin HLIM_OUT_Pin PC_OUT_Pin */
  GPIO_InitStruct.Pin = SW_LOCK_OUT_Pin|FAN_OUT1_Pin|HLIM_OUT_Pin|PC_OUT_Pin;
 80004d4:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80004d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	2301      	movs	r3, #1
 80004dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e2:	2303      	movs	r3, #3
 80004e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	4818      	ldr	r0, [pc, #96]	; (8000550 <MX_GPIO_Init+0xf0>)
 80004ee:	f001 fe1d 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : HLIM_IN_Pin LLIM_IN_Pin FLT_IN_Pin */
  GPIO_InitStruct.Pin = HLIM_IN_Pin|LLIM_IN_Pin|FLT_IN_Pin;
 80004f2:	23e0      	movs	r3, #224	; 0xe0
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	4812      	ldr	r0, [pc, #72]	; (8000550 <MX_GPIO_Init+0xf0>)
 8000506:	f001 fe11 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_OUT2_Pin FLT_OUT_Pin LLIM_OUT_Pin NEG_OUT_Pin
                           DCDC_OUT_Pin SWAP_OUT_Pin SUPP_LOW_Pin */
  GPIO_InitStruct.Pin = FAN_OUT2_Pin|FLT_OUT_Pin|LLIM_OUT_Pin|NEG_OUT_Pin
 800050a:	f247 33c0 	movw	r3, #29632	; 0x73c0
 800050e:	613b      	str	r3, [r7, #16]
                          |DCDC_OUT_Pin|SWAP_OUT_Pin|SUPP_LOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000518:	2303      	movs	r3, #3
 800051a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <MX_GPIO_Init+0xf4>)
 8000524:	f001 fe02 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESTOP_IN_Pin */
  GPIO_InitStruct.Pin = ESTOP_IN_Pin;
 8000528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ESTOP_IN_GPIO_Port, &GPIO_InitStruct);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_GPIO_Init+0xf4>)
 800053e:	f001 fdf5 	bl	800212c <HAL_GPIO_Init>

}
 8000542:	bf00      	nop
 8000544:	3720      	adds	r7, #32
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	40010800 	.word	0x40010800
 8000554:	40010c00 	.word	0x40010c00

08000558 <SUPP_InitAndStart>:

/* USER CODE BEGIN 4 */
static void SUPP_InitAndStart(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	if (HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1))
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <SUPP_InitAndStart+0x38>)
 800055e:	f001 fa09 	bl	8001974 <HAL_ADCEx_Calibration_Start>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SUPP_InitAndStart+0x14>
	{
		Error_Handler();
 8000568:	f000 f816 	bl	8000598 <Error_Handler>
	}

	if (HAL_OK != HAL_ADC_Start_IT(&hadc1))
 800056c:	4808      	ldr	r0, [pc, #32]	; (8000590 <SUPP_InitAndStart+0x38>)
 800056e:	f000 fed5 	bl	800131c <HAL_ADC_Start_IT>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SUPP_InitAndStart+0x24>
	{
		Error_Handler();
 8000578:	f000 f80e 	bl	8000598 <Error_Handler>
	}

	if (HAL_OK != HAL_TIM_Base_Start(&htim3))
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <SUPP_InitAndStart+0x3c>)
 800057e:	f002 fd59 	bl	8003034 <HAL_TIM_Base_Start>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SUPP_InitAndStart+0x34>
	{
		Error_Handler();
 8000588:	f000 f806 	bl	8000598 <Error_Handler>
	}

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000010c 	.word	0x2000010c
 8000594:	200000c4 	.word	0x200000c4

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db0b      	blt.n	80005ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f003 021f 	and.w	r2, r3, #31
 80005bc:	4906      	ldr	r1, [pc, #24]	; (80005d8 <__NVIC_EnableIRQ+0x34>)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	095b      	lsrs	r3, r3, #5
 80005c4:	2001      	movs	r0, #1
 80005c6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	e000e100 	.word	0xe000e100

080005dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	db12      	blt.n	8000614 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 021f 	and.w	r2, r3, #31
 80005f4:	490a      	ldr	r1, [pc, #40]	; (8000620 <__NVIC_DisableIRQ+0x44>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	095b      	lsrs	r3, r3, #5
 80005fc:	2001      	movs	r0, #1
 80005fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000602:	3320      	adds	r3, #32
 8000604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000608:	f3bf 8f4f 	dsb	sy
}
 800060c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800060e:	f3bf 8f6f 	isb	sy
}
 8000612:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e100 	.word	0xe000e100

08000624 <sm_State1Handler>:
//
// state1 handler function: sets fault and low power supply indication
//

static void sm_State1Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <sm_State1Handler+0x28>)
 8000630:	f001 ff17 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SUPP_LOW_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <sm_State1Handler+0x28>)
 800063c:	f001 ff11 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f000 fd6e 	bl	8001124 <HAL_Delay>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40010c00 	.word	0x40010c00

08000650 <sm_State2Handler>:

//
// state2 handler function: start precharge and close negative terminal
//
static void sm_State2Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065a:	4807      	ldr	r0, [pc, #28]	; (8000678 <sm_State2Handler+0x28>)
 800065c:	f001 ff01 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NEG_OUT_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2140      	movs	r1, #64	; 0x40
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <sm_State2Handler+0x2c>)
 8000666:	f001 fefc 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 800066a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066e:	f000 fd59 	bl	8001124 <HAL_Delay>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40010800 	.word	0x40010800
 800067c:	40010c00 	.word	0x40010c00

08000680 <sm_State3Handler>:

//
// state3 handler function: close dcdc and wait till it stablizes
//
static void sm_State3Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, DCDC_OUT_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2180      	movs	r1, #128	; 0x80
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <sm_State3Handler+0x1c>)
 800068a:	f001 feea 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f000 fd47 	bl	8001124 <HAL_Delay>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40010c00 	.word	0x40010c00

080006a0 <sm_State4Handler>:

//
// state4 handler function: swap power source from aux battery to dcdc
//
static void sm_State4Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SWAP_OUT_Pin, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <sm_State4Handler+0x1c>)
 80006ac:	f001 fed9 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f000 fd36 	bl	8001124 <HAL_Delay>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40010c00 	.word	0x40010c00

080006c0 <sm_State5Handler>:

//
// state5 handler function: close FAN power mosfet
//
static void sm_State5Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, FAN_OUT1_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2108      	movs	r1, #8
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <sm_State5Handler+0x28>)
 80006ca:	f001 feca 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, FAN_OUT2_Pin, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <sm_State5Handler+0x2c>)
 80006d6:	f001 fec4 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 80006da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006de:	f000 fd21 	bl	8001124 <HAL_Delay>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40010800 	.word	0x40010800
 80006ec:	40010c00 	.word	0x40010c00

080006f0 <sm_State6Handler>:

//
// state6 handler function: close llim to activate motor
//
static void sm_State6Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <sm_State6Handler+0x1c>)
 80006fc:	f001 feb1 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 8000700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000704:	f000 fd0e 	bl	8001124 <HAL_Delay>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40010c00 	.word	0x40010c00

08000710 <sm_State7Handler>:

//
// state7 handler function: end precharge sequence
//
static void sm_State7Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	480a      	ldr	r0, [pc, #40]	; (8000744 <sm_State7Handler+0x34>)
 800071c:	f001 fea1 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000726:	4808      	ldr	r0, [pc, #32]	; (8000748 <sm_State7Handler+0x38>)
 8000728:	f001 fe9b 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SUPP_LOW_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <sm_State7Handler+0x38>)
 8000734:	f001 fe95 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 8000738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073c:	f000 fcf2 	bl	8001124 <HAL_Delay>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40010800 	.word	0x40010800
 8000748:	40010c00 	.word	0x40010c00

0800074c <sm_State8Handler>:

//
// state8 handler function: close hlim for mppt
//
static void sm_State8Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2110      	movs	r1, #16
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <sm_State8Handler+0x20>)
 8000756:	f001 fe84 	bl	8002462 <HAL_GPIO_WritePin>
	//start timer to check for hlim and llim inputs
	HAL_TIM_Base_Start_IT(&htim2);
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <sm_State8Handler+0x24>)
 800075c:	f002 fcb4 	bl	80030c8 <HAL_TIM_Base_Start_IT>
	HAL_Delay(SM_STATE_DELAY_TIME);
 8000760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000764:	f000 fcde 	bl	8001124 <HAL_Delay>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40010800 	.word	0x40010800
 8000770:	2000013c 	.word	0x2000013c

08000774 <sm_State9Handler>:

//
// state9 handler function: adc reading and can message handling
//
static void sm_State9Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	static uint16_t reading = 0u;
	static uint8_t aTxData[8] = {0u};
	static uint32_t txMailBox;

	//read ADC value and send via can
	reading = SUPP_GetAdcVal();
 8000778:	f000 fc3a 	bl	8000ff0 <SUPP_GetAdcVal>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <sm_State9Handler+0x40>)
 8000782:	801a      	strh	r2, [r3, #0]
	aTxData[0u] =  reading & SM_ADCVAL_LOWER_MASK;
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <sm_State9Handler+0x40>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <sm_State9Handler+0x44>)
 800078c:	701a      	strb	r2, [r3, #0]
	aTxData[1u] =  (reading & SM_ADCVAL_UPPER_MASK) >> SM_ADCVAL_SHIFT_VAL;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <sm_State9Handler+0x40>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <sm_State9Handler+0x44>)
 800079a:	705a      	strb	r2, [r3, #1]
	HAL_CAN_AddTxMessage(&hcan, &zTxHeader, aTxData, &txMailBox);
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <sm_State9Handler+0x48>)
 800079e:	4a06      	ldr	r2, [pc, #24]	; (80007b8 <sm_State9Handler+0x44>)
 80007a0:	4907      	ldr	r1, [pc, #28]	; (80007c0 <sm_State9Handler+0x4c>)
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <sm_State9Handler+0x50>)
 80007a4:	f001 fada 	bl	8001d5c <HAL_CAN_AddTxMessage>
	HAL_Delay(SM_CAN_PERIOD);
 80007a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ac:	f000 fcba 	bl	8001124 <HAL_Delay>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000006e 	.word	0x2000006e
 80007b8:	20000070 	.word	0x20000070
 80007bc:	20000078 	.word	0x20000078
 80007c0:	20000000 	.word	0x20000000
 80007c4:	2000009c 	.word	0x2000009c

080007c8 <sm_State10Handler>:

//
// State10: LLIM High Event handling
//
static void sm_State10Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	if (sm_IsStatusFlagged(SM_STATUS_LLIM_HIGH_FLAG))
 80007cc:	2004      	movs	r0, #4
 80007ce:	f000 f8b9 	bl	8000944 <sm_IsStatusFlagged>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d022      	beq.n	800081e <sm_State10Handler+0x56>
	{
		NVIC_DisableIRQ(TIM2_IRQn);
 80007d8:	201c      	movs	r0, #28
 80007da:	f7ff feff 	bl	80005dc <__NVIC_DisableIRQ>
		HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e4:	480f      	ldr	r0, [pc, #60]	; (8000824 <sm_State10Handler+0x5c>)
 80007e6:	f001 fe3c 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_Delay(SM_PC_DELAY_TIME_1);
 80007ea:	f241 1094 	movw	r0, #4500	; 0x1194
 80007ee:	f000 fc99 	bl	8001124 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <sm_State10Handler+0x60>)
 80007fa:	f001 fe32 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_Delay(SM_PC_DELAY_TIME_2);
 80007fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000802:	f000 fc8f 	bl	8001124 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <sm_State10Handler+0x5c>)
 800080e:	f001 fe28 	bl	8002462 <HAL_GPIO_WritePin>
		SM_ClearStatusFlag(SM_STATUS_LLIM_HIGH_FLAG);
 8000812:	2004      	movs	r0, #4
 8000814:	f000 f922 	bl	8000a5c <SM_ClearStatusFlag>
		NVIC_EnableIRQ(TIM2_IRQn);
 8000818:	201c      	movs	r0, #28
 800081a:	f7ff fec3 	bl	80005a4 <__NVIC_EnableIRQ>
	}
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40010800 	.word	0x40010800
 8000828:	40010c00 	.word	0x40010c00

0800082c <sm_State11Handler>:

//
// state10 handler function: open all terminals and indicate fault in a forever loop
//
static void sm_State11Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	if(sm_IsStatusFlagged(SM_STATUS_FLT_FLAG))
 8000830:	2001      	movs	r0, #1
 8000832:	f000 f887 	bl	8000944 <sm_IsStatusFlagged>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d037      	beq.n	80008ac <sm_State11Handler+0x80>
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
	{
		__disable_irq();
		HAL_GPIO_WritePin(GPIOB, SWAP_OUT_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	481a      	ldr	r0, [pc, #104]	; (80008b0 <sm_State11Handler+0x84>)
 8000848:	f001 fe0b 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2110      	movs	r1, #16
 8000850:	4818      	ldr	r0, [pc, #96]	; (80008b4 <sm_State11Handler+0x88>)
 8000852:	f001 fe06 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085c:	4814      	ldr	r0, [pc, #80]	; (80008b0 <sm_State11Handler+0x84>)
 800085e:	f001 fe00 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000868:	4812      	ldr	r0, [pc, #72]	; (80008b4 <sm_State11Handler+0x88>)
 800086a:	f001 fdfa 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, NEG_OUT_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	480f      	ldr	r0, [pc, #60]	; (80008b0 <sm_State11Handler+0x84>)
 8000874:	f001 fdf5 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, DCDC_OUT_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <sm_State11Handler+0x84>)
 800087e:	f001 fdf0 	bl	8002462 <HAL_GPIO_WritePin>

		//toggle fault indicator led
		for(;;)
		{
			HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <sm_State11Handler+0x84>)
 800088a:	f001 fdea 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_Delay(SM_STATE_DELAY_TIME);
 800088e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000892:	f000 fc47 	bl	8001124 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <sm_State11Handler+0x84>)
 800089e:	f001 fde0 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_Delay(SM_STATE_DELAY_TIME);
 80008a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a6:	f000 fc3d 	bl	8001124 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_SET);
 80008aa:	e7ea      	b.n	8000882 <sm_State11Handler+0x56>
		}
	}
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40010c00 	.word	0x40010c00
 80008b4:	40010800 	.word	0x40010800

080008b8 <sm_FltCheck>:

//
// fault-checking function: goes into fault based on flt_in and estop_in signal
//
static void sm_FltCheck(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
	static uint8_t faultCounter1 = 0u;
	static uint8_t faultCounter2 = 0u;
	GPIO_PinState st1 = HAL_GPIO_ReadPin(GPIOA, FLT_IN_Pin);
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	481c      	ldr	r0, [pc, #112]	; (8000934 <sm_FltCheck+0x7c>)
 80008c2:	f001 fdb7 	bl	8002434 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState st2 =	HAL_GPIO_ReadPin(GPIOB, ESTOP_IN_Pin);
 80008ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ce:	481a      	ldr	r0, [pc, #104]	; (8000938 <sm_FltCheck+0x80>)
 80008d0:	f001 fdb0 	bl	8002434 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	71bb      	strb	r3, [r7, #6]

	//something's wrong when estop_in or flt_in is pulled to gnd
	if (st1 == GPIO_PIN_SET)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d10e      	bne.n	80008fc <sm_FltCheck+0x44>
	{
		//do some de-bouncing, give it three chances
		if(faultCounter1 >= SM_FLT_MAX_COUNTER_VAL)
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <sm_FltCheck+0x84>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b13      	cmp	r3, #19
 80008e4:	d903      	bls.n	80008ee <sm_FltCheck+0x36>
		{
			SM_SetStatusFlag(SM_STATUS_FLT_FLAG);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 f8a4 	bl	8000a34 <SM_SetStatusFlag>
 80008ec:	e009      	b.n	8000902 <sm_FltCheck+0x4a>
		}
		else
		{
			faultCounter1++;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <sm_FltCheck+0x84>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <sm_FltCheck+0x84>)
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e002      	b.n	8000902 <sm_FltCheck+0x4a>
		}
	}
	else
	{
		faultCounter1 = 0u;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <sm_FltCheck+0x84>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
	}

	if (st2 == GPIO_PIN_SET)
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d10e      	bne.n	8000926 <sm_FltCheck+0x6e>
	{
		//do some de-bouncing, give it three chances
		if(faultCounter2 >= SM_FLT_MAX_COUNTER_VAL)
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <sm_FltCheck+0x88>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b13      	cmp	r3, #19
 800090e:	d903      	bls.n	8000918 <sm_FltCheck+0x60>
		{
			SM_SetStatusFlag(SM_STATUS_FLT_FLAG);
 8000910:	2001      	movs	r0, #1
 8000912:	f000 f88f 	bl	8000a34 <SM_SetStatusFlag>
	}
	else
	{
		faultCounter2 = 0u;
	}
}
 8000916:	e009      	b.n	800092c <sm_FltCheck+0x74>
			faultCounter2++;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <sm_FltCheck+0x88>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	3301      	adds	r3, #1
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <sm_FltCheck+0x88>)
 8000922:	701a      	strb	r2, [r3, #0]
}
 8000924:	e002      	b.n	800092c <sm_FltCheck+0x74>
		faultCounter2 = 0u;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <sm_FltCheck+0x88>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40010800 	.word	0x40010800
 8000938:	40010c00 	.word	0x40010c00
 800093c:	2000007c 	.word	0x2000007c
 8000940:	2000007d 	.word	0x2000007d

08000944 <sm_IsStatusFlagged>:

//
// Checks whether a status (FLT, HLIM High, LLIM High) has been flagged
//
static uint8_t sm_IsStatusFlagged(uint8_t flag)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	return (flag & sm_statusFlags);
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <sm_IsStatusFlagged+0x20>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4013      	ands	r3, r2
 8000958:	b2db      	uxtb	r3, r3
}
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	2000006d 	.word	0x2000006d

08000968 <SM_Init>:

//
// Initialize state machine module
//
void SM_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	sm_stateVal = (uint8_t)SM_eState1;
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <SM_Init+0x54>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
	sm_pfaStateHandler[SM_eState1] = &sm_State1Handler;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <SM_Init+0x58>)
 8000974:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <SM_Init+0x5c>)
 8000976:	601a      	str	r2, [r3, #0]
	sm_pfaStateHandler[SM_eState2] = &sm_State2Handler;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <SM_Init+0x58>)
 800097a:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <SM_Init+0x60>)
 800097c:	605a      	str	r2, [r3, #4]
	sm_pfaStateHandler[SM_eState3] = &sm_State3Handler;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <SM_Init+0x58>)
 8000980:	4a12      	ldr	r2, [pc, #72]	; (80009cc <SM_Init+0x64>)
 8000982:	609a      	str	r2, [r3, #8]
	sm_pfaStateHandler[SM_eState4] = &sm_State4Handler;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <SM_Init+0x58>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <SM_Init+0x68>)
 8000988:	60da      	str	r2, [r3, #12]
	sm_pfaStateHandler[SM_eState5] = &sm_State5Handler;
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <SM_Init+0x58>)
 800098c:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <SM_Init+0x6c>)
 800098e:	611a      	str	r2, [r3, #16]
	sm_pfaStateHandler[SM_eState6] = &sm_State6Handler;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <SM_Init+0x58>)
 8000992:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <SM_Init+0x70>)
 8000994:	615a      	str	r2, [r3, #20]
	sm_pfaStateHandler[SM_eState7] = &sm_State7Handler;
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <SM_Init+0x58>)
 8000998:	4a10      	ldr	r2, [pc, #64]	; (80009dc <SM_Init+0x74>)
 800099a:	619a      	str	r2, [r3, #24]
	sm_pfaStateHandler[SM_eState8] = &sm_State8Handler;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <SM_Init+0x58>)
 800099e:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <SM_Init+0x78>)
 80009a0:	61da      	str	r2, [r3, #28]
	sm_pfaStateHandler[SM_eState9] = &sm_State9Handler;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <SM_Init+0x58>)
 80009a4:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <SM_Init+0x7c>)
 80009a6:	621a      	str	r2, [r3, #32]
	sm_pfaStateHandler[SM_eState10] = &sm_State10Handler;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <SM_Init+0x58>)
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <SM_Init+0x80>)
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
	sm_pfaStateHandler[SM_eState11] = &sm_State11Handler;
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <SM_Init+0x58>)
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <SM_Init+0x84>)
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	2000006c 	.word	0x2000006c
 80009c0:	20000040 	.word	0x20000040
 80009c4:	08000625 	.word	0x08000625
 80009c8:	08000651 	.word	0x08000651
 80009cc:	08000681 	.word	0x08000681
 80009d0:	080006a1 	.word	0x080006a1
 80009d4:	080006c1 	.word	0x080006c1
 80009d8:	080006f1 	.word	0x080006f1
 80009dc:	08000711 	.word	0x08000711
 80009e0:	0800074d 	.word	0x0800074d
 80009e4:	08000775 	.word	0x08000775
 80009e8:	080007c9 	.word	0x080007c9
 80009ec:	0800082d 	.word	0x0800082d

080009f0 <SM_Update>:

//
// State machine update states
//
void SM_Update(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

	//calling from function pointer array
	(void)sm_pfaStateHandler[sm_stateVal]();
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <SM_Update+0x3c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <SM_Update+0x40>)
 80009fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a02:	4798      	blx	r3
	//fault checking
	sm_FltCheck();
 8000a04:	f7ff ff58 	bl	80008b8 <sm_FltCheck>
	sm_stateVal++;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <SM_Update+0x3c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	3301      	adds	r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <SM_Update+0x3c>)
 8000a14:	701a      	strb	r2, [r3, #0]

	//keep calling state handlers 9, 10, and 11
	if (SM_eStateMaxNum <= sm_stateVal)
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SM_Update+0x3c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b0a      	cmp	r3, #10
 8000a1e:	d902      	bls.n	8000a26 <SM_Update+0x36>
	{
		sm_stateVal = SM_eState9;
 8000a20:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <SM_Update+0x3c>)
 8000a22:	2208      	movs	r2, #8
 8000a24:	701a      	strb	r2, [r3, #0]
	}

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000006c 	.word	0x2000006c
 8000a30:	20000040 	.word	0x20000040

08000a34 <SM_SetStatusFlag>:

void SM_SetStatusFlag(uint8_t flag)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	sm_statusFlags |= flag;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <SM_SetStatusFlag+0x24>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <SM_SetStatusFlag+0x24>)
 8000a4c:	701a      	strb	r2, [r3, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	2000006d 	.word	0x2000006d

08000a5c <SM_ClearStatusFlag>:

void SM_ClearStatusFlag(uint8_t flag)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	sm_statusFlags &= ~flag;
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	b25a      	sxtb	r2, r3
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <SM_ClearStatusFlag+0x30>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	4013      	ands	r3, r2
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <SM_ClearStatusFlag+0x30>)
 8000a7e:	701a      	strb	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	2000006d 	.word	0x2000006d

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_MspInit+0x5c>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <HAL_MspInit+0x5c>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_MspInit+0x5c>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x5c>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_MspInit+0x5c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x5c>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_MspInit+0x60>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_MspInit+0x60>)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010000 	.word	0x40010000

08000af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <HAL_ADC_MspInit+0x7c>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d129      	bne.n	8000b68 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_ADC_MspInit+0x80>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b44:	2302      	movs	r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_ADC_MspInit+0x84>)
 8000b54:	f001 faea 	bl	800212c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	2012      	movs	r0, #18
 8000b5e:	f001 faae 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b62:	2012      	movs	r0, #18
 8000b64:	f001 fac7 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40012400 	.word	0x40012400
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010c00 	.word	0x40010c00

08000b7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a1c      	ldr	r2, [pc, #112]	; (8000c08 <HAL_CAN_MspInit+0x8c>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d131      	bne.n	8000c00 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_CAN_MspInit+0x90>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <HAL_CAN_MspInit+0x90>)
 8000ba2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba6:	61d3      	str	r3, [r2, #28]
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_CAN_MspInit+0x90>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_CAN_MspInit+0x90>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_CAN_MspInit+0x90>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_CAN_MspInit+0x90>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4619      	mov	r1, r3
 8000be0:	480b      	ldr	r0, [pc, #44]	; (8000c10 <HAL_CAN_MspInit+0x94>)
 8000be2:	f001 faa3 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_CAN_MspInit+0x94>)
 8000bfc:	f001 fa96 	bl	800212c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	3720      	adds	r7, #32
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40006400 	.word	0x40006400
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010800 	.word	0x40010800

08000c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c24:	d114      	bne.n	8000c50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_TIM_Base_MspInit+0x68>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <HAL_TIM_Base_MspInit+0x68>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	61d3      	str	r3, [r2, #28]
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_TIM_Base_MspInit+0x68>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2102      	movs	r1, #2
 8000c42:	201c      	movs	r0, #28
 8000c44:	f001 fa3b 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c48:	201c      	movs	r0, #28
 8000c4a:	f001 fa54 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c4e:	e010      	b.n	8000c72 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_TIM_Base_MspInit+0x6c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10b      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_TIM_Base_MspInit+0x68>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_TIM_Base_MspInit+0x68>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_TIM_Base_MspInit+0x68>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40000400 	.word	0x40000400

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cca:	f000 fa0f 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  SUPP_UpdateAdcFilter(HAL_ADC_GetValue(&hadc1));
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <ADC1_2_IRQHandler+0x20>)
 8000cda:	f000 fbd5 	bl	8001488 <HAL_ADC_GetValue>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f94a 	bl	8000f7c <SUPP_UpdateAdcFilter>
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <ADC1_2_IRQHandler+0x20>)
 8000cea:	f000 fbd9 	bl	80014a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000010c 	.word	0x2000010c

08000cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN TIM2_IRQn 0 */
  diginLLIMState = diginLLIMNextState;
 8000cfc:	4b85      	ldr	r3, [pc, #532]	; (8000f14 <TIM2_IRQHandler+0x21c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b85      	ldr	r3, [pc, #532]	; (8000f18 <TIM2_IRQHandler+0x220>)
 8000d04:	701a      	strb	r2, [r3, #0]
  switch(diginLLIMState)
 8000d06:	4b84      	ldr	r3, [pc, #528]	; (8000f18 <TIM2_IRQHandler+0x220>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d87f      	bhi.n	8000e10 <TIM2_IRQHandler+0x118>
 8000d10:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <TIM2_IRQHandler+0x20>)
 8000d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d16:	bf00      	nop
 8000d18:	08000d29 	.word	0x08000d29
 8000d1c:	08000d69 	.word	0x08000d69
 8000d20:	08000da1 	.word	0x08000da1
 8000d24:	08000de1 	.word	0x08000de1
  {
	  case digin_MaybeDown:
		  if(digin_LLIMIsHigh())
 8000d28:	f000 f908 	bl	8000f3c <digin_LLIMIsHigh>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <TIM2_IRQHandler+0x42>
		  {
			  diginLLIMNextState = digin_MaybeUp;
 8000d32:	4b78      	ldr	r3, [pc, #480]	; (8000f14 <TIM2_IRQHandler+0x21c>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	701a      	strb	r2, [r3, #0]
			  {
				  diginLLIMDebounceTim = 0u;
				  diginLLIMNextState = digin_Down;
			  }
		  }
		  break;
 8000d38:	e06d      	b.n	8000e16 <TIM2_IRQHandler+0x11e>
			  if(diginLLIMDebounceTim < TIM2_DEBOUNCE_TIME_MS)
 8000d3a:	4b78      	ldr	r3, [pc, #480]	; (8000f1c <TIM2_IRQHandler+0x224>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b31      	cmp	r3, #49	; 0x31
 8000d42:	d80a      	bhi.n	8000d5a <TIM2_IRQHandler+0x62>
				  diginLLIMDebounceTim += TIM2_PERIOD_TIME_MS;
 8000d44:	4b75      	ldr	r3, [pc, #468]	; (8000f1c <TIM2_IRQHandler+0x224>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	3332      	adds	r3, #50	; 0x32
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b73      	ldr	r3, [pc, #460]	; (8000f1c <TIM2_IRQHandler+0x224>)
 8000d50:	701a      	strb	r2, [r3, #0]
				  diginLLIMNextState = digin_MaybeDown;
 8000d52:	4b70      	ldr	r3, [pc, #448]	; (8000f14 <TIM2_IRQHandler+0x21c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
		  break;
 8000d58:	e05d      	b.n	8000e16 <TIM2_IRQHandler+0x11e>
				  diginLLIMDebounceTim = 0u;
 8000d5a:	4b70      	ldr	r3, [pc, #448]	; (8000f1c <TIM2_IRQHandler+0x224>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
				  diginLLIMNextState = digin_Down;
 8000d60:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <TIM2_IRQHandler+0x21c>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
		  break;
 8000d66:	e056      	b.n	8000e16 <TIM2_IRQHandler+0x11e>

	  case digin_Down:
		  if(digin_LLIMIsHigh())
 8000d68:	f000 f8e8 	bl	8000f3c <digin_LLIMIsHigh>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <TIM2_IRQHandler+0x82>
		  {
			  diginLLIMNextState = digin_MaybeUp;
 8000d72:	4b68      	ldr	r3, [pc, #416]	; (8000f14 <TIM2_IRQHandler+0x21c>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	701a      	strb	r2, [r3, #0]
			  diginLLIMNextState = digin_Down;
			  pcFlag = PC_FLAG_SET;
			  HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_RESET);
			  HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_RESET);
		  }
		  break;
 8000d78:	e04d      	b.n	8000e16 <TIM2_IRQHandler+0x11e>
			  diginLLIMNextState = digin_Down;
 8000d7a:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <TIM2_IRQHandler+0x21c>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
			  pcFlag = PC_FLAG_SET;
 8000d80:	4b67      	ldr	r3, [pc, #412]	; (8000f20 <TIM2_IRQHandler+0x228>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8c:	4865      	ldr	r0, [pc, #404]	; (8000f24 <TIM2_IRQHandler+0x22c>)
 8000d8e:	f001 fb68 	bl	8002462 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d98:	4863      	ldr	r0, [pc, #396]	; (8000f28 <TIM2_IRQHandler+0x230>)
 8000d9a:	f001 fb62 	bl	8002462 <HAL_GPIO_WritePin>
		  break;
 8000d9e:	e03a      	b.n	8000e16 <TIM2_IRQHandler+0x11e>


	  case digin_MaybeUp:
		  if(digin_LLIMIsHigh())
 8000da0:	f000 f8cc 	bl	8000f3c <digin_LLIMIsHigh>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d016      	beq.n	8000dd8 <TIM2_IRQHandler+0xe0>
		  {
			  if(diginLLIMDebounceTim < TIM2_DEBOUNCE_TIME_MS)
 8000daa:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <TIM2_IRQHandler+0x224>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b31      	cmp	r3, #49	; 0x31
 8000db2:	d80a      	bhi.n	8000dca <TIM2_IRQHandler+0xd2>
			  {
				  diginLLIMDebounceTim += TIM2_PERIOD_TIME_MS;
 8000db4:	4b59      	ldr	r3, [pc, #356]	; (8000f1c <TIM2_IRQHandler+0x224>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	3332      	adds	r3, #50	; 0x32
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b57      	ldr	r3, [pc, #348]	; (8000f1c <TIM2_IRQHandler+0x224>)
 8000dc0:	701a      	strb	r2, [r3, #0]
				  diginLLIMNextState = digin_MaybeUp;
 8000dc2:	4b54      	ldr	r3, [pc, #336]	; (8000f14 <TIM2_IRQHandler+0x21c>)
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	701a      	strb	r2, [r3, #0]
		  }
		  else
		  {
			  diginLLIMNextState = digin_MaybeDown;
		  }
		  break;
 8000dc8:	e025      	b.n	8000e16 <TIM2_IRQHandler+0x11e>
				  diginLLIMDebounceTim = 0u;
 8000dca:	4b54      	ldr	r3, [pc, #336]	; (8000f1c <TIM2_IRQHandler+0x224>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
				  diginLLIMNextState = digin_Up;
 8000dd0:	4b50      	ldr	r3, [pc, #320]	; (8000f14 <TIM2_IRQHandler+0x21c>)
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	701a      	strb	r2, [r3, #0]
		  break;
 8000dd6:	e01e      	b.n	8000e16 <TIM2_IRQHandler+0x11e>
			  diginLLIMNextState = digin_MaybeDown;
 8000dd8:	4b4e      	ldr	r3, [pc, #312]	; (8000f14 <TIM2_IRQHandler+0x21c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
		  break;
 8000dde:	e01a      	b.n	8000e16 <TIM2_IRQHandler+0x11e>

	  case digin_Up:
		  if(digin_LLIMIsHigh())
 8000de0:	f000 f8ac 	bl	8000f3c <digin_LLIMIsHigh>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00e      	beq.n	8000e08 <TIM2_IRQHandler+0x110>
		  {
			  diginLLIMNextState = digin_Up;
 8000dea:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <TIM2_IRQHandler+0x21c>)
 8000dec:	2203      	movs	r2, #3
 8000dee:	701a      	strb	r2, [r3, #0]
			  if(pcFlag == PC_FLAG_SET)
 8000df0:	4b4b      	ldr	r3, [pc, #300]	; (8000f20 <TIM2_IRQHandler+0x228>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d10c      	bne.n	8000e14 <TIM2_IRQHandler+0x11c>
			  {
				  pcFlag = PC_FLAG_RESET;
 8000dfa:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <TIM2_IRQHandler+0x228>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
				  SM_SetStatusFlag(SM_STATUS_LLIM_HIGH_FLAG);
 8000e00:	2004      	movs	r0, #4
 8000e02:	f7ff fe17 	bl	8000a34 <SM_SetStatusFlag>
		  }
		  else
		  {
			  diginLLIMNextState = digin_MaybeDown;
		  }
		  break;
 8000e06:	e005      	b.n	8000e14 <TIM2_IRQHandler+0x11c>
			  diginLLIMNextState = digin_MaybeDown;
 8000e08:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <TIM2_IRQHandler+0x21c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
		  break;
 8000e0e:	e001      	b.n	8000e14 <TIM2_IRQHandler+0x11c>

	  default:
		  /* Do Nothing */
		  break;
 8000e10:	bf00      	nop
 8000e12:	e000      	b.n	8000e16 <TIM2_IRQHandler+0x11e>
		  break;
 8000e14:	bf00      	nop

  }

  diginHLIMState = diginHLIMNextState;
 8000e16:	4b45      	ldr	r3, [pc, #276]	; (8000f2c <TIM2_IRQHandler+0x234>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b44      	ldr	r3, [pc, #272]	; (8000f30 <TIM2_IRQHandler+0x238>)
 8000e1e:	701a      	strb	r2, [r3, #0]

  switch(diginHLIMState)
 8000e20:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <TIM2_IRQHandler+0x238>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d86e      	bhi.n	8000f08 <TIM2_IRQHandler+0x210>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <TIM2_IRQHandler+0x138>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e41 	.word	0x08000e41
 8000e34:	08000e81 	.word	0x08000e81
 8000e38:	08000ea5 	.word	0x08000ea5
 8000e3c:	08000ee5 	.word	0x08000ee5
  {
  case digin_MaybeDown:
	  if(digin_HLIMIsHigh())
 8000e40:	f000 f88c 	bl	8000f5c <digin_HLIMIsHigh>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <TIM2_IRQHandler+0x15a>
	  {
		  diginHLIMNextState = digin_MaybeUp;
 8000e4a:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <TIM2_IRQHandler+0x234>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	701a      	strb	r2, [r3, #0]
		  {
			  diginHLIMDebounceTim = 0u;
			  diginHLIMNextState = digin_Down;
		  }
	  }
	  break;
 8000e50:	e05b      	b.n	8000f0a <TIM2_IRQHandler+0x212>
		  if(diginHLIMDebounceTim < TIM2_DEBOUNCE_TIME_MS)
 8000e52:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <TIM2_IRQHandler+0x23c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b31      	cmp	r3, #49	; 0x31
 8000e5a:	d80a      	bhi.n	8000e72 <TIM2_IRQHandler+0x17a>
			  diginHLIMDebounceTim += TIM2_PERIOD_TIME_MS;
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <TIM2_IRQHandler+0x23c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	3332      	adds	r3, #50	; 0x32
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <TIM2_IRQHandler+0x23c>)
 8000e68:	701a      	strb	r2, [r3, #0]
			  diginHLIMNextState = digin_MaybeDown;
 8000e6a:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <TIM2_IRQHandler+0x234>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
	  break;
 8000e70:	e04b      	b.n	8000f0a <TIM2_IRQHandler+0x212>
			  diginHLIMDebounceTim = 0u;
 8000e72:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <TIM2_IRQHandler+0x23c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
			  diginHLIMNextState = digin_Down;
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <TIM2_IRQHandler+0x234>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
	  break;
 8000e7e:	e044      	b.n	8000f0a <TIM2_IRQHandler+0x212>

  case digin_Down:
	  if(digin_HLIMIsHigh())
 8000e80:	f000 f86c 	bl	8000f5c <digin_HLIMIsHigh>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <TIM2_IRQHandler+0x19a>
	  {
		  diginHLIMNextState = digin_MaybeUp;
 8000e8a:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <TIM2_IRQHandler+0x234>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	701a      	strb	r2, [r3, #0]
	  else
	  {
		  diginHLIMNextState = digin_Down;
		  HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_RESET);
	  }
	  break;
 8000e90:	e03b      	b.n	8000f0a <TIM2_IRQHandler+0x212>
		  diginHLIMNextState = digin_Down;
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <TIM2_IRQHandler+0x234>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	4822      	ldr	r0, [pc, #136]	; (8000f28 <TIM2_IRQHandler+0x230>)
 8000e9e:	f001 fae0 	bl	8002462 <HAL_GPIO_WritePin>
	  break;
 8000ea2:	e032      	b.n	8000f0a <TIM2_IRQHandler+0x212>

  case digin_MaybeUp:
	  if(digin_HLIMIsHigh())
 8000ea4:	f000 f85a 	bl	8000f5c <digin_HLIMIsHigh>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d016      	beq.n	8000edc <TIM2_IRQHandler+0x1e4>
	  {
		  if(diginHLIMDebounceTim < TIM2_DEBOUNCE_TIME_MS)
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <TIM2_IRQHandler+0x23c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b31      	cmp	r3, #49	; 0x31
 8000eb6:	d80a      	bhi.n	8000ece <TIM2_IRQHandler+0x1d6>
		  {
			  diginHLIMDebounceTim += TIM2_PERIOD_TIME_MS;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <TIM2_IRQHandler+0x23c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	3332      	adds	r3, #50	; 0x32
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <TIM2_IRQHandler+0x23c>)
 8000ec4:	701a      	strb	r2, [r3, #0]
			  diginHLIMNextState = digin_MaybeUp;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <TIM2_IRQHandler+0x234>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  diginHLIMNextState = digin_MaybeDown;
	  }
	  break;
 8000ecc:	e01d      	b.n	8000f0a <TIM2_IRQHandler+0x212>
			  diginHLIMDebounceTim = 0u;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <TIM2_IRQHandler+0x23c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
			  diginHLIMNextState = digin_Up;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <TIM2_IRQHandler+0x234>)
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	701a      	strb	r2, [r3, #0]
	  break;
 8000eda:	e016      	b.n	8000f0a <TIM2_IRQHandler+0x212>
		  diginHLIMNextState = digin_MaybeDown;
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <TIM2_IRQHandler+0x234>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	  break;
 8000ee2:	e012      	b.n	8000f0a <TIM2_IRQHandler+0x212>

  case digin_Up:
	  if(digin_HLIMIsHigh())
 8000ee4:	f000 f83a 	bl	8000f5c <digin_HLIMIsHigh>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d008      	beq.n	8000f00 <TIM2_IRQHandler+0x208>
	  {
		  diginHLIMNextState = digin_Up;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <TIM2_IRQHandler+0x234>)
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <TIM2_IRQHandler+0x230>)
 8000efa:	f001 fab2 	bl	8002462 <HAL_GPIO_WritePin>
	  }
	  else
	  {
		  diginHLIMNextState = digin_MaybeDown;
	  }
	  break;
 8000efe:	e004      	b.n	8000f0a <TIM2_IRQHandler+0x212>
		  diginHLIMNextState = digin_MaybeDown;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <TIM2_IRQHandler+0x234>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
	  break;
 8000f06:	e000      	b.n	8000f0a <TIM2_IRQHandler+0x212>

  default:
	  /* Do Nothing */
	  break;
 8000f08:	bf00      	nop

  }

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <TIM2_IRQHandler+0x240>)
 8000f0c:	f002 f92e 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000007f 	.word	0x2000007f
 8000f18:	2000007e 	.word	0x2000007e
 8000f1c:	20000080 	.word	0x20000080
 8000f20:	20000084 	.word	0x20000084
 8000f24:	40010c00 	.word	0x40010c00
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	20000082 	.word	0x20000082
 8000f30:	20000081 	.word	0x20000081
 8000f34:	20000083 	.word	0x20000083
 8000f38:	2000013c 	.word	0x2000013c

08000f3c <digin_LLIMIsHigh>:

/* USER CODE BEGIN 1 */

static uint8_t digin_LLIMIsHigh(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	return (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, LLIM_IN_Pin));
 8000f40:	2140      	movs	r1, #64	; 0x40
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <digin_LLIMIsHigh+0x1c>)
 8000f44:	f001 fa76 	bl	8002434 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	bf0c      	ite	eq
 8000f4e:	2301      	moveq	r3, #1
 8000f50:	2300      	movne	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40010800 	.word	0x40010800

08000f5c <digin_HLIMIsHigh>:

static uint8_t digin_HLIMIsHigh(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	return (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, HLIM_IN_Pin));
 8000f60:	2120      	movs	r1, #32
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <digin_HLIMIsHigh+0x1c>)
 8000f64:	f001 fa66 	bl	8002434 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	bf0c      	ite	eq
 8000f6e:	2301      	moveq	r3, #1
 8000f70:	2300      	movne	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40010800 	.word	0x40010800

08000f7c <SUPP_UpdateAdcFilter>:

//
// Shoves an ADC reading into the filter circular buffer and update filter output
//
void SUPP_UpdateAdcFilter(uint16_t adcVal)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
	uint8_t index;
	uint16_t supp_bufferSum = 0u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	81bb      	strh	r3, [r7, #12]

	//update circular buffer
	supp_aAdcVal[supp_bufferIndex] = adcVal;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <SUPP_UpdateAdcFilter+0x68>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4619      	mov	r1, r3
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <SUPP_UpdateAdcFilter+0x6c>)
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	supp_bufferIndex = SUPP_GET_NEXT_IND(supp_bufferIndex);
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <SUPP_UpdateAdcFilter+0x68>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <SUPP_UpdateAdcFilter+0x68>)
 8000fac:	701a      	strb	r2, [r3, #0]

	for(index = SUPP_BUFFER_FIRST_INDEX; index < SUPP_RAW_READING_BUFFER_LENGTH; index++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e00a      	b.n	8000fca <SUPP_UpdateAdcFilter+0x4e>
	{
		supp_bufferSum += supp_aAdcVal[index];
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <SUPP_UpdateAdcFilter+0x6c>)
 8000fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	81bb      	strh	r3, [r7, #12]
	for(index = SUPP_BUFFER_FIRST_INDEX; index < SUPP_RAW_READING_BUFFER_LENGTH; index++)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	2b07      	cmp	r3, #7
 8000fce:	d9f1      	bls.n	8000fb4 <SUPP_UpdateAdcFilter+0x38>
	}

	supp_filteredOut = supp_bufferSum >> 3u;
 8000fd0:	89bb      	ldrh	r3, [r7, #12]
 8000fd2:	08db      	lsrs	r3, r3, #3
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SUPP_UpdateAdcFilter+0x70>)
 8000fd8:	801a      	strh	r2, [r3, #0]
	//	}
	//	supp_fFilteredOut += supp_filterTaps[index] * supp_aAdcVal[supp_bufferSumIndex];
	//}


}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	20000098 	.word	0x20000098
 8000fe8:	20000088 	.word	0x20000088
 8000fec:	2000009a 	.word	0x2000009a

08000ff0 <SUPP_GetAdcVal>:

uint16_t SUPP_GetAdcVal(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	return supp_filteredOut;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <SUPP_GetAdcVal+0x14>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	2000009a 	.word	0x2000009a

08001008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	; (800104c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800103a:	f7ff ffe5 	bl	8001008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103e:	f002 fbf7 	bl	8003830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001042:	f7ff f883 	bl	800014c <main>
  bx lr
 8001046:	4770      	bx	lr
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001050:	080038e0 	.word	0x080038e0
  ldr r2, =_sbss
 8001054:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001058:	20000188 	.word	0x20000188

0800105c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800105c:	e7fe      	b.n	800105c <CAN1_RX1_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_Init+0x28>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_Init+0x28>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f001 f819 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	2001      	movs	r0, #1
 8001078:	f000 f808 	bl	800108c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fd08 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x54>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x58>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f831 	bl	8002112 <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 fff9 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x5c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000018 	.word	0x20000018
 80010e4:	20000020 	.word	0x20000020
 80010e8:	2000001c 	.word	0x2000001c

080010ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_IncTick+0x1c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x20>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a03      	ldr	r2, [pc, #12]	; (800110c <HAL_IncTick+0x20>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000020 	.word	0x20000020
 800110c:	20000184 	.word	0x20000184

08001110 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <HAL_GetTick+0x10>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	20000184 	.word	0x20000184

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff fff0 	bl	8001110 <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffe0 	bl	8001110 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000020 	.word	0x20000020

0800116c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e0be      	b.n	800130c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	2b00      	cmp	r3, #0
 800119a:	d109      	bne.n	80011b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fca2 	bl	8000af4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fb9d 	bl	80018f0 <ADC_ConversionStop_Disable>
 80011b6:	4603      	mov	r3, r0
 80011b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 8099 	bne.w	80012fa <HAL_ADC_Init+0x18e>
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 8095 	bne.w	80012fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011d8:	f023 0302 	bic.w	r3, r3, #2
 80011dc:	f043 0202 	orr.w	r2, r3, #2
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7b1b      	ldrb	r3, [r3, #12]
 80011f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001204:	d003      	beq.n	800120e <HAL_ADC_Init+0xa2>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d102      	bne.n	8001214 <HAL_ADC_Init+0xa8>
 800120e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001212:	e000      	b.n	8001216 <HAL_ADC_Init+0xaa>
 8001214:	2300      	movs	r3, #0
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7d1b      	ldrb	r3, [r3, #20]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d119      	bne.n	8001258 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7b1b      	ldrb	r3, [r3, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d109      	bne.n	8001240 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	3b01      	subs	r3, #1
 8001232:	035a      	lsls	r2, r3, #13
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	e00b      	b.n	8001258 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	f043 0220 	orr.w	r2, r3, #32
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	f043 0201 	orr.w	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	430a      	orrs	r2, r1
 800126a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <HAL_ADC_Init+0x1a8>)
 8001274:	4013      	ands	r3, r2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	430b      	orrs	r3, r1
 800127e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001288:	d003      	beq.n	8001292 <HAL_ADC_Init+0x126>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d104      	bne.n	800129c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	3b01      	subs	r3, #1
 8001298:	051b      	lsls	r3, r3, #20
 800129a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_ADC_Init+0x1ac>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d10b      	bne.n	80012d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ca:	f023 0303 	bic.w	r3, r3, #3
 80012ce:	f043 0201 	orr.w	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012d6:	e018      	b.n	800130a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	f023 0312 	bic.w	r3, r3, #18
 80012e0:	f043 0210 	orr.w	r2, r3, #16
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	f043 0201 	orr.w	r2, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012f8:	e007      	b.n	800130a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	f043 0210 	orr.w	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800130a:	7dfb      	ldrb	r3, [r7, #23]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	ffe1f7fd 	.word	0xffe1f7fd
 8001318:	ff1f0efe 	.word	0xff1f0efe

0800131c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_ADC_Start_IT+0x1a>
 8001332:	2302      	movs	r3, #2
 8001334:	e0a0      	b.n	8001478 <HAL_ADC_Start_IT+0x15c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fa7c 	bl	800183c <ADC_Enable>
 8001344:	4603      	mov	r3, r0
 8001346:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f040 808f 	bne.w	800146e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a45      	ldr	r2, [pc, #276]	; (8001480 <HAL_ADC_Start_IT+0x164>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d105      	bne.n	800137a <HAL_ADC_Start_IT+0x5e>
 800136e:	4b45      	ldr	r3, [pc, #276]	; (8001484 <HAL_ADC_Start_IT+0x168>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d115      	bne.n	80013a6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001390:	2b00      	cmp	r3, #0
 8001392:	d026      	beq.n	80013e2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800139c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013a4:	e01d      	b.n	80013e2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a33      	ldr	r2, [pc, #204]	; (8001484 <HAL_ADC_Start_IT+0x168>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d004      	beq.n	80013c6 <HAL_ADC_Start_IT+0xaa>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <HAL_ADC_Start_IT+0x164>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10d      	bne.n	80013e2 <HAL_ADC_Start_IT+0xc6>
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <HAL_ADC_Start_IT+0x168>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	f023 0206 	bic.w	r2, r3, #6
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80013fa:	e002      	b.n	8001402 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f06f 0202 	mvn.w	r2, #2
 8001412:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0220 	orr.w	r2, r2, #32
 8001422:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800142e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001432:	d113      	bne.n	800145c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001438:	4a11      	ldr	r2, [pc, #68]	; (8001480 <HAL_ADC_Start_IT+0x164>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d105      	bne.n	800144a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_ADC_Start_IT+0x168>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001446:	2b00      	cmp	r3, #0
 8001448:	d108      	bne.n	800145c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	e00c      	b.n	8001476 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	e003      	b.n	8001476 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40012800 	.word	0x40012800
 8001484:	40012400 	.word	0x40012400

08001488 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	2b20      	cmp	r3, #32
 80014b4:	d140      	bne.n	8001538 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d139      	bne.n	8001538 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d105      	bne.n	80014dc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014ea:	d11d      	bne.n	8001528 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d119      	bne.n	8001528 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0220 	bic.w	r2, r2, #32
 8001502:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f87c 	bl	8001626 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f06f 0212 	mvn.w	r2, #18
 8001536:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001542:	2b80      	cmp	r3, #128	; 0x80
 8001544:	d14f      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b04      	cmp	r3, #4
 8001552:	d148      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b00      	cmp	r3, #0
 800155e:	d105      	bne.n	800156c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001576:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800157a:	d012      	beq.n	80015a2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001586:	2b00      	cmp	r3, #0
 8001588:	d125      	bne.n	80015d6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001594:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001598:	d11d      	bne.n	80015d6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d119      	bne.n	80015d6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d105      	bne.n	80015d6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	f043 0201 	orr.w	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fa78 	bl	8001acc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f06f 020c 	mvn.w	r2, #12
 80015e4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f0:	2b40      	cmp	r3, #64	; 0x40
 80015f2:	d114      	bne.n	800161e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d10d      	bne.n	800161e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f812 	bl	8001638 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f06f 0201 	mvn.w	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_ADC_ConfigChannel+0x20>
 8001668:	2302      	movs	r3, #2
 800166a:	e0dc      	b.n	8001826 <HAL_ADC_ConfigChannel+0x1da>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b06      	cmp	r3, #6
 800167a:	d81c      	bhi.n	80016b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	3b05      	subs	r3, #5
 800168e:	221f      	movs	r2, #31
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	4019      	ands	r1, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	3b05      	subs	r3, #5
 80016a8:	fa00 f203 	lsl.w	r2, r0, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34
 80016b4:	e03c      	b.n	8001730 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d81c      	bhi.n	80016f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	3b23      	subs	r3, #35	; 0x23
 80016d0:	221f      	movs	r2, #31
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	4019      	ands	r1, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	3b23      	subs	r3, #35	; 0x23
 80016ea:	fa00 f203 	lsl.w	r2, r0, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	631a      	str	r2, [r3, #48]	; 0x30
 80016f6:	e01b      	b.n	8001730 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	3b41      	subs	r3, #65	; 0x41
 800170a:	221f      	movs	r2, #31
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	4019      	ands	r1, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	3b41      	subs	r3, #65	; 0x41
 8001724:	fa00 f203 	lsl.w	r2, r0, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b09      	cmp	r3, #9
 8001736:	d91c      	bls.n	8001772 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68d9      	ldr	r1, [r3, #12]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	3b1e      	subs	r3, #30
 800174a:	2207      	movs	r2, #7
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	4019      	ands	r1, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6898      	ldr	r0, [r3, #8]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	3b1e      	subs	r3, #30
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	e019      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6919      	ldr	r1, [r3, #16]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	2207      	movs	r2, #7
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	4019      	ands	r1, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6898      	ldr	r0, [r3, #8]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	fa00 f203 	lsl.w	r2, r0, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d003      	beq.n	80017b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017b2:	2b11      	cmp	r3, #17
 80017b4:	d132      	bne.n	800181c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <HAL_ADC_ConfigChannel+0x1e4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d125      	bne.n	800180c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d126      	bne.n	800181c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d11a      	bne.n	800181c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_ADC_ConfigChannel+0x1e8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <HAL_ADC_ConfigChannel+0x1ec>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	0c9a      	lsrs	r2, r3, #18
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017fc:	e002      	b.n	8001804 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3b01      	subs	r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f9      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x1b2>
 800180a:	e007      	b.n	800181c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	f043 0220 	orr.w	r2, r3, #32
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	40012400 	.word	0x40012400
 8001834:	20000018 	.word	0x20000018
 8001838:	431bde83 	.word	0x431bde83

0800183c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b01      	cmp	r3, #1
 8001858:	d040      	beq.n	80018dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0201 	orr.w	r2, r2, #1
 8001868:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800186a:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <ADC_Enable+0xac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <ADC_Enable+0xb0>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	0c9b      	lsrs	r3, r3, #18
 8001876:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001878:	e002      	b.n	8001880 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3b01      	subs	r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f9      	bne.n	800187a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001886:	f7ff fc43 	bl	8001110 <HAL_GetTick>
 800188a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800188c:	e01f      	b.n	80018ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800188e:	f7ff fc3f 	bl	8001110 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d918      	bls.n	80018ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d011      	beq.n	80018ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	f043 0210 	orr.w	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e007      	b.n	80018de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d1d8      	bne.n	800188e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000018 	.word	0x20000018
 80018ec:	431bde83 	.word	0x431bde83

080018f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b01      	cmp	r3, #1
 8001908:	d12e      	bne.n	8001968 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800191a:	f7ff fbf9 	bl	8001110 <HAL_GetTick>
 800191e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001920:	e01b      	b.n	800195a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001922:	f7ff fbf5 	bl	8001110 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d914      	bls.n	800195a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b01      	cmp	r3, #1
 800193c:	d10d      	bne.n	800195a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	f043 0210 	orr.w	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	f043 0201 	orr.w	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e007      	b.n	800196a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	d0dc      	beq.n	8001922 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_ADCEx_Calibration_Start+0x1e>
 800198e:	2302      	movs	r3, #2
 8001990:	e095      	b.n	8001abe <HAL_ADCEx_Calibration_Start+0x14a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa8 	bl	80018f0 <ADC_ConversionStop_Disable>
 80019a0:	4603      	mov	r3, r0
 80019a2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 8084 	bne.w	8001ab4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019b4:	f023 0302 	bic.w	r3, r3, #2
 80019b8:	f043 0202 	orr.w	r2, r3, #2
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019c0:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_ADCEx_Calibration_Start+0x154>)
 80019c2:	681c      	ldr	r4, [r3, #0]
 80019c4:	2002      	movs	r0, #2
 80019c6:	f001 fa21 	bl	8002e0c <HAL_RCCEx_GetPeriphCLKFreq>
 80019ca:	4603      	mov	r3, r0
 80019cc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80019d0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80019d2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80019d4:	e002      	b.n	80019dc <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3b01      	subs	r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f9      	bne.n	80019d6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff2a 	bl	800183c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0208 	orr.w	r2, r2, #8
 80019f6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80019f8:	f7ff fb8a 	bl	8001110 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80019fe:	e01b      	b.n	8001a38 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a00:	f7ff fb86 	bl	8001110 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b0a      	cmp	r3, #10
 8001a0c:	d914      	bls.n	8001a38 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00d      	beq.n	8001a38 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	f023 0312 	bic.w	r3, r3, #18
 8001a24:	f043 0210 	orr.w	r2, r3, #16
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e042      	b.n	8001abe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1dc      	bne.n	8001a00 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0204 	orr.w	r2, r2, #4
 8001a54:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001a56:	f7ff fb5b 	bl	8001110 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001a5c:	e01b      	b.n	8001a96 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a5e:	f7ff fb57 	bl	8001110 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b0a      	cmp	r3, #10
 8001a6a:	d914      	bls.n	8001a96 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00d      	beq.n	8001a96 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	f023 0312 	bic.w	r3, r3, #18
 8001a82:	f043 0210 	orr.w	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e013      	b.n	8001abe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1dc      	bne.n	8001a5e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	f023 0303 	bic.w	r3, r3, #3
 8001aac:	f043 0201 	orr.w	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd90      	pop	{r4, r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000018 	.word	0x20000018

08001acc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0ed      	b.n	8001ccc <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff f83d 	bl	8000b7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0201 	orr.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b12:	f7ff fafd 	bl	8001110 <HAL_GetTick>
 8001b16:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b18:	e012      	b.n	8001b40 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b1a:	f7ff faf9 	bl	8001110 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b0a      	cmp	r3, #10
 8001b26:	d90b      	bls.n	8001b40 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2205      	movs	r2, #5
 8001b38:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0c5      	b.n	8001ccc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0e5      	beq.n	8001b1a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0202 	bic.w	r2, r2, #2
 8001b5c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b5e:	f7ff fad7 	bl	8001110 <HAL_GetTick>
 8001b62:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b64:	e012      	b.n	8001b8c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b66:	f7ff fad3 	bl	8001110 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b0a      	cmp	r3, #10
 8001b72:	d90b      	bls.n	8001b8c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2205      	movs	r2, #5
 8001b84:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e09f      	b.n	8001ccc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1e5      	bne.n	8001b66 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7e1b      	ldrb	r3, [r3, #24]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d108      	bne.n	8001bb4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e007      	b.n	8001bc4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7e5b      	ldrb	r3, [r3, #25]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d108      	bne.n	8001bde <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e007      	b.n	8001bee <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7e9b      	ldrb	r3, [r3, #26]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d108      	bne.n	8001c08 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0220 	orr.w	r2, r2, #32
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e007      	b.n	8001c18 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0220 	bic.w	r2, r2, #32
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7edb      	ldrb	r3, [r3, #27]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0210 	bic.w	r2, r2, #16
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e007      	b.n	8001c42 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0210 	orr.w	r2, r2, #16
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7f1b      	ldrb	r3, [r3, #28]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d108      	bne.n	8001c5c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0208 	orr.w	r2, r2, #8
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e007      	b.n	8001c6c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0208 	bic.w	r2, r2, #8
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7f5b      	ldrb	r3, [r3, #29]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d108      	bne.n	8001c86 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0204 	orr.w	r2, r2, #4
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	e007      	b.n	8001c96 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0204 	bic.w	r2, r2, #4
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	ea42 0103 	orr.w	r1, r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d12e      	bne.n	8001d46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d00:	f7ff fa06 	bl	8001110 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d06:	e012      	b.n	8001d2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d08:	f7ff fa02 	bl	8001110 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b0a      	cmp	r3, #10
 8001d14:	d90b      	bls.n	8001d2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2205      	movs	r2, #5
 8001d26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e012      	b.n	8001d54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1e5      	bne.n	8001d08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e006      	b.n	8001d54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
  }
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d7a:	7ffb      	ldrb	r3, [r7, #31]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d003      	beq.n	8001d88 <HAL_CAN_AddTxMessage+0x2c>
 8001d80:	7ffb      	ldrb	r3, [r7, #31]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	f040 80b8 	bne.w	8001ef8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80a0 	beq.w	8001ee8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	0e1b      	lsrs	r3, r3, #24
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d907      	bls.n	8001dc8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e09e      	b.n	8001f06 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10d      	bne.n	8001df6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	6809      	ldr	r1, [r1, #0]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	3318      	adds	r3, #24
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	440b      	add	r3, r1
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e00f      	b.n	8001e16 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e00:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e0a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3318      	adds	r3, #24
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	440b      	add	r3, r1
 8001e14:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3318      	adds	r3, #24
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	440b      	add	r3, r1
 8001e26:	3304      	adds	r3, #4
 8001e28:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	7d1b      	ldrb	r3, [r3, #20]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d111      	bne.n	8001e56 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3318      	adds	r3, #24
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	6811      	ldr	r1, [r2, #0]
 8001e46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3318      	adds	r3, #24
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	440b      	add	r3, r1
 8001e52:	3304      	adds	r3, #4
 8001e54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3307      	adds	r3, #7
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061a      	lsls	r2, r3, #24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3306      	adds	r3, #6
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3305      	adds	r3, #5
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4313      	orrs	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	3204      	adds	r2, #4
 8001e76:	7812      	ldrb	r2, [r2, #0]
 8001e78:	4610      	mov	r0, r2
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	6811      	ldr	r1, [r2, #0]
 8001e7e:	ea43 0200 	orr.w	r2, r3, r0
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3303      	adds	r3, #3
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	061a      	lsls	r2, r3, #24
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	7812      	ldrb	r2, [r2, #0]
 8001eae:	4610      	mov	r0, r2
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	6811      	ldr	r1, [r2, #0]
 8001eb4:	ea43 0200 	orr.w	r2, r3, r0
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	440b      	add	r3, r1
 8001ebe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ec2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3318      	adds	r3, #24
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	6811      	ldr	r1, [r2, #0]
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3318      	adds	r3, #24
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	440b      	add	r3, r1
 8001ee2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e00e      	b.n	8001f06 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e006      	b.n	8001f06 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <__NVIC_SetPriorityGrouping>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_GetPriorityGrouping>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_EnableIRQ>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db0b      	blt.n	8001f9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4906      	ldr	r1, [pc, #24]	; (8001fa8 <__NVIC_EnableIRQ+0x34>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff90 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff2d 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff42 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff90 	bl	8002000 <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5f 	bl	8001fac <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff35 	bl	8001f74 <__NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ffa2 	bl	8002064 <SysTick_Config>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b08b      	sub	sp, #44	; 0x2c
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213e:	e169      	b.n	8002414 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002140:	2201      	movs	r2, #1
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	429a      	cmp	r2, r3
 800215a:	f040 8158 	bne.w	800240e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4a9a      	ldr	r2, [pc, #616]	; (80023cc <HAL_GPIO_Init+0x2a0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d05e      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002168:	4a98      	ldr	r2, [pc, #608]	; (80023cc <HAL_GPIO_Init+0x2a0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d875      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 800216e:	4a98      	ldr	r2, [pc, #608]	; (80023d0 <HAL_GPIO_Init+0x2a4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d058      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002174:	4a96      	ldr	r2, [pc, #600]	; (80023d0 <HAL_GPIO_Init+0x2a4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d86f      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 800217a:	4a96      	ldr	r2, [pc, #600]	; (80023d4 <HAL_GPIO_Init+0x2a8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d052      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002180:	4a94      	ldr	r2, [pc, #592]	; (80023d4 <HAL_GPIO_Init+0x2a8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d869      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 8002186:	4a94      	ldr	r2, [pc, #592]	; (80023d8 <HAL_GPIO_Init+0x2ac>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d04c      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 800218c:	4a92      	ldr	r2, [pc, #584]	; (80023d8 <HAL_GPIO_Init+0x2ac>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d863      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 8002192:	4a92      	ldr	r2, [pc, #584]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d046      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002198:	4a90      	ldr	r2, [pc, #576]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d85d      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d82a      	bhi.n	80021f8 <HAL_GPIO_Init+0xcc>
 80021a2:	2b12      	cmp	r3, #18
 80021a4:	d859      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 80021a6:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <HAL_GPIO_Init+0x80>)
 80021a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ac:	08002227 	.word	0x08002227
 80021b0:	08002201 	.word	0x08002201
 80021b4:	08002213 	.word	0x08002213
 80021b8:	08002255 	.word	0x08002255
 80021bc:	0800225b 	.word	0x0800225b
 80021c0:	0800225b 	.word	0x0800225b
 80021c4:	0800225b 	.word	0x0800225b
 80021c8:	0800225b 	.word	0x0800225b
 80021cc:	0800225b 	.word	0x0800225b
 80021d0:	0800225b 	.word	0x0800225b
 80021d4:	0800225b 	.word	0x0800225b
 80021d8:	0800225b 	.word	0x0800225b
 80021dc:	0800225b 	.word	0x0800225b
 80021e0:	0800225b 	.word	0x0800225b
 80021e4:	0800225b 	.word	0x0800225b
 80021e8:	0800225b 	.word	0x0800225b
 80021ec:	0800225b 	.word	0x0800225b
 80021f0:	08002209 	.word	0x08002209
 80021f4:	0800221d 	.word	0x0800221d
 80021f8:	4a79      	ldr	r2, [pc, #484]	; (80023e0 <HAL_GPIO_Init+0x2b4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021fe:	e02c      	b.n	800225a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	623b      	str	r3, [r7, #32]
          break;
 8002206:	e029      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	3304      	adds	r3, #4
 800220e:	623b      	str	r3, [r7, #32]
          break;
 8002210:	e024      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	3308      	adds	r3, #8
 8002218:	623b      	str	r3, [r7, #32]
          break;
 800221a:	e01f      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	330c      	adds	r3, #12
 8002222:	623b      	str	r3, [r7, #32]
          break;
 8002224:	e01a      	b.n	800225c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800222e:	2304      	movs	r3, #4
 8002230:	623b      	str	r3, [r7, #32]
          break;
 8002232:	e013      	b.n	800225c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d105      	bne.n	8002248 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800223c:	2308      	movs	r3, #8
 800223e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	611a      	str	r2, [r3, #16]
          break;
 8002246:	e009      	b.n	800225c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002248:	2308      	movs	r3, #8
 800224a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	615a      	str	r2, [r3, #20]
          break;
 8002252:	e003      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
          break;
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x130>
          break;
 800225a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2bff      	cmp	r3, #255	; 0xff
 8002260:	d801      	bhi.n	8002266 <HAL_GPIO_Init+0x13a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	e001      	b.n	800226a <HAL_GPIO_Init+0x13e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2bff      	cmp	r3, #255	; 0xff
 8002270:	d802      	bhi.n	8002278 <HAL_GPIO_Init+0x14c>
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	e002      	b.n	800227e <HAL_GPIO_Init+0x152>
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	3b08      	subs	r3, #8
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	210f      	movs	r1, #15
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	401a      	ands	r2, r3
 8002290:	6a39      	ldr	r1, [r7, #32]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	431a      	orrs	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80b1 	beq.w	800240e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022ac:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <HAL_GPIO_Init+0x2b8>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a4c      	ldr	r2, [pc, #304]	; (80023e4 <HAL_GPIO_Init+0x2b8>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6193      	str	r3, [r2, #24]
 80022b8:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <HAL_GPIO_Init+0x2b8>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c4:	4a48      	ldr	r2, [pc, #288]	; (80023e8 <HAL_GPIO_Init+0x2bc>)
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	220f      	movs	r2, #15
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a40      	ldr	r2, [pc, #256]	; (80023ec <HAL_GPIO_Init+0x2c0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d013      	beq.n	8002318 <HAL_GPIO_Init+0x1ec>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a3f      	ldr	r2, [pc, #252]	; (80023f0 <HAL_GPIO_Init+0x2c4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00d      	beq.n	8002314 <HAL_GPIO_Init+0x1e8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a3e      	ldr	r2, [pc, #248]	; (80023f4 <HAL_GPIO_Init+0x2c8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d007      	beq.n	8002310 <HAL_GPIO_Init+0x1e4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a3d      	ldr	r2, [pc, #244]	; (80023f8 <HAL_GPIO_Init+0x2cc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_GPIO_Init+0x1e0>
 8002308:	2303      	movs	r3, #3
 800230a:	e006      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 800230c:	2304      	movs	r3, #4
 800230e:	e004      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 8002310:	2302      	movs	r3, #2
 8002312:	e002      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 8002318:	2300      	movs	r3, #0
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	f002 0203 	and.w	r2, r2, #3
 8002320:	0092      	lsls	r2, r2, #2
 8002322:	4093      	lsls	r3, r2
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800232a:	492f      	ldr	r1, [pc, #188]	; (80023e8 <HAL_GPIO_Init+0x2bc>)
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002344:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	492c      	ldr	r1, [pc, #176]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	43db      	mvns	r3, r3
 800235a:	4928      	ldr	r1, [pc, #160]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 800235c:	4013      	ands	r3, r2
 800235e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4922      	ldr	r1, [pc, #136]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	43db      	mvns	r3, r3
 8002382:	491e      	ldr	r1, [pc, #120]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 8002384:	4013      	ands	r3, r2
 8002386:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	4918      	ldr	r1, [pc, #96]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4914      	ldr	r1, [pc, #80]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d021      	beq.n	8002400 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	490e      	ldr	r1, [pc, #56]	; (80023fc <HAL_GPIO_Init+0x2d0>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60cb      	str	r3, [r1, #12]
 80023c8:	e021      	b.n	800240e <HAL_GPIO_Init+0x2e2>
 80023ca:	bf00      	nop
 80023cc:	10320000 	.word	0x10320000
 80023d0:	10310000 	.word	0x10310000
 80023d4:	10220000 	.word	0x10220000
 80023d8:	10210000 	.word	0x10210000
 80023dc:	10120000 	.word	0x10120000
 80023e0:	10110000 	.word	0x10110000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010000 	.word	0x40010000
 80023ec:	40010800 	.word	0x40010800
 80023f0:	40010c00 	.word	0x40010c00
 80023f4:	40011000 	.word	0x40011000
 80023f8:	40011400 	.word	0x40011400
 80023fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_GPIO_Init+0x304>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	43db      	mvns	r3, r3
 8002408:	4909      	ldr	r1, [pc, #36]	; (8002430 <HAL_GPIO_Init+0x304>)
 800240a:	4013      	ands	r3, r2
 800240c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	3301      	adds	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	f47f ae8e 	bne.w	8002140 <HAL_GPIO_Init+0x14>
  }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	372c      	adds	r7, #44	; 0x2c
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40010400 	.word	0x40010400

08002434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	e001      	b.n	8002456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	807b      	strh	r3, [r7, #2]
 800246e:	4613      	mov	r3, r2
 8002470:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002472:	787b      	ldrb	r3, [r7, #1]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002478:	887a      	ldrh	r2, [r7, #2]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800247e:	e003      	b.n	8002488 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002480:	887b      	ldrh	r3, [r7, #2]
 8002482:	041a      	lsls	r2, r3, #16
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	611a      	str	r2, [r3, #16]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
	...

08002494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e26c      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8087 	beq.w	80025c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b4:	4b92      	ldr	r3, [pc, #584]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d00c      	beq.n	80024da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024c0:	4b8f      	ldr	r3, [pc, #572]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d112      	bne.n	80024f2 <HAL_RCC_OscConfig+0x5e>
 80024cc:	4b8c      	ldr	r3, [pc, #560]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d10b      	bne.n	80024f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024da:	4b89      	ldr	r3, [pc, #548]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d06c      	beq.n	80025c0 <HAL_RCC_OscConfig+0x12c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d168      	bne.n	80025c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e246      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x76>
 80024fc:	4b80      	ldr	r3, [pc, #512]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a7f      	ldr	r2, [pc, #508]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	e02e      	b.n	8002568 <HAL_RCC_OscConfig+0xd4>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x98>
 8002512:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a7a      	ldr	r2, [pc, #488]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b78      	ldr	r3, [pc, #480]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a77      	ldr	r2, [pc, #476]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e01d      	b.n	8002568 <HAL_RCC_OscConfig+0xd4>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0xbc>
 8002536:	4b72      	ldr	r3, [pc, #456]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a71      	ldr	r2, [pc, #452]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 800253c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a6e      	ldr	r2, [pc, #440]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e00b      	b.n	8002568 <HAL_RCC_OscConfig+0xd4>
 8002550:	4b6b      	ldr	r3, [pc, #428]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a6a      	ldr	r2, [pc, #424]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b68      	ldr	r3, [pc, #416]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a67      	ldr	r2, [pc, #412]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002566:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d013      	beq.n	8002598 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fdce 	bl	8001110 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe fdca 	bl	8001110 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1fa      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b5d      	ldr	r3, [pc, #372]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0xe4>
 8002596:	e014      	b.n	80025c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fdba 	bl	8001110 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe fdb6 	bl	8001110 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1e6      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	4b53      	ldr	r3, [pc, #332]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x10c>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d063      	beq.n	8002696 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ce:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025da:	4b49      	ldr	r3, [pc, #292]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d11c      	bne.n	8002620 <HAL_RCC_OscConfig+0x18c>
 80025e6:	4b46      	ldr	r3, [pc, #280]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d116      	bne.n	8002620 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_RCC_OscConfig+0x176>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e1ba      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260a:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4939      	ldr	r1, [pc, #228]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	e03a      	b.n	8002696 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d020      	beq.n	800266a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002628:	4b36      	ldr	r3, [pc, #216]	; (8002704 <HAL_RCC_OscConfig+0x270>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe fd6f 	bl	8001110 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002636:	f7fe fd6b 	bl	8001110 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e19b      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002654:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4927      	ldr	r1, [pc, #156]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]
 8002668:	e015      	b.n	8002696 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <HAL_RCC_OscConfig+0x270>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fd4e 	bl	8001110 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002678:	f7fe fd4a 	bl	8001110 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e17a      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d03a      	beq.n	8002718 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d019      	beq.n	80026de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b0:	f7fe fd2e 	bl	8001110 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b8:	f7fe fd2a 	bl	8001110 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e15a      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026d6:	2001      	movs	r0, #1
 80026d8:	f000 fac4 	bl	8002c64 <RCC_Delay>
 80026dc:	e01c      	b.n	8002718 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_RCC_OscConfig+0x274>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7fe fd14 	bl	8001110 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ea:	e00f      	b.n	800270c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ec:	f7fe fd10 	bl	8001110 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d908      	bls.n	800270c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e140      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	42420000 	.word	0x42420000
 8002708:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	4b9e      	ldr	r3, [pc, #632]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e9      	bne.n	80026ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80a6 	beq.w	8002872 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272a:	4b97      	ldr	r3, [pc, #604]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10d      	bne.n	8002752 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	4b94      	ldr	r3, [pc, #592]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	4a93      	ldr	r2, [pc, #588]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002740:	61d3      	str	r3, [r2, #28]
 8002742:	4b91      	ldr	r3, [pc, #580]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274e:	2301      	movs	r3, #1
 8002750:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	4b8e      	ldr	r3, [pc, #568]	; (800298c <HAL_RCC_OscConfig+0x4f8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d118      	bne.n	8002790 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275e:	4b8b      	ldr	r3, [pc, #556]	; (800298c <HAL_RCC_OscConfig+0x4f8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a8a      	ldr	r2, [pc, #552]	; (800298c <HAL_RCC_OscConfig+0x4f8>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276a:	f7fe fcd1 	bl	8001110 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002772:	f7fe fccd 	bl	8001110 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b64      	cmp	r3, #100	; 0x64
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0fd      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	4b81      	ldr	r3, [pc, #516]	; (800298c <HAL_RCC_OscConfig+0x4f8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x312>
 8002798:	4b7b      	ldr	r3, [pc, #492]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4a7a      	ldr	r2, [pc, #488]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6213      	str	r3, [r2, #32]
 80027a4:	e02d      	b.n	8002802 <HAL_RCC_OscConfig+0x36e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x334>
 80027ae:	4b76      	ldr	r3, [pc, #472]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	4a75      	ldr	r2, [pc, #468]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	6213      	str	r3, [r2, #32]
 80027ba:	4b73      	ldr	r3, [pc, #460]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4a72      	ldr	r2, [pc, #456]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	6213      	str	r3, [r2, #32]
 80027c6:	e01c      	b.n	8002802 <HAL_RCC_OscConfig+0x36e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	d10c      	bne.n	80027ea <HAL_RCC_OscConfig+0x356>
 80027d0:	4b6d      	ldr	r3, [pc, #436]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	4a6c      	ldr	r2, [pc, #432]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	6213      	str	r3, [r2, #32]
 80027dc:	4b6a      	ldr	r3, [pc, #424]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4a69      	ldr	r2, [pc, #420]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6213      	str	r3, [r2, #32]
 80027e8:	e00b      	b.n	8002802 <HAL_RCC_OscConfig+0x36e>
 80027ea:	4b67      	ldr	r3, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4a66      	ldr	r2, [pc, #408]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	6213      	str	r3, [r2, #32]
 80027f6:	4b64      	ldr	r3, [pc, #400]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4a63      	ldr	r2, [pc, #396]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	f023 0304 	bic.w	r3, r3, #4
 8002800:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d015      	beq.n	8002836 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280a:	f7fe fc81 	bl	8001110 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fe fc7d 	bl	8001110 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e0ab      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002828:	4b57      	ldr	r3, [pc, #348]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ee      	beq.n	8002812 <HAL_RCC_OscConfig+0x37e>
 8002834:	e014      	b.n	8002860 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002836:	f7fe fc6b 	bl	8001110 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f7fe fc67 	bl	8001110 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	; 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e095      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002854:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ee      	bne.n	800283e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d105      	bne.n	8002872 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002866:	4b48      	ldr	r3, [pc, #288]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4a47      	ldr	r2, [pc, #284]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 800286c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002870:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8081 	beq.w	800297e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800287c:	4b42      	ldr	r3, [pc, #264]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b08      	cmp	r3, #8
 8002886:	d061      	beq.n	800294c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d146      	bne.n	800291e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_RCC_OscConfig+0x4fc>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002896:	f7fe fc3b 	bl	8001110 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fc37 	bl	8001110 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e067      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b0:	4b35      	ldr	r3, [pc, #212]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f0      	bne.n	800289e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c4:	d108      	bne.n	80028d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028c6:	4b30      	ldr	r3, [pc, #192]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	492d      	ldr	r1, [pc, #180]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d8:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a19      	ldr	r1, [r3, #32]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	430b      	orrs	r3, r1
 80028ea:	4927      	ldr	r1, [pc, #156]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f0:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_RCC_OscConfig+0x4fc>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7fe fc0b 	bl	8001110 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fe fc07 	bl	8001110 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e037      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x46a>
 800291c:	e02f      	b.n	800297e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_RCC_OscConfig+0x4fc>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe fbf4 	bl	8001110 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fbf0 	bl	8001110 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e020      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x498>
 800294a:	e018      	b.n	800297e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e013      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_OscConfig+0x4f4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	429a      	cmp	r2, r3
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	40007000 	.word	0x40007000
 8002990:	42420060 	.word	0x42420060

08002994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0d0      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b6a      	ldr	r3, [pc, #424]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d910      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 0207 	bic.w	r2, r3, #7
 80029be:	4965      	ldr	r1, [pc, #404]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b63      	ldr	r3, [pc, #396]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0b8      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f0:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a08:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a14:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	494d      	ldr	r1, [pc, #308]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d040      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d115      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e07f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b41      	ldr	r3, [pc, #260]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e073      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e06b      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4936      	ldr	r1, [pc, #216]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a84:	f7fe fb44 	bl	8001110 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7fe fb40 	bl	8001110 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e053      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d210      	bcs.n	8002ae4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 0207 	bic.w	r2, r3, #7
 8002aca:	4922      	ldr	r1, [pc, #136]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e032      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4916      	ldr	r1, [pc, #88]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	490e      	ldr	r1, [pc, #56]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b22:	f000 f821 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 8002b26:	4602      	mov	r2, r0
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	490a      	ldr	r1, [pc, #40]	; (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	5ccb      	ldrb	r3, [r1, r3]
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1cc>)
 8002b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_RCC_ClockConfig+0x1d0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe faa2 	bl	800108c <HAL_InitTick>

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40022000 	.word	0x40022000
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	080038c0 	.word	0x080038c0
 8002b60:	20000018 	.word	0x20000018
 8002b64:	2000001c 	.word	0x2000001c

08002b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b68:	b490      	push	{r4, r7}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b70:	1d3c      	adds	r4, r7, #4
 8002b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b78:	f240 2301 	movw	r3, #513	; 0x201
 8002b7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	2300      	movs	r3, #0
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b92:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d002      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0x46>
 8002ba6:	e02d      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002baa:	623b      	str	r3, [r7, #32]
      break;
 8002bac:	e02d      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	0c9b      	lsrs	r3, r3, #18
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bba:	4413      	add	r3, r2
 8002bbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bc0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	0c5b      	lsrs	r3, r3, #17
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bda:	4413      	add	r3, r2
 8002bdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002be0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be6:	fb02 f203 	mul.w	r2, r2, r3
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf2:	e004      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	623b      	str	r3, [r7, #32]
      break;
 8002c02:	e002      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c06:	623b      	str	r3, [r7, #32]
      break;
 8002c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3728      	adds	r7, #40	; 0x28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc90      	pop	{r4, r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	080038a0 	.word	0x080038a0
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	007a1200 	.word	0x007a1200
 8002c24:	003d0900 	.word	0x003d0900

08002c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c2c:	4b02      	ldr	r3, [pc, #8]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	20000018 	.word	0x20000018

08002c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c40:	f7ff fff2 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	0adb      	lsrs	r3, r3, #11
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	080038d0 	.word	0x080038d0

08002c64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <RCC_Delay+0x34>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <RCC_Delay+0x38>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0a5b      	lsrs	r3, r3, #9
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c80:	bf00      	nop
  }
  while (Delay --);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e5a      	subs	r2, r3, #1
 8002c86:	60fa      	str	r2, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f9      	bne.n	8002c80 <RCC_Delay+0x1c>
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	20000018 	.word	0x20000018
 8002c9c:	10624dd3 	.word	0x10624dd3

08002ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d07d      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc0:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10d      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ccc:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	4a4b      	ldr	r2, [pc, #300]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	61d3      	str	r3, [r2, #28]
 8002cd8:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	4b46      	ldr	r3, [pc, #280]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d118      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf4:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a42      	ldr	r2, [pc, #264]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d00:	f7fe fa06 	bl	8001110 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d06:	e008      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d08:	f7fe fa02 	bl	8001110 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e06d      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b3a      	ldr	r3, [pc, #232]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d26:	4b36      	ldr	r3, [pc, #216]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d02e      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d027      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d44:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d4e:	4b2e      	ldr	r3, [pc, #184]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d54:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d5a:	4a29      	ldr	r2, [pc, #164]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d014      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7fe f9d1 	bl	8001110 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fe f9cd 	bl	8001110 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e036      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0ee      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4917      	ldr	r1, [pc, #92]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d105      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	490b      	ldr	r1, [pc, #44]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	4904      	ldr	r1, [pc, #16]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40007000 	.word	0x40007000
 8002e08:	42420440 	.word	0x42420440

08002e0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b08d      	sub	sp, #52	; 0x34
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e14:	4b5a      	ldr	r3, [pc, #360]	; (8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002e16:	f107 040c 	add.w	r4, r7, #12
 8002e1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e20:	f240 2301 	movw	r3, #513	; 0x201
 8002e24:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2e:	2300      	movs	r3, #0
 8002e30:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	2300      	movs	r3, #0
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	f200 8091 	bhi.w	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d04c      	beq.n	8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d07c      	beq.n	8002f4e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e54:	e089      	b.n	8002f6a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002e56:	4b4b      	ldr	r3, [pc, #300]	; (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e5c:	4b49      	ldr	r3, [pc, #292]	; (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8082 	beq.w	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	0c9b      	lsrs	r3, r3, #18
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e76:	4413      	add	r3, r2
 8002e78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e7c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d018      	beq.n	8002eba <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e88:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	0c5b      	lsrs	r3, r3, #17
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002e96:	4413      	add	r3, r2
 8002e98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ea8:	4a37      	ldr	r2, [pc, #220]	; (8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb8:	e004      	b.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	4a33      	ldr	r2, [pc, #204]	; (8002f8c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002ebe:	fb02 f303 	mul.w	r3, r2, r3
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed0:	d102      	bne.n	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ed6:	e04a      	b.n	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ee6:	e042      	b.n	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002ee8:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef8:	d108      	bne.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f0a:	e01f      	b.n	8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f16:	d109      	bne.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002f24:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f36:	d11c      	bne.n	8002f72 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002f38:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d016      	beq.n	8002f72 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002f44:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f4a:	e012      	b.n	8002f72 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002f4c:	e011      	b.n	8002f72 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f4e:	f7ff fe75 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 8002f52:	4602      	mov	r2, r0
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	0b9b      	lsrs	r3, r3, #14
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f68:	e004      	b.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e002      	b.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e000      	b.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002f72:	bf00      	nop
    }
  }
  return (frequency);
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3734      	adds	r7, #52	; 0x34
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd90      	pop	{r4, r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	080038b0 	.word	0x080038b0
 8002f84:	40021000 	.word	0x40021000
 8002f88:	007a1200 	.word	0x007a1200
 8002f8c:	003d0900 	.word	0x003d0900
 8002f90:	aaaaaaab 	.word	0xaaaaaaab

08002f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e041      	b.n	800302a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fd fe2a 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f000 fac4 	bl	8003560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d001      	beq.n	800304c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e032      	b.n	80030b2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a18      	ldr	r2, [pc, #96]	; (80030bc <HAL_TIM_Base_Start+0x88>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_TIM_Base_Start+0x48>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d009      	beq.n	800307c <HAL_TIM_Base_Start+0x48>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <HAL_TIM_Base_Start+0x8c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_TIM_Base_Start+0x48>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <HAL_TIM_Base_Start+0x90>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d111      	bne.n	80030a0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d010      	beq.n	80030b0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309e:	e007      	b.n	80030b0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800

080030c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d001      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e03a      	b.n	8003156 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a18      	ldr	r2, [pc, #96]	; (8003160 <HAL_TIM_Base_Start_IT+0x98>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00e      	beq.n	8003120 <HAL_TIM_Base_Start_IT+0x58>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310a:	d009      	beq.n	8003120 <HAL_TIM_Base_Start_IT+0x58>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <HAL_TIM_Base_Start_IT+0x9c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d004      	beq.n	8003120 <HAL_TIM_Base_Start_IT+0x58>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a13      	ldr	r2, [pc, #76]	; (8003168 <HAL_TIM_Base_Start_IT+0xa0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d111      	bne.n	8003144 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b06      	cmp	r3, #6
 8003130:	d010      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0201 	orr.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003142:	e007      	b.n	8003154 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800

0800316c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0202 	mvn.w	r2, #2
 8003198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f9ba 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f9ad 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f9bc 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d122      	bne.n	800321c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d11b      	bne.n	800321c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0204 	mvn.w	r2, #4
 80031ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f990 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f983 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f992 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b08      	cmp	r3, #8
 8003228:	d122      	bne.n	8003270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d11b      	bne.n	8003270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0208 	mvn.w	r2, #8
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2204      	movs	r2, #4
 8003246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f966 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f959 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f968 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b10      	cmp	r3, #16
 800327c:	d122      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b10      	cmp	r3, #16
 800328a:	d11b      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0210 	mvn.w	r2, #16
 8003294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2208      	movs	r2, #8
 800329a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f93c 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 80032b0:	e005      	b.n	80032be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f92f 	bl	8003516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f93e 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d10e      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d107      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0201 	mvn.w	r2, #1
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f90a 	bl	8003504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d10e      	bne.n	800331c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b80      	cmp	r3, #128	; 0x80
 800330a:	d107      	bne.n	800331c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fa81 	bl	800381e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d10e      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d107      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f902 	bl	800354c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b20      	cmp	r3, #32
 8003354:	d10e      	bne.n	8003374 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b20      	cmp	r3, #32
 8003362:	d107      	bne.n	8003374 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0220 	mvn.w	r2, #32
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fa4c 	bl	800380c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_TIM_ConfigClockSource+0x18>
 8003390:	2302      	movs	r3, #2
 8003392:	e0b3      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x180>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033cc:	d03e      	beq.n	800344c <HAL_TIM_ConfigClockSource+0xd0>
 80033ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d2:	f200 8087 	bhi.w	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 80033d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033da:	f000 8085 	beq.w	80034e8 <HAL_TIM_ConfigClockSource+0x16c>
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	d87f      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 80033e4:	2b70      	cmp	r3, #112	; 0x70
 80033e6:	d01a      	beq.n	800341e <HAL_TIM_ConfigClockSource+0xa2>
 80033e8:	2b70      	cmp	r3, #112	; 0x70
 80033ea:	d87b      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 80033ec:	2b60      	cmp	r3, #96	; 0x60
 80033ee:	d050      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x116>
 80033f0:	2b60      	cmp	r3, #96	; 0x60
 80033f2:	d877      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 80033f4:	2b50      	cmp	r3, #80	; 0x50
 80033f6:	d03c      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0xf6>
 80033f8:	2b50      	cmp	r3, #80	; 0x50
 80033fa:	d873      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d058      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0x136>
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d86f      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 8003404:	2b30      	cmp	r3, #48	; 0x30
 8003406:	d064      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x156>
 8003408:	2b30      	cmp	r3, #48	; 0x30
 800340a:	d86b      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 800340c:	2b20      	cmp	r3, #32
 800340e:	d060      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x156>
 8003410:	2b20      	cmp	r3, #32
 8003412:	d867      	bhi.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d05c      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x156>
 8003418:	2b10      	cmp	r3, #16
 800341a:	d05a      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800341c:	e062      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6899      	ldr	r1, [r3, #8]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f000 f970 	bl	8003712 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003440:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	609a      	str	r2, [r3, #8]
      break;
 800344a:	e04e      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6899      	ldr	r1, [r3, #8]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f000 f959 	bl	8003712 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800346e:	609a      	str	r2, [r3, #8]
      break;
 8003470:	e03b      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	461a      	mov	r2, r3
 8003480:	f000 f8d0 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2150      	movs	r1, #80	; 0x50
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f927 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 8003490:	e02b      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	461a      	mov	r2, r3
 80034a0:	f000 f8ee 	bl	8003680 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2160      	movs	r1, #96	; 0x60
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f917 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 80034b0:	e01b      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	461a      	mov	r2, r3
 80034c0:	f000 f8b0 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2140      	movs	r1, #64	; 0x40
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f907 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 80034d0:	e00b      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4619      	mov	r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	f000 f8fe 	bl	80036de <TIM_ITRx_SetConfig>
        break;
 80034e2:	e002      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034e4:	bf00      	nop
 80034e6:	e000      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
	...

08003560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a29      	ldr	r2, [pc, #164]	; (8003618 <TIM_Base_SetConfig+0xb8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00b      	beq.n	8003590 <TIM_Base_SetConfig+0x30>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357e:	d007      	beq.n	8003590 <TIM_Base_SetConfig+0x30>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a26      	ldr	r2, [pc, #152]	; (800361c <TIM_Base_SetConfig+0xbc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_Base_SetConfig+0x30>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a25      	ldr	r2, [pc, #148]	; (8003620 <TIM_Base_SetConfig+0xc0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d108      	bne.n	80035a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <TIM_Base_SetConfig+0xb8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00b      	beq.n	80035c2 <TIM_Base_SetConfig+0x62>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b0:	d007      	beq.n	80035c2 <TIM_Base_SetConfig+0x62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a19      	ldr	r2, [pc, #100]	; (800361c <TIM_Base_SetConfig+0xbc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <TIM_Base_SetConfig+0x62>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <TIM_Base_SetConfig+0xc0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d108      	bne.n	80035d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a07      	ldr	r2, [pc, #28]	; (8003618 <TIM_Base_SetConfig+0xb8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d103      	bne.n	8003608 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	615a      	str	r2, [r3, #20]
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800

08003624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 030a 	bic.w	r3, r3, #10
 8003660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f023 0210 	bic.w	r2, r3, #16
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	031b      	lsls	r3, r3, #12
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	621a      	str	r2, [r3, #32]
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f043 0307 	orr.w	r3, r3, #7
 8003700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003712:	b480      	push	{r7}
 8003714:	b087      	sub	sp, #28
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800372c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	021a      	lsls	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	431a      	orrs	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4313      	orrs	r3, r2
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	609a      	str	r2, [r3, #8]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003764:	2302      	movs	r3, #2
 8003766:	e046      	b.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a16      	ldr	r2, [pc, #88]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00e      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b4:	d009      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d004      	beq.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a10      	ldr	r2, [pc, #64]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10c      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	40012c00 	.word	0x40012c00
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800

0800380c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <__libc_init_array>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	2600      	movs	r6, #0
 8003834:	4d0c      	ldr	r5, [pc, #48]	; (8003868 <__libc_init_array+0x38>)
 8003836:	4c0d      	ldr	r4, [pc, #52]	; (800386c <__libc_init_array+0x3c>)
 8003838:	1b64      	subs	r4, r4, r5
 800383a:	10a4      	asrs	r4, r4, #2
 800383c:	42a6      	cmp	r6, r4
 800383e:	d109      	bne.n	8003854 <__libc_init_array+0x24>
 8003840:	f000 f822 	bl	8003888 <_init>
 8003844:	2600      	movs	r6, #0
 8003846:	4d0a      	ldr	r5, [pc, #40]	; (8003870 <__libc_init_array+0x40>)
 8003848:	4c0a      	ldr	r4, [pc, #40]	; (8003874 <__libc_init_array+0x44>)
 800384a:	1b64      	subs	r4, r4, r5
 800384c:	10a4      	asrs	r4, r4, #2
 800384e:	42a6      	cmp	r6, r4
 8003850:	d105      	bne.n	800385e <__libc_init_array+0x2e>
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	f855 3b04 	ldr.w	r3, [r5], #4
 8003858:	4798      	blx	r3
 800385a:	3601      	adds	r6, #1
 800385c:	e7ee      	b.n	800383c <__libc_init_array+0xc>
 800385e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003862:	4798      	blx	r3
 8003864:	3601      	adds	r6, #1
 8003866:	e7f2      	b.n	800384e <__libc_init_array+0x1e>
 8003868:	080038d8 	.word	0x080038d8
 800386c:	080038d8 	.word	0x080038d8
 8003870:	080038d8 	.word	0x080038d8
 8003874:	080038dc 	.word	0x080038dc

08003878 <memset>:
 8003878:	4603      	mov	r3, r0
 800387a:	4402      	add	r2, r0
 800387c:	4293      	cmp	r3, r2
 800387e:	d100      	bne.n	8003882 <memset+0xa>
 8003880:	4770      	bx	lr
 8003882:	f803 1b01 	strb.w	r1, [r3], #1
 8003886:	e7f9      	b.n	800387c <memset+0x4>

08003888 <_init>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	bf00      	nop
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr

08003894 <_fini>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	bf00      	nop
 8003898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389a:	bc08      	pop	{r3}
 800389c:	469e      	mov	lr, r3
 800389e:	4770      	bx	lr
