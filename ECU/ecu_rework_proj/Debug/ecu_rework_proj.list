
ecu_rework_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f0  080037f0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080037f0  080037f0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f0  080037f0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080037f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000024  0800381c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  0800381c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d898  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218c  00000000  00000000  0002d8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0002fa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00030798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017893  00000000  00000000  000313b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000daa6  00000000  00000000  00048c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a05d  00000000  00000000  000566e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b0  00000000  00000000  000e079c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080037a0 	.word	0x080037a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080037a0 	.word	0x080037a0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 ff38 	bl	8000fc4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81a 	bl	800018c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f982 	bl	8000460 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f872 	bl	8000244 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000160:	f000 f930 	bl	80003c4 <MX_TIM3_Init>
  MX_CAN_Init();
 8000164:	f000 f8ac 	bl	80002c0 <MX_CAN_Init>
  MX_TIM2_Init();
 8000168:	f000 f8e0 	bl	800032c <MX_TIM2_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800016c:	b672      	cpsid	i
}
 800016e:	bf00      	nop
  /* USER CODE BEGIN 2 */
  __disable_irq();
  SM_Init();
 8000170:	f000 fbba 	bl	80008e8 <SM_Init>
  SUPP_InitAndStart();
 8000174:	f000 f9f0 	bl	8000558 <SUPP_InitAndStart>
  HAL_CAN_Start(&hcan);
 8000178:	4803      	ldr	r0, [pc, #12]	; (8000188 <main+0x3c>)
 800017a:	f001 fd5d 	bl	8001c38 <HAL_CAN_Start>
  __ASM volatile ("cpsie i" : : : "memory");
 800017e:	b662      	cpsie	i
}
 8000180:	bf00      	nop

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	  SM_Update();
 8000182:	f000 fbf5 	bl	8000970 <SM_Update>
 8000186:	e7fc      	b.n	8000182 <main+0x36>
 8000188:	2000009c 	.word	0x2000009c

0800018c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b094      	sub	sp, #80	; 0x50
 8000190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000196:	2228      	movs	r2, #40	; 0x28
 8000198:	2100      	movs	r1, #0
 800019a:	4618      	mov	r0, r3
 800019c:	f003 faf8 	bl	8003790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a0:	f107 0314 	add.w	r3, r7, #20
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
 80001a8:	605a      	str	r2, [r3, #4]
 80001aa:	609a      	str	r2, [r3, #8]
 80001ac:	60da      	str	r2, [r3, #12]
 80001ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001bc:	2301      	movs	r3, #1
 80001be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ce:	2302      	movs	r3, #2
 80001d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 f8fe 	bl	80023e4 <HAL_RCC_OscConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001ee:	f000 f9d3 	bl	8000598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f2:	230f      	movs	r3, #15
 80001f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000202:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2102      	movs	r1, #2
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fb68 	bl	80028e4 <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800021a:	f000 f9bd 	bl	8000598 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800021e:	2302      	movs	r3, #2
 8000220:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000226:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fce0 	bl	8002bf0 <HAL_RCCEx_PeriphCLKConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000236:	f000 f9af 	bl	8000598 <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3750      	adds	r7, #80	; 0x50
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <MX_ADC1_Init+0x78>)
 8000258:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <MX_ADC1_Init+0x74>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000268:	2200      	movs	r2, #0
 800026a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <MX_ADC1_Init+0x74>)
 800026e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000276:	2200      	movs	r2, #0
 8000278:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <MX_ADC1_Init+0x74>)
 800027c:	2201      	movs	r2, #1
 800027e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <MX_ADC1_Init+0x74>)
 8000282:	f000 ff25 	bl	80010d0 <HAL_ADC_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800028c:	f000 f984 	bl	8000598 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000290:	2309      	movs	r3, #9
 8000292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000294:	2301      	movs	r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000298:	2307      	movs	r3, #7
 800029a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_ADC1_Init+0x74>)
 80002a2:	f001 f985 	bl	80015b0 <HAL_ADC_ConfigChannel>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002ac:	f000 f974 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	2000010c 	.word	0x2000010c
 80002bc:	40012400 	.word	0x40012400

080002c0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <MX_CAN_Init+0x64>)
 80002c6:	4a18      	ldr	r2, [pc, #96]	; (8000328 <MX_CAN_Init+0x68>)
 80002c8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <MX_CAN_Init+0x64>)
 80002cc:	2212      	movs	r2, #18
 80002ce:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <MX_CAN_Init+0x64>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <MX_CAN_Init+0x64>)
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_CAN_Init+0x64>)
 80002de:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80002e2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_CAN_Init+0x64>)
 80002e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002ea:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <MX_CAN_Init+0x64>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_CAN_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MX_CAN_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_CAN_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <MX_CAN_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_CAN_Init+0x64>)
 800030c:	2200      	movs	r2, #0
 800030e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <MX_CAN_Init+0x64>)
 8000312:	f001 fb96 	bl	8001a42 <HAL_CAN_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800031c:	f000 f93c 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000009c 	.word	0x2000009c
 8000328:	40006400 	.word	0x40006400

0800032c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000340:	463b      	mov	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000348:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <MX_TIM2_Init+0x94>)
 800034a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000352:	2247      	movs	r2, #71	; 0x47
 8000354:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000356:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_TIM2_Init+0x94>)
 800035e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000362:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800036a:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_TIM2_Init+0x94>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000370:	4813      	ldr	r0, [pc, #76]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000372:	f002 fdb7 	bl	8002ee4 <HAL_TIM_Base_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800037c:	f000 f90c 	bl	8000598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000384:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	4619      	mov	r1, r3
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <MX_TIM2_Init+0x94>)
 800038e:	f002 ff91 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000398:	f000 f8fe 	bl	8000598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800039c:	2320      	movs	r3, #32
 800039e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a4:	463b      	mov	r3, r7
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_TIM2_Init+0x94>)
 80003aa:	f003 f963 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003b4:	f000 f8f0 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3718      	adds	r7, #24
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000013c 	.word	0x2000013c

080003c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	f107 0308 	add.w	r3, r7, #8
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	463b      	mov	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_TIM3_Init+0x94>)
 80003e2:	4a1e      	ldr	r2, [pc, #120]	; (800045c <MX_TIM3_Init+0x98>)
 80003e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_TIM3_Init+0x94>)
 80003e8:	2247      	movs	r2, #71	; 0x47
 80003ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_TIM3_Init+0x94>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_TIM3_Init+0x94>)
 80003f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80003f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_TIM3_Init+0x94>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_TIM3_Init+0x94>)
 8000402:	2200      	movs	r2, #0
 8000404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000406:	4814      	ldr	r0, [pc, #80]	; (8000458 <MX_TIM3_Init+0x94>)
 8000408:	f002 fd6c 	bl	8002ee4 <HAL_TIM_Base_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000412:	f000 f8c1 	bl	8000598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800041c:	f107 0308 	add.w	r3, r7, #8
 8000420:	4619      	mov	r1, r3
 8000422:	480d      	ldr	r0, [pc, #52]	; (8000458 <MX_TIM3_Init+0x94>)
 8000424:	f002 ff46 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800042e:	f000 f8b3 	bl	8000598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000432:	2320      	movs	r3, #32
 8000434:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800043a:	463b      	mov	r3, r7
 800043c:	4619      	mov	r1, r3
 800043e:	4806      	ldr	r0, [pc, #24]	; (8000458 <MX_TIM3_Init+0x94>)
 8000440:	f003 f918 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800044a:	f000 f8a5 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000c4 	.word	0x200000c4
 800045c:	40000400 	.word	0x40000400

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000474:	4b35      	ldr	r3, [pc, #212]	; (800054c <MX_GPIO_Init+0xec>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a34      	ldr	r2, [pc, #208]	; (800054c <MX_GPIO_Init+0xec>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b32      	ldr	r3, [pc, #200]	; (800054c <MX_GPIO_Init+0xec>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b2f      	ldr	r3, [pc, #188]	; (800054c <MX_GPIO_Init+0xec>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a2e      	ldr	r2, [pc, #184]	; (800054c <MX_GPIO_Init+0xec>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b2c      	ldr	r3, [pc, #176]	; (800054c <MX_GPIO_Init+0xec>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a4:	4b29      	ldr	r3, [pc, #164]	; (800054c <MX_GPIO_Init+0xec>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a28      	ldr	r2, [pc, #160]	; (800054c <MX_GPIO_Init+0xec>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b26      	ldr	r3, [pc, #152]	; (800054c <MX_GPIO_Init+0xec>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0308 	and.w	r3, r3, #8
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_LOCK_OUT_Pin|FAN_OUT1_Pin|HLIM_OUT_Pin|PC_OUT_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80004c2:	4823      	ldr	r0, [pc, #140]	; (8000550 <MX_GPIO_Init+0xf0>)
 80004c4:	f001 ff75 	bl	80023b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_OUT2_Pin|FLT_OUT_Pin|LLIM_OUT_Pin|NEG_OUT_Pin
 80004c8:	2200      	movs	r2, #0
 80004ca:	f247 31c0 	movw	r1, #29632	; 0x73c0
 80004ce:	4821      	ldr	r0, [pc, #132]	; (8000554 <MX_GPIO_Init+0xf4>)
 80004d0:	f001 ff6f 	bl	80023b2 <HAL_GPIO_WritePin>
                          |DCDC_OUT_Pin|SWAP_OUT_Pin|SUPP_LOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_LOCK_OUT_Pin FAN_OUT1_Pin HLIM_OUT_Pin PC_OUT_Pin */
  GPIO_InitStruct.Pin = SW_LOCK_OUT_Pin|FAN_OUT1_Pin|HLIM_OUT_Pin|PC_OUT_Pin;
 80004d4:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80004d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	2301      	movs	r3, #1
 80004dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e2:	2303      	movs	r3, #3
 80004e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	4818      	ldr	r0, [pc, #96]	; (8000550 <MX_GPIO_Init+0xf0>)
 80004ee:	f001 fdcf 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : HLIM_IN_Pin LLIM_IN_Pin FLT_IN_Pin */
  GPIO_InitStruct.Pin = HLIM_IN_Pin|LLIM_IN_Pin|FLT_IN_Pin;
 80004f2:	23e0      	movs	r3, #224	; 0xe0
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	4812      	ldr	r0, [pc, #72]	; (8000550 <MX_GPIO_Init+0xf0>)
 8000506:	f001 fdc3 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_OUT2_Pin FLT_OUT_Pin LLIM_OUT_Pin NEG_OUT_Pin
                           DCDC_OUT_Pin SWAP_OUT_Pin SUPP_LOW_Pin */
  GPIO_InitStruct.Pin = FAN_OUT2_Pin|FLT_OUT_Pin|LLIM_OUT_Pin|NEG_OUT_Pin
 800050a:	f247 33c0 	movw	r3, #29632	; 0x73c0
 800050e:	613b      	str	r3, [r7, #16]
                          |DCDC_OUT_Pin|SWAP_OUT_Pin|SUPP_LOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000518:	2303      	movs	r3, #3
 800051a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <MX_GPIO_Init+0xf4>)
 8000524:	f001 fdb4 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESTOP_IN_Pin */
  GPIO_InitStruct.Pin = ESTOP_IN_Pin;
 8000528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ESTOP_IN_GPIO_Port, &GPIO_InitStruct);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_GPIO_Init+0xf4>)
 800053e:	f001 fda7 	bl	8002090 <HAL_GPIO_Init>

}
 8000542:	bf00      	nop
 8000544:	3720      	adds	r7, #32
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	40010800 	.word	0x40010800
 8000554:	40010c00 	.word	0x40010c00

08000558 <SUPP_InitAndStart>:

/* USER CODE BEGIN 4 */
static void SUPP_InitAndStart(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	if (HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1))
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <SUPP_InitAndStart+0x38>)
 800055e:	f001 f9bb 	bl	80018d8 <HAL_ADCEx_Calibration_Start>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SUPP_InitAndStart+0x14>
	{
		Error_Handler();
 8000568:	f000 f816 	bl	8000598 <Error_Handler>
	}

	if (HAL_OK != HAL_ADC_Start_IT(&hadc1))
 800056c:	4808      	ldr	r0, [pc, #32]	; (8000590 <SUPP_InitAndStart+0x38>)
 800056e:	f000 fe87 	bl	8001280 <HAL_ADC_Start_IT>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SUPP_InitAndStart+0x24>
	{
		Error_Handler();
 8000578:	f000 f80e 	bl	8000598 <Error_Handler>
	}

	if (HAL_OK != HAL_TIM_Base_Start(&htim3))
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <SUPP_InitAndStart+0x3c>)
 800057e:	f002 fd01 	bl	8002f84 <HAL_TIM_Base_Start>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SUPP_InitAndStart+0x34>
	{
		Error_Handler();
 8000588:	f000 f806 	bl	8000598 <Error_Handler>
	}

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000010c 	.word	0x2000010c
 8000594:	200000c4 	.word	0x200000c4

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <sm_State1Handler>:
//
// state1 handler function: sets fault and low power supply indication
//

static void sm_State1Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <sm_State1Handler+0x28>)
 80005b0:	f001 feff 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SUPP_LOW_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <sm_State1Handler+0x28>)
 80005bc:	f001 fef9 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 80005c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c4:	f000 fd60 	bl	8001088 <HAL_Delay>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <sm_State2Handler>:

//
// state2 handler function: start precharge and close negative terminal
//
static void sm_State2Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005da:	4807      	ldr	r0, [pc, #28]	; (80005f8 <sm_State2Handler+0x28>)
 80005dc:	f001 fee9 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NEG_OUT_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <sm_State2Handler+0x2c>)
 80005e6:	f001 fee4 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fd4b 	bl	8001088 <HAL_Delay>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40010800 	.word	0x40010800
 80005fc:	40010c00 	.word	0x40010c00

08000600 <sm_State3Handler>:

//
// state3 handler function: close dcdc and wait till it stablizes
//
static void sm_State3Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, DCDC_OUT_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <sm_State3Handler+0x1c>)
 800060a:	f001 fed2 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 800060e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000612:	f000 fd39 	bl	8001088 <HAL_Delay>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40010c00 	.word	0x40010c00

08000620 <sm_State4Handler>:

//
// state4 handler function: swap power source from aux battery to dcdc
//
static void sm_State4Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SWAP_OUT_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <sm_State4Handler+0x1c>)
 800062c:	f001 fec1 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 8000630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000634:	f000 fd28 	bl	8001088 <HAL_Delay>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40010c00 	.word	0x40010c00

08000640 <sm_State5Handler>:

//
// state5 handler function: close FAN power mosfet
//
static void sm_State5Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, FAN_OUT1_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2108      	movs	r1, #8
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <sm_State5Handler+0x28>)
 800064a:	f001 feb2 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, FAN_OUT2_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <sm_State5Handler+0x2c>)
 8000656:	f001 feac 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 800065a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065e:	f000 fd13 	bl	8001088 <HAL_Delay>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40010800 	.word	0x40010800
 800066c:	40010c00 	.word	0x40010c00

08000670 <sm_State6Handler>:

//
// state6 handler function: close llim to activate motor
//
static void sm_State6Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <sm_State6Handler+0x1c>)
 800067c:	f001 fe99 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 8000680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000684:	f000 fd00 	bl	8001088 <HAL_Delay>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40010c00 	.word	0x40010c00

08000690 <sm_State7Handler>:

//
// state7 handler function: end precharge sequence
//
static void sm_State7Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <sm_State7Handler+0x34>)
 800069c:	f001 fe89 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <sm_State7Handler+0x38>)
 80006a8:	f001 fe83 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SUPP_LOW_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <sm_State7Handler+0x38>)
 80006b4:	f001 fe7d 	bl	80023b2 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 80006b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006bc:	f000 fce4 	bl	8001088 <HAL_Delay>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40010800 	.word	0x40010800
 80006c8:	40010c00 	.word	0x40010c00

080006cc <sm_State8Handler>:

//
// state8 handler function: close hlim for mppt
//
static void sm_State8Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2110      	movs	r1, #16
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <sm_State8Handler+0x20>)
 80006d6:	f001 fe6c 	bl	80023b2 <HAL_GPIO_WritePin>
	//start timer to check for hlim and llim inputs
	HAL_TIM_Base_Start_IT(&htim2);
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <sm_State8Handler+0x24>)
 80006dc:	f002 fc96 	bl	800300c <HAL_TIM_Base_Start_IT>
	HAL_Delay(SM_STATE_DELAY_TIME);
 80006e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e4:	f000 fcd0 	bl	8001088 <HAL_Delay>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40010800 	.word	0x40010800
 80006f0:	2000013c 	.word	0x2000013c

080006f4 <sm_State9Handler>:

//
// state9 handler function: adc reading and can message handling
//
static void sm_State9Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	static uint16_t reading = 0u;
	static uint8_t aTxData[8] = {0u};
	static uint32_t txMailBox;

	//read ADC value and send via can
	reading = SUPP_GetAdcVal();
 80006f8:	f000 fc2c 	bl	8000f54 <SUPP_GetAdcVal>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <sm_State9Handler+0x38>)
 8000702:	801a      	strh	r2, [r3, #0]
	aTxData[0u] =  reading & SM_ADCVAL_LOWER_MASK;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <sm_State9Handler+0x38>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <sm_State9Handler+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
	aTxData[1u] =  (reading & SM_ADCVAL_UPPER_MASK) >> SM_ADCVAL_SHIFT_VAL;
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <sm_State9Handler+0x38>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	0a1b      	lsrs	r3, r3, #8
 8000714:	b29b      	uxth	r3, r3
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <sm_State9Handler+0x3c>)
 800071a:	705a      	strb	r2, [r3, #1]
	HAL_CAN_AddTxMessage(&hcan, &zTxHeader, aTxData, &txMailBox);
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <sm_State9Handler+0x40>)
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <sm_State9Handler+0x3c>)
 8000720:	4905      	ldr	r1, [pc, #20]	; (8000738 <sm_State9Handler+0x44>)
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <sm_State9Handler+0x48>)
 8000724:	f001 facc 	bl	8001cc0 <HAL_CAN_AddTxMessage>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000006e 	.word	0x2000006e
 8000730:	20000070 	.word	0x20000070
 8000734:	20000078 	.word	0x20000078
 8000738:	20000000 	.word	0x20000000
 800073c:	2000009c 	.word	0x2000009c

08000740 <sm_State10Handler>:

//
// State10: LLIM High Event handling
//
static void sm_State10Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	if (sm_IsStatusFlagged(SM_STATUS_LLIM_HIGH_FLAG))
 8000744:	2004      	movs	r0, #4
 8000746:	f000 f8bd 	bl	80008c4 <sm_IsStatusFlagged>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d026      	beq.n	800079e <sm_State10Handler+0x5e>
	{
		HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000756:	4813      	ldr	r0, [pc, #76]	; (80007a4 <sm_State10Handler+0x64>)
 8000758:	f001 fe2b 	bl	80023b2 <HAL_GPIO_WritePin>
		HAL_Delay(SM_PC_DELAY_TIME_1);
 800075c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000760:	f000 fc92 	bl	8001088 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076a:	480f      	ldr	r0, [pc, #60]	; (80007a8 <sm_State10Handler+0x68>)
 800076c:	f001 fe21 	bl	80023b2 <HAL_GPIO_WritePin>
		HAL_Delay(SM_PC_DELAY_TIME_1);
 8000770:	f241 1094 	movw	r0, #4500	; 0x1194
 8000774:	f000 fc88 	bl	8001088 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <sm_State10Handler+0x64>)
 8000780:	f001 fe17 	bl	80023b2 <HAL_GPIO_WritePin>
		HAL_Delay(SM_PC_DELAY_TIME_2);
 8000784:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000788:	f000 fc7e 	bl	8001088 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <sm_State10Handler+0x68>)
 8000794:	f001 fe0d 	bl	80023b2 <HAL_GPIO_WritePin>
		SM_ClearStatusFlag(SM_STATUS_LLIM_HIGH_FLAG);
 8000798:	2004      	movs	r0, #4
 800079a:	f000 f91f 	bl	80009dc <SM_ClearStatusFlag>
	}
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40010c00 	.word	0x40010c00
 80007a8:	40010800 	.word	0x40010800

080007ac <sm_State11Handler>:

//
// state10 handler function: open all terminals and indicate fault in a forever loop
//
static void sm_State11Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	if(sm_IsStatusFlagged(SM_STATUS_FLT_FLAG))
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f887 	bl	80008c4 <sm_IsStatusFlagged>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d037      	beq.n	800082c <sm_State11Handler+0x80>
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
	{
		__disable_irq();
		HAL_GPIO_WritePin(GPIOB, SWAP_OUT_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	481a      	ldr	r0, [pc, #104]	; (8000830 <sm_State11Handler+0x84>)
 80007c8:	f001 fdf3 	bl	80023b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2110      	movs	r1, #16
 80007d0:	4818      	ldr	r0, [pc, #96]	; (8000834 <sm_State11Handler+0x88>)
 80007d2:	f001 fdee 	bl	80023b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007dc:	4814      	ldr	r0, [pc, #80]	; (8000830 <sm_State11Handler+0x84>)
 80007de:	f001 fde8 	bl	80023b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e8:	4812      	ldr	r0, [pc, #72]	; (8000834 <sm_State11Handler+0x88>)
 80007ea:	f001 fde2 	bl	80023b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, NEG_OUT_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	480f      	ldr	r0, [pc, #60]	; (8000830 <sm_State11Handler+0x84>)
 80007f4:	f001 fddd 	bl	80023b2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, DCDC_OUT_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <sm_State11Handler+0x84>)
 80007fe:	f001 fdd8 	bl	80023b2 <HAL_GPIO_WritePin>

		//toggle fault indicator led
		for(;;)
		{
			HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <sm_State11Handler+0x84>)
 800080a:	f001 fdd2 	bl	80023b2 <HAL_GPIO_WritePin>
			HAL_Delay(SM_STATE_DELAY_TIME);
 800080e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000812:	f000 fc39 	bl	8001088 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <sm_State11Handler+0x84>)
 800081e:	f001 fdc8 	bl	80023b2 <HAL_GPIO_WritePin>
			HAL_Delay(SM_STATE_DELAY_TIME);
 8000822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000826:	f000 fc2f 	bl	8001088 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_SET);
 800082a:	e7ea      	b.n	8000802 <sm_State11Handler+0x56>
		}
	}
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40010c00 	.word	0x40010c00
 8000834:	40010800 	.word	0x40010800

08000838 <sm_FltCheck>:

//
// fault-checking function: goes into fault based on flt_in and estop_in signal
//
static void sm_FltCheck(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	static uint8_t faultCounter1 = 0u;
	static uint8_t faultCounter2 = 0u;
	GPIO_PinState st1 = HAL_GPIO_ReadPin(GPIOA, FLT_IN_Pin);
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	481c      	ldr	r0, [pc, #112]	; (80008b4 <sm_FltCheck+0x7c>)
 8000842:	f001 fd9f 	bl	8002384 <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState st2 =	HAL_GPIO_ReadPin(GPIOB, ESTOP_IN_Pin);
 800084a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084e:	481a      	ldr	r0, [pc, #104]	; (80008b8 <sm_FltCheck+0x80>)
 8000850:	f001 fd98 	bl	8002384 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	71bb      	strb	r3, [r7, #6]

	//something's wrong when estop_in or flt_in is pulled to gnd
	if (st1 == GPIO_PIN_RESET)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10e      	bne.n	800087c <sm_FltCheck+0x44>
	{
		//do some de-bouncing, give it three chances
		if(faultCounter1 >= SM_FLT_MAX_COUNTER_VAL)
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <sm_FltCheck+0x84>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d903      	bls.n	800086e <sm_FltCheck+0x36>
		{
			SM_SetStatusFlag(SM_STATUS_FLT_FLAG);
 8000866:	2001      	movs	r0, #1
 8000868:	f000 f8a4 	bl	80009b4 <SM_SetStatusFlag>
 800086c:	e009      	b.n	8000882 <sm_FltCheck+0x4a>
		}
		else
		{
			faultCounter1++;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <sm_FltCheck+0x84>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <sm_FltCheck+0x84>)
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	e002      	b.n	8000882 <sm_FltCheck+0x4a>
		}
	}
	else
	{
		faultCounter1 = 0u;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <sm_FltCheck+0x84>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	}

	if (st2 == GPIO_PIN_RESET)
 8000882:	79bb      	ldrb	r3, [r7, #6]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10e      	bne.n	80008a6 <sm_FltCheck+0x6e>
	{
		//do some de-bouncing, give it three chances
		if(faultCounter2 >= SM_FLT_MAX_COUNTER_VAL)
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <sm_FltCheck+0x88>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d903      	bls.n	8000898 <sm_FltCheck+0x60>
		{
			SM_SetStatusFlag(SM_STATUS_FLT_FLAG);
 8000890:	2001      	movs	r0, #1
 8000892:	f000 f88f 	bl	80009b4 <SM_SetStatusFlag>
	}
	else
	{
		faultCounter2 = 0u;
	}
}
 8000896:	e009      	b.n	80008ac <sm_FltCheck+0x74>
			faultCounter2++;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <sm_FltCheck+0x88>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <sm_FltCheck+0x88>)
 80008a2:	701a      	strb	r2, [r3, #0]
}
 80008a4:	e002      	b.n	80008ac <sm_FltCheck+0x74>
		faultCounter2 = 0u;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <sm_FltCheck+0x88>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40010800 	.word	0x40010800
 80008b8:	40010c00 	.word	0x40010c00
 80008bc:	2000007c 	.word	0x2000007c
 80008c0:	2000007d 	.word	0x2000007d

080008c4 <sm_IsStatusFlagged>:

//
// Checks whether a status (FLT, HLIM High, LLIM High) has been flagged
//
static uint8_t sm_IsStatusFlagged(uint8_t flag)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	return (flag & sm_statusFlags);
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <sm_IsStatusFlagged+0x20>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	4013      	ands	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	2000006d 	.word	0x2000006d

080008e8 <SM_Init>:

//
// Initialize state machine module
//
void SM_Init(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
	sm_stateVal = (uint8_t)SM_eState1;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <SM_Init+0x54>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
	sm_pfaStateHandler[SM_eState1] = &sm_State1Handler;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <SM_Init+0x58>)
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <SM_Init+0x5c>)
 80008f6:	601a      	str	r2, [r3, #0]
	sm_pfaStateHandler[SM_eState2] = &sm_State2Handler;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <SM_Init+0x58>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <SM_Init+0x60>)
 80008fc:	605a      	str	r2, [r3, #4]
	sm_pfaStateHandler[SM_eState3] = &sm_State3Handler;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <SM_Init+0x58>)
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <SM_Init+0x64>)
 8000902:	609a      	str	r2, [r3, #8]
	sm_pfaStateHandler[SM_eState4] = &sm_State4Handler;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <SM_Init+0x58>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <SM_Init+0x68>)
 8000908:	60da      	str	r2, [r3, #12]
	sm_pfaStateHandler[SM_eState5] = &sm_State5Handler;
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <SM_Init+0x58>)
 800090c:	4a11      	ldr	r2, [pc, #68]	; (8000954 <SM_Init+0x6c>)
 800090e:	611a      	str	r2, [r3, #16]
	sm_pfaStateHandler[SM_eState6] = &sm_State6Handler;
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <SM_Init+0x58>)
 8000912:	4a11      	ldr	r2, [pc, #68]	; (8000958 <SM_Init+0x70>)
 8000914:	615a      	str	r2, [r3, #20]
	sm_pfaStateHandler[SM_eState7] = &sm_State7Handler;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <SM_Init+0x58>)
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <SM_Init+0x74>)
 800091a:	619a      	str	r2, [r3, #24]
	sm_pfaStateHandler[SM_eState8] = &sm_State8Handler;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <SM_Init+0x58>)
 800091e:	4a10      	ldr	r2, [pc, #64]	; (8000960 <SM_Init+0x78>)
 8000920:	61da      	str	r2, [r3, #28]
	sm_pfaStateHandler[SM_eState9] = &sm_State9Handler;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <SM_Init+0x58>)
 8000924:	4a0f      	ldr	r2, [pc, #60]	; (8000964 <SM_Init+0x7c>)
 8000926:	621a      	str	r2, [r3, #32]
	sm_pfaStateHandler[SM_eState10] = &sm_State10Handler;
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SM_Init+0x58>)
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <SM_Init+0x80>)
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
	sm_pfaStateHandler[SM_eState11] = &sm_State11Handler;
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SM_Init+0x58>)
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <SM_Init+0x84>)
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	2000006c 	.word	0x2000006c
 8000940:	20000040 	.word	0x20000040
 8000944:	080005a5 	.word	0x080005a5
 8000948:	080005d1 	.word	0x080005d1
 800094c:	08000601 	.word	0x08000601
 8000950:	08000621 	.word	0x08000621
 8000954:	08000641 	.word	0x08000641
 8000958:	08000671 	.word	0x08000671
 800095c:	08000691 	.word	0x08000691
 8000960:	080006cd 	.word	0x080006cd
 8000964:	080006f5 	.word	0x080006f5
 8000968:	08000741 	.word	0x08000741
 800096c:	080007ad 	.word	0x080007ad

08000970 <SM_Update>:

//
// State machine update states
//
void SM_Update(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

	//calling from function pointer array
	(void)sm_pfaStateHandler[sm_stateVal]();
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <SM_Update+0x3c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <SM_Update+0x40>)
 800097e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000982:	4798      	blx	r3
	//fault checking
	sm_FltCheck();
 8000984:	f7ff ff58 	bl	8000838 <sm_FltCheck>
	sm_stateVal++;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <SM_Update+0x3c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	3301      	adds	r3, #1
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <SM_Update+0x3c>)
 8000994:	701a      	strb	r2, [r3, #0]

	//keep calling state handlers 9, 10, and 11
	if (SM_eStateMaxNum <= sm_stateVal)
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SM_Update+0x3c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b0a      	cmp	r3, #10
 800099e:	d902      	bls.n	80009a6 <SM_Update+0x36>
	{
		sm_stateVal = SM_eState9;
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <SM_Update+0x3c>)
 80009a2:	2208      	movs	r2, #8
 80009a4:	701a      	strb	r2, [r3, #0]
	}

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000006c 	.word	0x2000006c
 80009b0:	20000040 	.word	0x20000040

080009b4 <SM_SetStatusFlag>:

void SM_SetStatusFlag(uint8_t flag)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
	sm_statusFlags |= flag;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SM_SetStatusFlag+0x24>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <SM_SetStatusFlag+0x24>)
 80009cc:	701a      	strb	r2, [r3, #0]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	2000006d 	.word	0x2000006d

080009dc <SM_ClearStatusFlag>:

void SM_ClearStatusFlag(uint8_t flag)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	sm_statusFlags &= ~flag;
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <SM_ClearStatusFlag+0x30>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	4013      	ands	r3, r2
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <SM_ClearStatusFlag+0x30>)
 80009fe:	701a      	strb	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2000006d 	.word	0x2000006d

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x5c>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_MspInit+0x60>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_MspInit+0x60>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010000 	.word	0x40010000

08000a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <HAL_ADC_MspInit+0x7c>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d129      	bne.n	8000ae8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_ADC_MspInit+0x80>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <HAL_ADC_MspInit+0x80>)
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_ADC_MspInit+0x80>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_ADC_MspInit+0x80>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_ADC_MspInit+0x80>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_ADC_MspInit+0x80>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4809      	ldr	r0, [pc, #36]	; (8000af8 <HAL_ADC_MspInit+0x84>)
 8000ad4:	f001 fadc 	bl	8002090 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2103      	movs	r1, #3
 8000adc:	2012      	movs	r0, #18
 8000ade:	f001 faa0 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ae2:	2012      	movs	r0, #18
 8000ae4:	f001 fab9 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40012400 	.word	0x40012400
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010c00 	.word	0x40010c00

08000afc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <HAL_CAN_MspInit+0x8c>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d131      	bne.n	8000b80 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <HAL_CAN_MspInit+0x90>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	4a1a      	ldr	r2, [pc, #104]	; (8000b8c <HAL_CAN_MspInit+0x90>)
 8000b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b26:	61d3      	str	r3, [r2, #28]
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_CAN_MspInit+0x90>)
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_CAN_MspInit+0x90>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <HAL_CAN_MspInit+0x90>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_CAN_MspInit+0x90>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <HAL_CAN_MspInit+0x94>)
 8000b62:	f001 fa95 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_CAN_MspInit+0x94>)
 8000b7c:	f001 fa88 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40006400 	.word	0x40006400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010800 	.word	0x40010800

08000b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba4:	d114      	bne.n	8000bd0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	61d3      	str	r3, [r2, #28]
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	201c      	movs	r0, #28
 8000bc4:	f001 fa2d 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bc8:	201c      	movs	r0, #28
 8000bca:	f001 fa46 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bce:	e010      	b.n	8000bf2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_TIM_Base_MspInit+0x6c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40000400 	.word	0x40000400

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr

08000c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4a:	f000 fa01 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  SUPP_UpdateAdcFilter(HAL_ADC_GetValue(&hadc1));
 8000c58:	4806      	ldr	r0, [pc, #24]	; (8000c74 <ADC1_2_IRQHandler+0x20>)
 8000c5a:	f000 fbc7 	bl	80013ec <HAL_ADC_GetValue>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f93c 	bl	8000ee0 <SUPP_UpdateAdcFilter>
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <ADC1_2_IRQHandler+0x20>)
 8000c6a:	f000 fbcb 	bl	8001404 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000010c 	.word	0x2000010c

08000c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN TIM2_IRQn 0 */
  diginLLIMState = diginLLIMNextState;
 8000c7c:	4b7f      	ldr	r3, [pc, #508]	; (8000e7c <TIM2_IRQHandler+0x204>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b7f      	ldr	r3, [pc, #508]	; (8000e80 <TIM2_IRQHandler+0x208>)
 8000c84:	701a      	strb	r2, [r3, #0]
  switch(diginLLIMState)
 8000c86:	4b7e      	ldr	r3, [pc, #504]	; (8000e80 <TIM2_IRQHandler+0x208>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d873      	bhi.n	8000d78 <TIM2_IRQHandler+0x100>
 8000c90:	a201      	add	r2, pc, #4	; (adr r2, 8000c98 <TIM2_IRQHandler+0x20>)
 8000c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c96:	bf00      	nop
 8000c98:	08000ca9 	.word	0x08000ca9
 8000c9c:	08000ce9 	.word	0x08000ce9
 8000ca0:	08000d19 	.word	0x08000d19
 8000ca4:	08000d59 	.word	0x08000d59
  {
	  case digin_MaybeDown:
		  if(digin_LLIMIsHigh())
 8000ca8:	f000 f8fa 	bl	8000ea0 <digin_LLIMIsHigh>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <TIM2_IRQHandler+0x42>
		  {
			  diginLLIMNextState = digin_MaybeUp;
 8000cb2:	4b72      	ldr	r3, [pc, #456]	; (8000e7c <TIM2_IRQHandler+0x204>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	701a      	strb	r2, [r3, #0]
			  {
				  diginLLIMDebounceTim = 0u;
				  diginLLIMNextState = digin_Down;
			  }
		  }
		  break;
 8000cb8:	e061      	b.n	8000d7e <TIM2_IRQHandler+0x106>
			  if(diginLLIMDebounceTim < TIM2_DEBOUNCE_TIME_MS)
 8000cba:	4b72      	ldr	r3, [pc, #456]	; (8000e84 <TIM2_IRQHandler+0x20c>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b31      	cmp	r3, #49	; 0x31
 8000cc2:	d80a      	bhi.n	8000cda <TIM2_IRQHandler+0x62>
				  diginLLIMDebounceTim += TIM2_PERIOD_TIME_MS;
 8000cc4:	4b6f      	ldr	r3, [pc, #444]	; (8000e84 <TIM2_IRQHandler+0x20c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	3332      	adds	r3, #50	; 0x32
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b6d      	ldr	r3, [pc, #436]	; (8000e84 <TIM2_IRQHandler+0x20c>)
 8000cd0:	701a      	strb	r2, [r3, #0]
				  diginLLIMNextState = digin_MaybeDown;
 8000cd2:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <TIM2_IRQHandler+0x204>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
		  break;
 8000cd8:	e051      	b.n	8000d7e <TIM2_IRQHandler+0x106>
				  diginLLIMDebounceTim = 0u;
 8000cda:	4b6a      	ldr	r3, [pc, #424]	; (8000e84 <TIM2_IRQHandler+0x20c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
				  diginLLIMNextState = digin_Down;
 8000ce0:	4b66      	ldr	r3, [pc, #408]	; (8000e7c <TIM2_IRQHandler+0x204>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
		  break;
 8000ce6:	e04a      	b.n	8000d7e <TIM2_IRQHandler+0x106>

	  case digin_Down:
		  if(digin_LLIMIsHigh())
 8000ce8:	f000 f8da 	bl	8000ea0 <digin_LLIMIsHigh>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <TIM2_IRQHandler+0x82>
		  {
			  diginLLIMNextState = digin_MaybeUp;
 8000cf2:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <TIM2_IRQHandler+0x204>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	701a      	strb	r2, [r3, #0]
			  {
				  pcFlag = PC_FLAG_RESET;
				  SM_SetStatusFlag(SM_STATUS_LLIM_HIGH_FLAG);
			  }
		  }
		  break;
 8000cf8:	e040      	b.n	8000d7c <TIM2_IRQHandler+0x104>
			  diginLLIMNextState = digin_Down;
 8000cfa:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <TIM2_IRQHandler+0x204>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
			  if(pcFlag == PC_FLAG_SET)
 8000d00:	4b61      	ldr	r3, [pc, #388]	; (8000e88 <TIM2_IRQHandler+0x210>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d138      	bne.n	8000d7c <TIM2_IRQHandler+0x104>
				  pcFlag = PC_FLAG_RESET;
 8000d0a:	4b5f      	ldr	r3, [pc, #380]	; (8000e88 <TIM2_IRQHandler+0x210>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
				  SM_SetStatusFlag(SM_STATUS_LLIM_HIGH_FLAG);
 8000d10:	2004      	movs	r0, #4
 8000d12:	f7ff fe4f 	bl	80009b4 <SM_SetStatusFlag>
		  break;
 8000d16:	e031      	b.n	8000d7c <TIM2_IRQHandler+0x104>


	  case digin_MaybeUp:
		  if(digin_LLIMIsHigh())
 8000d18:	f000 f8c2 	bl	8000ea0 <digin_LLIMIsHigh>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d016      	beq.n	8000d50 <TIM2_IRQHandler+0xd8>
		  {
			  if(diginLLIMDebounceTim < TIM2_DEBOUNCE_TIME_MS)
 8000d22:	4b58      	ldr	r3, [pc, #352]	; (8000e84 <TIM2_IRQHandler+0x20c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b31      	cmp	r3, #49	; 0x31
 8000d2a:	d80a      	bhi.n	8000d42 <TIM2_IRQHandler+0xca>
			  {
				  diginLLIMDebounceTim += TIM2_PERIOD_TIME_MS;
 8000d2c:	4b55      	ldr	r3, [pc, #340]	; (8000e84 <TIM2_IRQHandler+0x20c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	3332      	adds	r3, #50	; 0x32
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <TIM2_IRQHandler+0x20c>)
 8000d38:	701a      	strb	r2, [r3, #0]
				  diginLLIMNextState = digin_MaybeUp;
 8000d3a:	4b50      	ldr	r3, [pc, #320]	; (8000e7c <TIM2_IRQHandler+0x204>)
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	701a      	strb	r2, [r3, #0]
		  }
		  else
		  {
			  diginLLIMNextState = digin_MaybeDown;
		  }
		  break;
 8000d40:	e01d      	b.n	8000d7e <TIM2_IRQHandler+0x106>
				  diginLLIMDebounceTim = 0u;
 8000d42:	4b50      	ldr	r3, [pc, #320]	; (8000e84 <TIM2_IRQHandler+0x20c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
				  diginLLIMNextState = digin_Up;
 8000d48:	4b4c      	ldr	r3, [pc, #304]	; (8000e7c <TIM2_IRQHandler+0x204>)
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	701a      	strb	r2, [r3, #0]
		  break;
 8000d4e:	e016      	b.n	8000d7e <TIM2_IRQHandler+0x106>
			  diginLLIMNextState = digin_MaybeDown;
 8000d50:	4b4a      	ldr	r3, [pc, #296]	; (8000e7c <TIM2_IRQHandler+0x204>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
		  break;
 8000d56:	e012      	b.n	8000d7e <TIM2_IRQHandler+0x106>

	  case digin_Up:
		  if(digin_LLIMIsHigh())
 8000d58:	f000 f8a2 	bl	8000ea0 <digin_LLIMIsHigh>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <TIM2_IRQHandler+0xf8>
		  {
			  diginLLIMNextState = digin_Up;
 8000d62:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <TIM2_IRQHandler+0x204>)
 8000d64:	2203      	movs	r2, #3
 8000d66:	701a      	strb	r2, [r3, #0]
			  pcFlag = PC_FLAG_SET;
 8000d68:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <TIM2_IRQHandler+0x210>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
		  }
		  else
		  {
			  diginLLIMNextState = digin_MaybeDown;
		  }
		  break;
 8000d6e:	e006      	b.n	8000d7e <TIM2_IRQHandler+0x106>
			  diginLLIMNextState = digin_MaybeDown;
 8000d70:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <TIM2_IRQHandler+0x204>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
		  break;
 8000d76:	e002      	b.n	8000d7e <TIM2_IRQHandler+0x106>

	  default:
		  /* Do Nothing */
		  break;
 8000d78:	bf00      	nop
 8000d7a:	e000      	b.n	8000d7e <TIM2_IRQHandler+0x106>
		  break;
 8000d7c:	bf00      	nop

  }

  diginHLIMState = diginHLIMNextState;
 8000d7e:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <TIM2_IRQHandler+0x214>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b42      	ldr	r3, [pc, #264]	; (8000e90 <TIM2_IRQHandler+0x218>)
 8000d86:	701a      	strb	r2, [r3, #0]

  switch(diginHLIMState)
 8000d88:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <TIM2_IRQHandler+0x218>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d86e      	bhi.n	8000e70 <TIM2_IRQHandler+0x1f8>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <TIM2_IRQHandler+0x120>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000de9 	.word	0x08000de9
 8000da0:	08000e0d 	.word	0x08000e0d
 8000da4:	08000e4d 	.word	0x08000e4d
  {
  case digin_MaybeDown:
	  if(digin_HLIMIsHigh())
 8000da8:	f000 f88a 	bl	8000ec0 <digin_HLIMIsHigh>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <TIM2_IRQHandler+0x142>
	  {
		  diginHLIMNextState = digin_MaybeUp;
 8000db2:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <TIM2_IRQHandler+0x214>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	701a      	strb	r2, [r3, #0]
		  {
			  diginHLIMDebounceTim = 0u;
			  diginHLIMNextState = digin_Down;
		  }
	  }
	  break;
 8000db8:	e05b      	b.n	8000e72 <TIM2_IRQHandler+0x1fa>
		  if(diginHLIMDebounceTim < TIM2_DEBOUNCE_TIME_MS)
 8000dba:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <TIM2_IRQHandler+0x21c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b31      	cmp	r3, #49	; 0x31
 8000dc2:	d80a      	bhi.n	8000dda <TIM2_IRQHandler+0x162>
			  diginHLIMDebounceTim += TIM2_PERIOD_TIME_MS;
 8000dc4:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <TIM2_IRQHandler+0x21c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	3332      	adds	r3, #50	; 0x32
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <TIM2_IRQHandler+0x21c>)
 8000dd0:	701a      	strb	r2, [r3, #0]
			  diginHLIMNextState = digin_MaybeDown;
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <TIM2_IRQHandler+0x214>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
	  break;
 8000dd8:	e04b      	b.n	8000e72 <TIM2_IRQHandler+0x1fa>
			  diginHLIMDebounceTim = 0u;
 8000dda:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <TIM2_IRQHandler+0x21c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
			  diginHLIMNextState = digin_Down;
 8000de0:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <TIM2_IRQHandler+0x214>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
	  break;
 8000de6:	e044      	b.n	8000e72 <TIM2_IRQHandler+0x1fa>

  case digin_Down:
	  if(digin_HLIMIsHigh())
 8000de8:	f000 f86a 	bl	8000ec0 <digin_HLIMIsHigh>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <TIM2_IRQHandler+0x182>
	  {
		  diginHLIMNextState = digin_MaybeUp;
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <TIM2_IRQHandler+0x214>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	701a      	strb	r2, [r3, #0]
	  else
	  {
		  diginHLIMNextState = digin_Down;
		  HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_SET);
	  }
	  break;
 8000df8:	e03b      	b.n	8000e72 <TIM2_IRQHandler+0x1fa>
		  diginHLIMNextState = digin_Down;
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <TIM2_IRQHandler+0x214>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2110      	movs	r1, #16
 8000e04:	4824      	ldr	r0, [pc, #144]	; (8000e98 <TIM2_IRQHandler+0x220>)
 8000e06:	f001 fad4 	bl	80023b2 <HAL_GPIO_WritePin>
	  break;
 8000e0a:	e032      	b.n	8000e72 <TIM2_IRQHandler+0x1fa>

  case digin_MaybeUp:
	  if(digin_HLIMIsHigh())
 8000e0c:	f000 f858 	bl	8000ec0 <digin_HLIMIsHigh>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d016      	beq.n	8000e44 <TIM2_IRQHandler+0x1cc>
	  {
		  if(diginHLIMDebounceTim < TIM2_DEBOUNCE_TIME_MS)
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <TIM2_IRQHandler+0x21c>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b31      	cmp	r3, #49	; 0x31
 8000e1e:	d80a      	bhi.n	8000e36 <TIM2_IRQHandler+0x1be>
		  {
			  diginHLIMDebounceTim += TIM2_PERIOD_TIME_MS;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <TIM2_IRQHandler+0x21c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	3332      	adds	r3, #50	; 0x32
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <TIM2_IRQHandler+0x21c>)
 8000e2c:	701a      	strb	r2, [r3, #0]
			  diginHLIMNextState = digin_MaybeUp;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <TIM2_IRQHandler+0x214>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	701a      	strb	r2, [r3, #0]
	  }
	  else
	  {
		  diginHLIMNextState = digin_MaybeDown;
	  }
	  break;
 8000e34:	e01d      	b.n	8000e72 <TIM2_IRQHandler+0x1fa>
			  diginHLIMDebounceTim = 0u;
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <TIM2_IRQHandler+0x21c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
			  diginHLIMNextState = digin_Up;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <TIM2_IRQHandler+0x214>)
 8000e3e:	2203      	movs	r2, #3
 8000e40:	701a      	strb	r2, [r3, #0]
	  break;
 8000e42:	e016      	b.n	8000e72 <TIM2_IRQHandler+0x1fa>
		  diginHLIMNextState = digin_MaybeDown;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <TIM2_IRQHandler+0x214>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
	  break;
 8000e4a:	e012      	b.n	8000e72 <TIM2_IRQHandler+0x1fa>

  case digin_Up:
	  if(digin_HLIMIsHigh())
 8000e4c:	f000 f838 	bl	8000ec0 <digin_HLIMIsHigh>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d008      	beq.n	8000e68 <TIM2_IRQHandler+0x1f0>
	  {
		  diginHLIMNextState = digin_Up;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <TIM2_IRQHandler+0x214>)
 8000e58:	2203      	movs	r2, #3
 8000e5a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2110      	movs	r1, #16
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <TIM2_IRQHandler+0x220>)
 8000e62:	f001 faa6 	bl	80023b2 <HAL_GPIO_WritePin>
	  }
	  else
	  {
		  diginHLIMNextState = digin_MaybeDown;
	  }
	  break;
 8000e66:	e004      	b.n	8000e72 <TIM2_IRQHandler+0x1fa>
		  diginHLIMNextState = digin_MaybeDown;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <TIM2_IRQHandler+0x214>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
	  break;
 8000e6e:	e000      	b.n	8000e72 <TIM2_IRQHandler+0x1fa>

  default:
	  /* Do Nothing */
	  break;
 8000e70:	bf00      	nop

  }

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e72:	480a      	ldr	r0, [pc, #40]	; (8000e9c <TIM2_IRQHandler+0x224>)
 8000e74:	f002 f916 	bl	80030a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000007f 	.word	0x2000007f
 8000e80:	2000007e 	.word	0x2000007e
 8000e84:	20000080 	.word	0x20000080
 8000e88:	20000084 	.word	0x20000084
 8000e8c:	20000082 	.word	0x20000082
 8000e90:	20000081 	.word	0x20000081
 8000e94:	20000083 	.word	0x20000083
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	2000013c 	.word	0x2000013c

08000ea0 <digin_LLIMIsHigh>:

/* USER CODE BEGIN 1 */

static uint8_t digin_LLIMIsHigh(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	return (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, LLIM_IN_Pin));
 8000ea4:	2140      	movs	r1, #64	; 0x40
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <digin_LLIMIsHigh+0x1c>)
 8000ea8:	f001 fa6c 	bl	8002384 <HAL_GPIO_ReadPin>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	bf0c      	ite	eq
 8000eb2:	2301      	moveq	r3, #1
 8000eb4:	2300      	movne	r3, #0
 8000eb6:	b2db      	uxtb	r3, r3
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40010800 	.word	0x40010800

08000ec0 <digin_HLIMIsHigh>:

static uint8_t digin_HLIMIsHigh(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	return (GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, HLIM_IN_Pin));
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <digin_HLIMIsHigh+0x1c>)
 8000ec8:	f001 fa5c 	bl	8002384 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40010800 	.word	0x40010800

08000ee0 <SUPP_UpdateAdcFilter>:

//
// Shoves an ADC reading into the filter circular buffer and update filter output
//
void SUPP_UpdateAdcFilter(uint16_t adcVal)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	uint8_t index;
	uint16_t supp_bufferSum = 0u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	81bb      	strh	r3, [r7, #12]

	//update circular buffer
	supp_aAdcVal[supp_bufferIndex] = adcVal;
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <SUPP_UpdateAdcFilter+0x68>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <SUPP_UpdateAdcFilter+0x6c>)
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	supp_bufferIndex = SUPP_GET_NEXT_IND(supp_bufferIndex);
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <SUPP_UpdateAdcFilter+0x68>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	3301      	adds	r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <SUPP_UpdateAdcFilter+0x68>)
 8000f10:	701a      	strb	r2, [r3, #0]

	for(index = SUPP_BUFFER_FIRST_INDEX; index < SUPP_RAW_READING_BUFFER_LENGTH; index++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e00a      	b.n	8000f2e <SUPP_UpdateAdcFilter+0x4e>
	{
		supp_bufferSum += supp_aAdcVal[index];
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <SUPP_UpdateAdcFilter+0x6c>)
 8000f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	89bb      	ldrh	r3, [r7, #12]
 8000f24:	4413      	add	r3, r2
 8000f26:	81bb      	strh	r3, [r7, #12]
	for(index = SUPP_BUFFER_FIRST_INDEX; index < SUPP_RAW_READING_BUFFER_LENGTH; index++)
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	d9f1      	bls.n	8000f18 <SUPP_UpdateAdcFilter+0x38>
	}

	supp_filteredOut = supp_bufferSum >> 3u;
 8000f34:	89bb      	ldrh	r3, [r7, #12]
 8000f36:	08db      	lsrs	r3, r3, #3
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <SUPP_UpdateAdcFilter+0x70>)
 8000f3c:	801a      	strh	r2, [r3, #0]
	//	}
	//	supp_fFilteredOut += supp_filterTaps[index] * supp_aAdcVal[supp_bufferSumIndex];
	//}


}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	20000098 	.word	0x20000098
 8000f4c:	20000088 	.word	0x20000088
 8000f50:	2000009a 	.word	0x2000009a

08000f54 <SUPP_GetAdcVal>:

uint16_t SUPP_GetAdcVal(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	return supp_filteredOut;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <SUPP_GetAdcVal+0x14>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2000009a 	.word	0x2000009a

08000f6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	; (8000fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f9e:	f7ff ffe5 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f002 fbd1 	bl	8003748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa6:	f7ff f8d1 	bl	800014c <main>
  bx lr
 8000faa:	4770      	bx	lr
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000fb4:	080037f8 	.word	0x080037f8
  ldr r2, =_sbss
 8000fb8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000fbc:	20000188 	.word	0x20000188

08000fc0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <CAN1_RX1_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x28>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x28>)
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f001 f819 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fd16 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40022000 	.word	0x40022000

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f001 f831 	bl	8002076 <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 fff9 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000018 	.word	0x20000018
 8001048:	20000020 	.word	0x20000020
 800104c:	2000001c 	.word	0x2000001c

08001050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x1c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_IncTick+0x20>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a03      	ldr	r2, [pc, #12]	; (8001070 <HAL_IncTick+0x20>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	20000020 	.word	0x20000020
 8001070:	20000184 	.word	0x20000184

08001074 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <HAL_GetTick+0x10>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000184 	.word	0x20000184

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff fff0 	bl	8001074 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffe0 	bl	8001074 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000020 	.word	0x20000020

080010d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0be      	b.n	8001270 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d109      	bne.n	8001114 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fcb0 	bl	8000a74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 fb9d 	bl	8001854 <ADC_ConversionStop_Disable>
 800111a:	4603      	mov	r3, r0
 800111c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 8099 	bne.w	800125e <HAL_ADC_Init+0x18e>
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 8095 	bne.w	800125e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800113c:	f023 0302 	bic.w	r3, r3, #2
 8001140:	f043 0202 	orr.w	r2, r3, #2
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001150:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7b1b      	ldrb	r3, [r3, #12]
 8001156:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001158:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4313      	orrs	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001168:	d003      	beq.n	8001172 <HAL_ADC_Init+0xa2>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d102      	bne.n	8001178 <HAL_ADC_Init+0xa8>
 8001172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001176:	e000      	b.n	800117a <HAL_ADC_Init+0xaa>
 8001178:	2300      	movs	r3, #0
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7d1b      	ldrb	r3, [r3, #20]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d119      	bne.n	80011bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7b1b      	ldrb	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d109      	bne.n	80011a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	3b01      	subs	r3, #1
 8001196:	035a      	lsls	r2, r3, #13
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	e00b      	b.n	80011bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f043 0220 	orr.w	r2, r3, #32
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <HAL_ADC_Init+0x1a8>)
 80011d8:	4013      	ands	r3, r2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	430b      	orrs	r3, r1
 80011e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ec:	d003      	beq.n	80011f6 <HAL_ADC_Init+0x126>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d104      	bne.n	8001200 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	051b      	lsls	r3, r3, #20
 80011fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	430a      	orrs	r2, r1
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_ADC_Init+0x1ac>)
 800121c:	4013      	ands	r3, r2
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	429a      	cmp	r2, r3
 8001222:	d10b      	bne.n	800123c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	f023 0303 	bic.w	r3, r3, #3
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800123a:	e018      	b.n	800126e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001240:	f023 0312 	bic.w	r3, r3, #18
 8001244:	f043 0210 	orr.w	r2, r3, #16
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	f043 0201 	orr.w	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800125c:	e007      	b.n	800126e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	f043 0210 	orr.w	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800126e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	ffe1f7fd 	.word	0xffe1f7fd
 800127c:	ff1f0efe 	.word	0xff1f0efe

08001280 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_ADC_Start_IT+0x1a>
 8001296:	2302      	movs	r3, #2
 8001298:	e0a0      	b.n	80013dc <HAL_ADC_Start_IT+0x15c>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fa7c 	bl	80017a0 <ADC_Enable>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f040 808f 	bne.w	80013d2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <HAL_ADC_Start_IT+0x164>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d105      	bne.n	80012de <HAL_ADC_Start_IT+0x5e>
 80012d2:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <HAL_ADC_Start_IT+0x168>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d115      	bne.n	800130a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d026      	beq.n	8001346 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001300:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001308:	e01d      	b.n	8001346 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a33      	ldr	r2, [pc, #204]	; (80013e8 <HAL_ADC_Start_IT+0x168>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d004      	beq.n	800132a <HAL_ADC_Start_IT+0xaa>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2f      	ldr	r2, [pc, #188]	; (80013e4 <HAL_ADC_Start_IT+0x164>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10d      	bne.n	8001346 <HAL_ADC_Start_IT+0xc6>
 800132a:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HAL_ADC_Start_IT+0x168>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800133e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	f023 0206 	bic.w	r2, r3, #6
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
 800135e:	e002      	b.n	8001366 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f06f 0202 	mvn.w	r2, #2
 8001376:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0220 	orr.w	r2, r2, #32
 8001386:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001392:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001396:	d113      	bne.n	80013c0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800139c:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_ADC_Start_IT+0x164>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d105      	bne.n	80013ae <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_ADC_Start_IT+0x168>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d108      	bne.n	80013c0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	e00c      	b.n	80013da <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	e003      	b.n	80013da <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40012800 	.word	0x40012800
 80013e8:	40012400 	.word	0x40012400

080013ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	2b20      	cmp	r3, #32
 8001418:	d140      	bne.n	800149c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b02      	cmp	r3, #2
 8001426:	d139      	bne.n	800149c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800144a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800144e:	d11d      	bne.n	800148c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001454:	2b00      	cmp	r3, #0
 8001456:	d119      	bne.n	800148c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0220 	bic.w	r2, r2, #32
 8001466:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f87c 	bl	800158a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 0212 	mvn.w	r2, #18
 800149a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	2b80      	cmp	r3, #128	; 0x80
 80014a8:	d14f      	bne.n	800154a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d148      	bne.n	800154a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80014da:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80014de:	d012      	beq.n	8001506 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d125      	bne.n	800153a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80014f8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014fc:	d11d      	bne.n	800153a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001502:	2b00      	cmp	r3, #0
 8001504:	d119      	bne.n	800153a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001514:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d105      	bne.n	800153a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fa78 	bl	8001a30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 020c 	mvn.w	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001554:	2b40      	cmp	r3, #64	; 0x40
 8001556:	d114      	bne.n	8001582 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b01      	cmp	r3, #1
 8001564:	d10d      	bne.n	8001582 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f812 	bl	800159c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f06f 0201 	mvn.w	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x20>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e0dc      	b.n	800178a <HAL_ADC_ConfigChannel+0x1da>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b06      	cmp	r3, #6
 80015de:	d81c      	bhi.n	800161a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	3b05      	subs	r3, #5
 80015f2:	221f      	movs	r2, #31
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4019      	ands	r1, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	3b05      	subs	r3, #5
 800160c:	fa00 f203 	lsl.w	r2, r0, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	635a      	str	r2, [r3, #52]	; 0x34
 8001618:	e03c      	b.n	8001694 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b0c      	cmp	r3, #12
 8001620:	d81c      	bhi.n	800165c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	3b23      	subs	r3, #35	; 0x23
 8001634:	221f      	movs	r2, #31
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	4019      	ands	r1, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3b23      	subs	r3, #35	; 0x23
 800164e:	fa00 f203 	lsl.w	r2, r0, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
 800165a:	e01b      	b.n	8001694 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3b41      	subs	r3, #65	; 0x41
 800166e:	221f      	movs	r2, #31
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	4019      	ands	r1, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3b41      	subs	r3, #65	; 0x41
 8001688:	fa00 f203 	lsl.w	r2, r0, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b09      	cmp	r3, #9
 800169a:	d91c      	bls.n	80016d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68d9      	ldr	r1, [r3, #12]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	3b1e      	subs	r3, #30
 80016ae:	2207      	movs	r2, #7
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4019      	ands	r1, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	6898      	ldr	r0, [r3, #8]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	3b1e      	subs	r3, #30
 80016c8:	fa00 f203 	lsl.w	r2, r0, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	e019      	b.n	800170a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6919      	ldr	r1, [r3, #16]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	2207      	movs	r2, #7
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4019      	ands	r1, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6898      	ldr	r0, [r3, #8]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b10      	cmp	r3, #16
 8001710:	d003      	beq.n	800171a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001716:	2b11      	cmp	r3, #17
 8001718:	d132      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <HAL_ADC_ConfigChannel+0x1e4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d125      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d126      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001740:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b10      	cmp	r3, #16
 8001748:	d11a      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_ADC_ConfigChannel+0x1e8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a13      	ldr	r2, [pc, #76]	; (800179c <HAL_ADC_ConfigChannel+0x1ec>)
 8001750:	fba2 2303 	umull	r2, r3, r2, r3
 8001754:	0c9a      	lsrs	r2, r3, #18
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001760:	e002      	b.n	8001768 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3b01      	subs	r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f9      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x1b2>
 800176e:	e007      	b.n	8001780 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	f043 0220 	orr.w	r2, r3, #32
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	40012400 	.word	0x40012400
 8001798:	20000018 	.word	0x20000018
 800179c:	431bde83 	.word	0x431bde83

080017a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d040      	beq.n	8001840 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0201 	orr.w	r2, r2, #1
 80017cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <ADC_Enable+0xac>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <ADC_Enable+0xb0>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	0c9b      	lsrs	r3, r3, #18
 80017da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017dc:	e002      	b.n	80017e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f9      	bne.n	80017de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ea:	f7ff fc43 	bl	8001074 <HAL_GetTick>
 80017ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017f0:	e01f      	b.n	8001832 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017f2:	f7ff fc3f 	bl	8001074 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d918      	bls.n	8001832 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d011      	beq.n	8001832 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	f043 0210 	orr.w	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	f043 0201 	orr.w	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e007      	b.n	8001842 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d1d8      	bne.n	80017f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000018 	.word	0x20000018
 8001850:	431bde83 	.word	0x431bde83

08001854 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b01      	cmp	r3, #1
 800186c:	d12e      	bne.n	80018cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800187e:	f7ff fbf9 	bl	8001074 <HAL_GetTick>
 8001882:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001884:	e01b      	b.n	80018be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001886:	f7ff fbf5 	bl	8001074 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d914      	bls.n	80018be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10d      	bne.n	80018be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	f043 0210 	orr.w	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e007      	b.n	80018ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d0dc      	beq.n	8001886 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_ADCEx_Calibration_Start+0x1e>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e095      	b.n	8001a22 <HAL_ADCEx_Calibration_Start+0x14a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa8 	bl	8001854 <ADC_ConversionStop_Disable>
 8001904:	4603      	mov	r3, r0
 8001906:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8084 	bne.w	8001a18 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001918:	f023 0302 	bic.w	r3, r3, #2
 800191c:	f043 0202 	orr.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001924:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_ADCEx_Calibration_Start+0x154>)
 8001926:	681c      	ldr	r4, [r3, #0]
 8001928:	2002      	movs	r0, #2
 800192a:	f001 fa17 	bl	8002d5c <HAL_RCCEx_GetPeriphCLKFreq>
 800192e:	4603      	mov	r3, r0
 8001930:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001934:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001936:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001938:	e002      	b.n	8001940 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3b01      	subs	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f9      	bne.n	800193a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ff2a 	bl	80017a0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0208 	orr.w	r2, r2, #8
 800195a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800195c:	f7ff fb8a 	bl	8001074 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001962:	e01b      	b.n	800199c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001964:	f7ff fb86 	bl	8001074 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b0a      	cmp	r3, #10
 8001970:	d914      	bls.n	800199c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00d      	beq.n	800199c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f023 0312 	bic.w	r3, r3, #18
 8001988:	f043 0210 	orr.w	r2, r3, #16
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e042      	b.n	8001a22 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1dc      	bne.n	8001964 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0204 	orr.w	r2, r2, #4
 80019b8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80019ba:	f7ff fb5b 	bl	8001074 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80019c0:	e01b      	b.n	80019fa <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80019c2:	f7ff fb57 	bl	8001074 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b0a      	cmp	r3, #10
 80019ce:	d914      	bls.n	80019fa <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00d      	beq.n	80019fa <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	f023 0312 	bic.w	r3, r3, #18
 80019e6:	f043 0210 	orr.w	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e013      	b.n	8001a22 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1dc      	bne.n	80019c2 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	f023 0303 	bic.w	r3, r3, #3
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000018 	.word	0x20000018

08001a30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0ed      	b.n	8001c30 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff f84b 	bl	8000afc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a76:	f7ff fafd 	bl	8001074 <HAL_GetTick>
 8001a7a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a7c:	e012      	b.n	8001aa4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a7e:	f7ff faf9 	bl	8001074 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b0a      	cmp	r3, #10
 8001a8a:	d90b      	bls.n	8001aa4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2205      	movs	r2, #5
 8001a9c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0c5      	b.n	8001c30 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0e5      	beq.n	8001a7e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0202 	bic.w	r2, r2, #2
 8001ac0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac2:	f7ff fad7 	bl	8001074 <HAL_GetTick>
 8001ac6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ac8:	e012      	b.n	8001af0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aca:	f7ff fad3 	bl	8001074 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b0a      	cmp	r3, #10
 8001ad6:	d90b      	bls.n	8001af0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2205      	movs	r2, #5
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e09f      	b.n	8001c30 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1e5      	bne.n	8001aca <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7e1b      	ldrb	r3, [r3, #24]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d108      	bne.n	8001b18 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e007      	b.n	8001b28 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	7e5b      	ldrb	r3, [r3, #25]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d108      	bne.n	8001b42 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e007      	b.n	8001b52 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7e9b      	ldrb	r3, [r3, #26]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d108      	bne.n	8001b6c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0220 	orr.w	r2, r2, #32
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	e007      	b.n	8001b7c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0220 	bic.w	r2, r2, #32
 8001b7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7edb      	ldrb	r3, [r3, #27]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d108      	bne.n	8001b96 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0210 	bic.w	r2, r2, #16
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e007      	b.n	8001ba6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0210 	orr.w	r2, r2, #16
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7f1b      	ldrb	r3, [r3, #28]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d108      	bne.n	8001bc0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0208 	orr.w	r2, r2, #8
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	e007      	b.n	8001bd0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0208 	bic.w	r2, r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7f5b      	ldrb	r3, [r3, #29]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d108      	bne.n	8001bea <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0204 	orr.w	r2, r2, #4
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	e007      	b.n	8001bfa <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0204 	bic.w	r2, r2, #4
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	ea42 0103 	orr.w	r1, r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d12e      	bne.n	8001caa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c64:	f7ff fa06 	bl	8001074 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c6a:	e012      	b.n	8001c92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c6c:	f7ff fa02 	bl	8001074 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b0a      	cmp	r3, #10
 8001c78:	d90b      	bls.n	8001c92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2205      	movs	r2, #5
 8001c8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e012      	b.n	8001cb8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e5      	bne.n	8001c6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e006      	b.n	8001cb8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
  }
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d003      	beq.n	8001cec <HAL_CAN_AddTxMessage+0x2c>
 8001ce4:	7ffb      	ldrb	r3, [r7, #31]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	f040 80b8 	bne.w	8001e5c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10a      	bne.n	8001d0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80a0 	beq.w	8001e4c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	0e1b      	lsrs	r3, r3, #24
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d907      	bls.n	8001d2c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e09e      	b.n	8001e6a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	409a      	lsls	r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10d      	bne.n	8001d5a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d48:	68f9      	ldr	r1, [r7, #12]
 8001d4a:	6809      	ldr	r1, [r1, #0]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3318      	adds	r3, #24
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	440b      	add	r3, r1
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e00f      	b.n	8001d7a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d64:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d6a:	68f9      	ldr	r1, [r7, #12]
 8001d6c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d6e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3318      	adds	r3, #24
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	440b      	add	r3, r1
 8001d78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6819      	ldr	r1, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3318      	adds	r3, #24
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	440b      	add	r3, r1
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	7d1b      	ldrb	r3, [r3, #20]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d111      	bne.n	8001dba <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3318      	adds	r3, #24
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	6811      	ldr	r1, [r2, #0]
 8001daa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3318      	adds	r3, #24
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	440b      	add	r3, r1
 8001db6:	3304      	adds	r3, #4
 8001db8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3307      	adds	r3, #7
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	061a      	lsls	r2, r3, #24
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3306      	adds	r3, #6
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3305      	adds	r3, #5
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	3204      	adds	r2, #4
 8001dda:	7812      	ldrb	r2, [r2, #0]
 8001ddc:	4610      	mov	r0, r2
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6811      	ldr	r1, [r2, #0]
 8001de2:	ea43 0200 	orr.w	r2, r3, r0
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	440b      	add	r3, r1
 8001dec:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001df0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3303      	adds	r3, #3
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	061a      	lsls	r2, r3, #24
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3301      	adds	r3, #1
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	4610      	mov	r0, r2
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	6811      	ldr	r1, [r2, #0]
 8001e18:	ea43 0200 	orr.w	r2, r3, r0
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e26:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3318      	adds	r3, #24
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	6811      	ldr	r1, [r2, #0]
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3318      	adds	r3, #24
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	440b      	add	r3, r1
 8001e46:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e00e      	b.n	8001e6a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e006      	b.n	8001e6a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db0b      	blt.n	8001f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 021f 	and.w	r2, r3, #31
 8001ef0:	4906      	ldr	r1, [pc, #24]	; (8001f0c <__NVIC_EnableIRQ+0x34>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2001      	movs	r0, #1
 8001efa:	fa00 f202 	lsl.w	r2, r0, r2
 8001efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100

08001f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	; (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	; (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f1c3 0307 	rsb	r3, r3, #7
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	bf28      	it	cs
 8001f82:	2304      	movcs	r3, #4
 8001f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d902      	bls.n	8001f94 <NVIC_EncodePriority+0x30>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3b03      	subs	r3, #3
 8001f92:	e000      	b.n	8001f96 <NVIC_EncodePriority+0x32>
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43d9      	mvns	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	4313      	orrs	r3, r2
         );
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff90 	bl	8001f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff2d 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff42 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff90 	bl	8001f64 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5f 	bl	8001f10 <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff35 	bl	8001ed8 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b08b      	sub	sp, #44	; 0x2c
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	e148      	b.n	8002336 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020a4:	2201      	movs	r2, #1
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 8137 	bne.w	8002330 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4aa3      	ldr	r2, [pc, #652]	; (8002354 <HAL_GPIO_Init+0x2c4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d05e      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020cc:	4aa1      	ldr	r2, [pc, #644]	; (8002354 <HAL_GPIO_Init+0x2c4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d875      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020d2:	4aa1      	ldr	r2, [pc, #644]	; (8002358 <HAL_GPIO_Init+0x2c8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d058      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020d8:	4a9f      	ldr	r2, [pc, #636]	; (8002358 <HAL_GPIO_Init+0x2c8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d86f      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020de:	4a9f      	ldr	r2, [pc, #636]	; (800235c <HAL_GPIO_Init+0x2cc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d052      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020e4:	4a9d      	ldr	r2, [pc, #628]	; (800235c <HAL_GPIO_Init+0x2cc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d869      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020ea:	4a9d      	ldr	r2, [pc, #628]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d04c      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020f0:	4a9b      	ldr	r2, [pc, #620]	; (8002360 <HAL_GPIO_Init+0x2d0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d863      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 80020f6:	4a9b      	ldr	r2, [pc, #620]	; (8002364 <HAL_GPIO_Init+0x2d4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d046      	beq.n	800218a <HAL_GPIO_Init+0xfa>
 80020fc:	4a99      	ldr	r2, [pc, #612]	; (8002364 <HAL_GPIO_Init+0x2d4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d85d      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 8002102:	2b12      	cmp	r3, #18
 8002104:	d82a      	bhi.n	800215c <HAL_GPIO_Init+0xcc>
 8002106:	2b12      	cmp	r3, #18
 8002108:	d859      	bhi.n	80021be <HAL_GPIO_Init+0x12e>
 800210a:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <HAL_GPIO_Init+0x80>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	0800218b 	.word	0x0800218b
 8002114:	08002165 	.word	0x08002165
 8002118:	08002177 	.word	0x08002177
 800211c:	080021b9 	.word	0x080021b9
 8002120:	080021bf 	.word	0x080021bf
 8002124:	080021bf 	.word	0x080021bf
 8002128:	080021bf 	.word	0x080021bf
 800212c:	080021bf 	.word	0x080021bf
 8002130:	080021bf 	.word	0x080021bf
 8002134:	080021bf 	.word	0x080021bf
 8002138:	080021bf 	.word	0x080021bf
 800213c:	080021bf 	.word	0x080021bf
 8002140:	080021bf 	.word	0x080021bf
 8002144:	080021bf 	.word	0x080021bf
 8002148:	080021bf 	.word	0x080021bf
 800214c:	080021bf 	.word	0x080021bf
 8002150:	080021bf 	.word	0x080021bf
 8002154:	0800216d 	.word	0x0800216d
 8002158:	08002181 	.word	0x08002181
 800215c:	4a82      	ldr	r2, [pc, #520]	; (8002368 <HAL_GPIO_Init+0x2d8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002162:	e02c      	b.n	80021be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	623b      	str	r3, [r7, #32]
          break;
 800216a:	e029      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	3304      	adds	r3, #4
 8002172:	623b      	str	r3, [r7, #32]
          break;
 8002174:	e024      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	3308      	adds	r3, #8
 800217c:	623b      	str	r3, [r7, #32]
          break;
 800217e:	e01f      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	330c      	adds	r3, #12
 8002186:	623b      	str	r3, [r7, #32]
          break;
 8002188:	e01a      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002192:	2304      	movs	r3, #4
 8002194:	623b      	str	r3, [r7, #32]
          break;
 8002196:	e013      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d105      	bne.n	80021ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a0:	2308      	movs	r3, #8
 80021a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	611a      	str	r2, [r3, #16]
          break;
 80021aa:	e009      	b.n	80021c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021ac:	2308      	movs	r3, #8
 80021ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	615a      	str	r2, [r3, #20]
          break;
 80021b6:	e003      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
          break;
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x130>
          break;
 80021be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2bff      	cmp	r3, #255	; 0xff
 80021c4:	d801      	bhi.n	80021ca <HAL_GPIO_Init+0x13a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	e001      	b.n	80021ce <HAL_GPIO_Init+0x13e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2bff      	cmp	r3, #255	; 0xff
 80021d4:	d802      	bhi.n	80021dc <HAL_GPIO_Init+0x14c>
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	e002      	b.n	80021e2 <HAL_GPIO_Init+0x152>
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	3b08      	subs	r3, #8
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	210f      	movs	r1, #15
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	401a      	ands	r2, r3
 80021f4:	6a39      	ldr	r1, [r7, #32]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	431a      	orrs	r2, r3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8090 	beq.w	8002330 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002210:	4b56      	ldr	r3, [pc, #344]	; (800236c <HAL_GPIO_Init+0x2dc>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a55      	ldr	r2, [pc, #340]	; (800236c <HAL_GPIO_Init+0x2dc>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_GPIO_Init+0x2dc>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002228:	4a51      	ldr	r2, [pc, #324]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002234:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a49      	ldr	r2, [pc, #292]	; (8002374 <HAL_GPIO_Init+0x2e4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00d      	beq.n	8002270 <HAL_GPIO_Init+0x1e0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a48      	ldr	r2, [pc, #288]	; (8002378 <HAL_GPIO_Init+0x2e8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <HAL_GPIO_Init+0x1dc>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a47      	ldr	r2, [pc, #284]	; (800237c <HAL_GPIO_Init+0x2ec>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_GPIO_Init+0x1d8>
 8002264:	2302      	movs	r3, #2
 8002266:	e004      	b.n	8002272 <HAL_GPIO_Init+0x1e2>
 8002268:	2303      	movs	r3, #3
 800226a:	e002      	b.n	8002272 <HAL_GPIO_Init+0x1e2>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_GPIO_Init+0x1e2>
 8002270:	2300      	movs	r3, #0
 8002272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002274:	f002 0203 	and.w	r2, r2, #3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4093      	lsls	r3, r2
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002282:	493b      	ldr	r1, [pc, #236]	; (8002370 <HAL_GPIO_Init+0x2e0>)
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800229c:	4b38      	ldr	r3, [pc, #224]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4937      	ldr	r1, [pc, #220]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022aa:	4b35      	ldr	r3, [pc, #212]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4933      	ldr	r1, [pc, #204]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	492d      	ldr	r1, [pc, #180]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022d2:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	43db      	mvns	r3, r3
 80022da:	4929      	ldr	r1, [pc, #164]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4923      	ldr	r1, [pc, #140]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	43db      	mvns	r3, r3
 8002302:	491f      	ldr	r1, [pc, #124]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 8002304:	4013      	ands	r3, r2
 8002306:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d006      	beq.n	8002322 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	4919      	ldr	r1, [pc, #100]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	60cb      	str	r3, [r1, #12]
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	43db      	mvns	r3, r3
 800232a:	4915      	ldr	r1, [pc, #84]	; (8002380 <HAL_GPIO_Init+0x2f0>)
 800232c:	4013      	ands	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	3301      	adds	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	f47f aeaf 	bne.w	80020a4 <HAL_GPIO_Init+0x14>
  }
}
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	372c      	adds	r7, #44	; 0x2c
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	10320000 	.word	0x10320000
 8002358:	10310000 	.word	0x10310000
 800235c:	10220000 	.word	0x10220000
 8002360:	10210000 	.word	0x10210000
 8002364:	10120000 	.word	0x10120000
 8002368:	10110000 	.word	0x10110000
 800236c:	40021000 	.word	0x40021000
 8002370:	40010000 	.word	0x40010000
 8002374:	40010800 	.word	0x40010800
 8002378:	40010c00 	.word	0x40010c00
 800237c:	40011000 	.word	0x40011000
 8002380:	40010400 	.word	0x40010400

08002384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e001      	b.n	80023a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	807b      	strh	r3, [r7, #2]
 80023be:	4613      	mov	r3, r2
 80023c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023c2:	787b      	ldrb	r3, [r7, #1]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c8:	887a      	ldrh	r2, [r7, #2]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ce:	e003      	b.n	80023d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023d0:	887b      	ldrh	r3, [r7, #2]
 80023d2:	041a      	lsls	r2, r3, #16
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	611a      	str	r2, [r3, #16]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e26c      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8087 	beq.w	8002512 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002404:	4b92      	ldr	r3, [pc, #584]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b04      	cmp	r3, #4
 800240e:	d00c      	beq.n	800242a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002410:	4b8f      	ldr	r3, [pc, #572]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d112      	bne.n	8002442 <HAL_RCC_OscConfig+0x5e>
 800241c:	4b8c      	ldr	r3, [pc, #560]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002428:	d10b      	bne.n	8002442 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242a:	4b89      	ldr	r3, [pc, #548]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d06c      	beq.n	8002510 <HAL_RCC_OscConfig+0x12c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d168      	bne.n	8002510 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e246      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x76>
 800244c:	4b80      	ldr	r3, [pc, #512]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a7f      	ldr	r2, [pc, #508]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e02e      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x98>
 8002462:	4b7b      	ldr	r3, [pc, #492]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7a      	ldr	r2, [pc, #488]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b78      	ldr	r3, [pc, #480]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a77      	ldr	r2, [pc, #476]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e01d      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0xbc>
 8002486:	4b72      	ldr	r3, [pc, #456]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a71      	ldr	r2, [pc, #452]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6e      	ldr	r2, [pc, #440]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 80024a0:	4b6b      	ldr	r3, [pc, #428]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6a      	ldr	r2, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b68      	ldr	r3, [pc, #416]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a67      	ldr	r2, [pc, #412]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fdd8 	bl	8001074 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fdd4 	bl	8001074 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1fa      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b5d      	ldr	r3, [pc, #372]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0xe4>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe fdc4 	bl	8001074 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fdc0 	bl	8001074 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1e6      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	4b53      	ldr	r3, [pc, #332]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x10c>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800251e:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800252a:	4b49      	ldr	r3, [pc, #292]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x18c>
 8002536:	4b46      	ldr	r3, [pc, #280]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	4b43      	ldr	r3, [pc, #268]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x176>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e1ba      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4939      	ldr	r1, [pc, #228]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	e03a      	b.n	80025e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_RCC_OscConfig+0x270>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe fd79 	bl	8001074 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002586:	f7fe fd75 	bl	8001074 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e19b      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4927      	ldr	r1, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <HAL_RCC_OscConfig+0x270>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fd58 	bl	8001074 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c8:	f7fe fd54 	bl	8001074 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e17a      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d03a      	beq.n	8002668 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d019      	beq.n	800262e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fa:	4b17      	ldr	r3, [pc, #92]	; (8002658 <HAL_RCC_OscConfig+0x274>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002600:	f7fe fd38 	bl	8001074 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7fe fd34 	bl	8001074 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e15a      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_RCC_OscConfig+0x26c>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002626:	2001      	movs	r0, #1
 8002628:	f000 fac4 	bl	8002bb4 <RCC_Delay>
 800262c:	e01c      	b.n	8002668 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HAL_RCC_OscConfig+0x274>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002634:	f7fe fd1e 	bl	8001074 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263a:	e00f      	b.n	800265c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263c:	f7fe fd1a 	bl	8001074 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d908      	bls.n	800265c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e140      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	42420000 	.word	0x42420000
 8002658:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b9e      	ldr	r3, [pc, #632]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e9      	bne.n	800263c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a6 	beq.w	80027c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b97      	ldr	r3, [pc, #604]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b94      	ldr	r3, [pc, #592]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a93      	ldr	r2, [pc, #588]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b91      	ldr	r3, [pc, #580]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b8e      	ldr	r3, [pc, #568]	; (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4b8b      	ldr	r3, [pc, #556]	; (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a8a      	ldr	r2, [pc, #552]	; (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ba:	f7fe fcdb 	bl	8001074 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7fe fcd7 	bl	8001074 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	; 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0fd      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b81      	ldr	r3, [pc, #516]	; (80028dc <HAL_RCC_OscConfig+0x4f8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x312>
 80026e8:	4b7b      	ldr	r3, [pc, #492]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a7a      	ldr	r2, [pc, #488]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	e02d      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x334>
 80026fe:	4b76      	ldr	r3, [pc, #472]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a75      	ldr	r2, [pc, #468]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6213      	str	r3, [r2, #32]
 800270a:	4b73      	ldr	r3, [pc, #460]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a72      	ldr	r2, [pc, #456]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6213      	str	r3, [r2, #32]
 8002716:	e01c      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d10c      	bne.n	800273a <HAL_RCC_OscConfig+0x356>
 8002720:	4b6d      	ldr	r3, [pc, #436]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a6c      	ldr	r2, [pc, #432]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	4b6a      	ldr	r3, [pc, #424]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a69      	ldr	r2, [pc, #420]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	e00b      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 800273a:	4b67      	ldr	r3, [pc, #412]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a66      	ldr	r2, [pc, #408]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6213      	str	r3, [r2, #32]
 8002746:	4b64      	ldr	r3, [pc, #400]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a63      	ldr	r2, [pc, #396]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d015      	beq.n	8002786 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7fe fc8b 	bl	8001074 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7fe fc87 	bl	8001074 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0ab      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	4b57      	ldr	r3, [pc, #348]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ee      	beq.n	8002762 <HAL_RCC_OscConfig+0x37e>
 8002784:	e014      	b.n	80027b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7fe fc75 	bl	8001074 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe fc71 	bl	8001074 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e095      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ee      	bne.n	800278e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d105      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b6:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a47      	ldr	r2, [pc, #284]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8081 	beq.w	80028ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027cc:	4b42      	ldr	r3, [pc, #264]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d061      	beq.n	800289c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d146      	bne.n	800286e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	4b3f      	ldr	r3, [pc, #252]	; (80028e0 <HAL_RCC_OscConfig+0x4fc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fc45 	bl	8001074 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe fc41 	bl	8001074 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e067      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002800:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002814:	d108      	bne.n	8002828 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002816:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	492d      	ldr	r1, [pc, #180]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002828:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a19      	ldr	r1, [r3, #32]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	430b      	orrs	r3, r1
 800283a:	4927      	ldr	r1, [pc, #156]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x4fc>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7fe fc15 	bl	8001074 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284e:	f7fe fc11 	bl	8001074 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e037      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x46a>
 800286c:	e02f      	b.n	80028ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_RCC_OscConfig+0x4fc>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe fbfe 	bl	8001074 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fbfa 	bl	8001074 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e020      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x498>
 800289a:	e018      	b.n	80028ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e013      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42420060 	.word	0x42420060

080028e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0d0      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d910      	bls.n	8002928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b67      	ldr	r3, [pc, #412]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4965      	ldr	r1, [pc, #404]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0b8      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002940:	4b59      	ldr	r3, [pc, #356]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800294a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002958:	4b53      	ldr	r3, [pc, #332]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002962:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b50      	ldr	r3, [pc, #320]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	494d      	ldr	r1, [pc, #308]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d040      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d115      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e07f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e073      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e06b      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4936      	ldr	r1, [pc, #216]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d4:	f7fe fb4e 	bl	8001074 <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7fe fb4a 	bl	8001074 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e053      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d210      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0207 	bic.w	r2, r3, #7
 8002a1a:	4922      	ldr	r1, [pc, #136]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e032      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4916      	ldr	r1, [pc, #88]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	490e      	ldr	r1, [pc, #56]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a72:	f000 f821 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	490a      	ldr	r1, [pc, #40]	; (8002aac <HAL_RCC_ClockConfig+0x1c8>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe faac 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40022000 	.word	0x40022000
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	080037d8 	.word	0x080037d8
 8002ab0:	20000018 	.word	0x20000018
 8002ab4:	2000001c 	.word	0x2000001c

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	b490      	push	{r4, r7}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002abe:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ac0:	1d3c      	adds	r4, r7, #4
 8002ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ac8:	f240 2301 	movw	r3, #513	; 0x201
 8002acc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ae2:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x40>
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x46>
 8002af6:	e02d      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af8:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afa:	623b      	str	r3, [r7, #32]
      break;
 8002afc:	e02d      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d013      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	0c5b      	lsrs	r3, r3, #17
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b36:	fb02 f203 	mul.w	r2, r2, r3
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
 8002b42:	e004      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b48:	fb02 f303 	mul.w	r3, r2, r3
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	623b      	str	r3, [r7, #32]
      break;
 8002b52:	e002      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b56:	623b      	str	r3, [r7, #32]
      break;
 8002b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3728      	adds	r7, #40	; 0x28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc90      	pop	{r4, r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	080037b8 	.word	0x080037b8
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	007a1200 	.word	0x007a1200
 8002b74:	003d0900 	.word	0x003d0900

08002b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b7c:	4b02      	ldr	r3, [pc, #8]	; (8002b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	20000018 	.word	0x20000018

08002b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b90:	f7ff fff2 	bl	8002b78 <HAL_RCC_GetHCLKFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	0adb      	lsrs	r3, r3, #11
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4903      	ldr	r1, [pc, #12]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	080037e8 	.word	0x080037e8

08002bb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <RCC_Delay+0x34>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <RCC_Delay+0x38>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	0a5b      	lsrs	r3, r3, #9
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd0:	bf00      	nop
  }
  while (Delay --);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1e5a      	subs	r2, r3, #1
 8002bd6:	60fa      	str	r2, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f9      	bne.n	8002bd0 <RCC_Delay+0x1c>
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	20000018 	.word	0x20000018
 8002bec:	10624dd3 	.word	0x10624dd3

08002bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d07d      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c10:	4b4f      	ldr	r3, [pc, #316]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10d      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1c:	4b4c      	ldr	r3, [pc, #304]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	4a4b      	ldr	r2, [pc, #300]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c26:	61d3      	str	r3, [r2, #28]
 8002c28:	4b49      	ldr	r3, [pc, #292]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c34:	2301      	movs	r3, #1
 8002c36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d118      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c44:	4b43      	ldr	r3, [pc, #268]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a42      	ldr	r2, [pc, #264]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c50:	f7fe fa10 	bl	8001074 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	e008      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c58:	f7fe fa0c 	bl	8001074 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e06d      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c76:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d02e      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d027      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c94:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c9e:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca4:	4b2c      	ldr	r3, [pc, #176]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002caa:	4a29      	ldr	r2, [pc, #164]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d014      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe f9db 	bl	8001074 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fe f9d7 	bl	8001074 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e036      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ee      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4917      	ldr	r1, [pc, #92]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4a13      	ldr	r2, [pc, #76]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	490b      	ldr	r1, [pc, #44]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4904      	ldr	r1, [pc, #16]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40007000 	.word	0x40007000
 8002d58:	42420440 	.word	0x42420440

08002d5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b08d      	sub	sp, #52	; 0x34
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d64:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002d66:	f107 040c 	add.w	r4, r7, #12
 8002d6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d70:	f240 2301 	movw	r3, #513	; 0x201
 8002d74:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7e:	2300      	movs	r3, #0
 8002d80:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	2300      	movs	r3, #0
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	f200 8091 	bhi.w	8002eba <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d04c      	beq.n	8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d07c      	beq.n	8002e9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002da4:	e089      	b.n	8002eba <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002da6:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002dac:	4b49      	ldr	r3, [pc, #292]	; (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8082 	beq.w	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	0c9b      	lsrs	r3, r3, #18
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dcc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d018      	beq.n	8002e0a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dd8:	4b3e      	ldr	r3, [pc, #248]	; (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c5b      	lsrs	r3, r3, #17
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002de6:	4413      	add	r3, r2
 8002de8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002df8:	4a37      	ldr	r2, [pc, #220]	; (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e08:	e004      	b.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	4a33      	ldr	r2, [pc, #204]	; (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e14:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e20:	d102      	bne.n	8002e28 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e26:	e04a      	b.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e36:	e042      	b.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002e38:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e48:	d108      	bne.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e5a:	e01f      	b.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e66:	d109      	bne.n	8002e7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002e74:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7a:	e00f      	b.n	8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e86:	d11c      	bne.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002e88:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002e94:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e9a:	e012      	b.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002e9c:	e011      	b.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e9e:	f7ff fe75 	bl	8002b8c <HAL_RCC_GetPCLK2Freq>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	0b9b      	lsrs	r3, r3, #14
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002eb8:	e004      	b.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e002      	b.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002ec2:	bf00      	nop
    }
  }
  return (frequency);
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3734      	adds	r7, #52	; 0x34
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd90      	pop	{r4, r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	080037c8 	.word	0x080037c8
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	007a1200 	.word	0x007a1200
 8002edc:	003d0900 	.word	0x003d0900
 8002ee0:	aaaaaaab 	.word	0xaaaaaaab

08002ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e041      	b.n	8002f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fd fe42 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f000 fab8 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d001      	beq.n	8002f9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e02d      	b.n	8002ff8 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a16      	ldr	r2, [pc, #88]	; (8003004 <HAL_TIM_Base_Start+0x80>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_TIM_Base_Start+0x3e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb6:	d004      	beq.n	8002fc2 <HAL_TIM_Base_Start+0x3e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a12      	ldr	r2, [pc, #72]	; (8003008 <HAL_TIM_Base_Start+0x84>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d111      	bne.n	8002fe6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b06      	cmp	r3, #6
 8002fd2:	d010      	beq.n	8002ff6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe4:	e007      	b.n	8002ff6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40012c00 	.word	0x40012c00
 8003008:	40000400 	.word	0x40000400

0800300c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d001      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e035      	b.n	8003090 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a16      	ldr	r2, [pc, #88]	; (800309c <HAL_TIM_Base_Start_IT+0x90>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d009      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x4e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304e:	d004      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x4e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <HAL_TIM_Base_Start_IT+0x94>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d111      	bne.n	800307e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b06      	cmp	r3, #6
 800306a:	d010      	beq.n	800308e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307c:	e007      	b.n	800308e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40000400 	.word	0x40000400

080030a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d122      	bne.n	8003100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d11b      	bne.n	8003100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0202 	mvn.w	r2, #2
 80030d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f9ba 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f9ad 	bl	800344e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f9bc 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d122      	bne.n	8003154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b04      	cmp	r3, #4
 800311a:	d11b      	bne.n	8003154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0204 	mvn.w	r2, #4
 8003124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f990 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f983 	bl	800344e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f992 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b08      	cmp	r3, #8
 8003160:	d122      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b08      	cmp	r3, #8
 800316e:	d11b      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0208 	mvn.w	r2, #8
 8003178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2204      	movs	r2, #4
 800317e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f966 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 8003194:	e005      	b.n	80031a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f959 	bl	800344e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f968 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b10      	cmp	r3, #16
 80031b4:	d122      	bne.n	80031fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d11b      	bne.n	80031fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0210 	mvn.w	r2, #16
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2208      	movs	r2, #8
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f93c 	bl	8003460 <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f92f 	bl	800344e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f93e 	bl	8003472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d10e      	bne.n	8003228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0201 	mvn.w	r2, #1
 8003220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f90a 	bl	800343c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003232:	2b80      	cmp	r3, #128	; 0x80
 8003234:	d10e      	bne.n	8003254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003240:	2b80      	cmp	r3, #128	; 0x80
 8003242:	d107      	bne.n	8003254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800324c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fa71 	bl	8003736 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d10e      	bne.n	8003280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d107      	bne.n	8003280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f902 	bl	8003484 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b20      	cmp	r3, #32
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b20      	cmp	r3, #32
 800329a:	d107      	bne.n	80032ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0220 	mvn.w	r2, #32
 80032a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fa3c 	bl	8003724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_TIM_ConfigClockSource+0x18>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e0b3      	b.n	8003434 <HAL_TIM_ConfigClockSource+0x180>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003304:	d03e      	beq.n	8003384 <HAL_TIM_ConfigClockSource+0xd0>
 8003306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330a:	f200 8087 	bhi.w	800341c <HAL_TIM_ConfigClockSource+0x168>
 800330e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003312:	f000 8085 	beq.w	8003420 <HAL_TIM_ConfigClockSource+0x16c>
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	d87f      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x168>
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d01a      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0xa2>
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d87b      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x168>
 8003324:	2b60      	cmp	r3, #96	; 0x60
 8003326:	d050      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x116>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d877      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x168>
 800332c:	2b50      	cmp	r3, #80	; 0x50
 800332e:	d03c      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xf6>
 8003330:	2b50      	cmp	r3, #80	; 0x50
 8003332:	d873      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x168>
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d058      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x136>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d86f      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x168>
 800333c:	2b30      	cmp	r3, #48	; 0x30
 800333e:	d064      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x156>
 8003340:	2b30      	cmp	r3, #48	; 0x30
 8003342:	d86b      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x168>
 8003344:	2b20      	cmp	r3, #32
 8003346:	d060      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x156>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d867      	bhi.n	800341c <HAL_TIM_ConfigClockSource+0x168>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d05c      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x156>
 8003350:	2b10      	cmp	r3, #16
 8003352:	d05a      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003354:	e062      	b.n	800341c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f000 f966 	bl	8003636 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003378:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	609a      	str	r2, [r3, #8]
      break;
 8003382:	e04e      	b.n	8003422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6899      	ldr	r1, [r3, #8]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f000 f94f 	bl	8003636 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a6:	609a      	str	r2, [r3, #8]
      break;
 80033a8:	e03b      	b.n	8003422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f000 f8c6 	bl	8003548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2150      	movs	r1, #80	; 0x50
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f91d 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80033c8:	e02b      	b.n	8003422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f000 f8e4 	bl	80035a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2160      	movs	r1, #96	; 0x60
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f90d 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 80033e8:	e01b      	b.n	8003422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f000 f8a6 	bl	8003548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f8fd 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 8003408:	e00b      	b.n	8003422 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f000 f8f4 	bl	8003602 <TIM_ITRx_SetConfig>
        break;
 800341a:	e002      	b.n	8003422 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800341c:	bf00      	nop
 800341e:	e000      	b.n	8003422 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003420:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
	...

08003498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a25      	ldr	r2, [pc, #148]	; (8003540 <TIM_Base_SetConfig+0xa8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d007      	beq.n	80034c0 <TIM_Base_SetConfig+0x28>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0x28>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a22      	ldr	r2, [pc, #136]	; (8003544 <TIM_Base_SetConfig+0xac>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d108      	bne.n	80034d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <TIM_Base_SetConfig+0xa8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <TIM_Base_SetConfig+0x52>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d003      	beq.n	80034ea <TIM_Base_SetConfig+0x52>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a17      	ldr	r2, [pc, #92]	; (8003544 <TIM_Base_SetConfig+0xac>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d108      	bne.n	80034fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <TIM_Base_SetConfig+0xa8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d103      	bne.n	8003530 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	615a      	str	r2, [r3, #20]
}
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400

08003548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0201 	bic.w	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 030a 	bic.w	r3, r3, #10
 8003584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f023 0210 	bic.w	r2, r3, #16
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	031b      	lsls	r3, r3, #12
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	621a      	str	r2, [r3, #32]
}
 80035f8:	bf00      	nop
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	f043 0307 	orr.w	r3, r3, #7
 8003624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003636:	b480      	push	{r7}
 8003638:	b087      	sub	sp, #28
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	021a      	lsls	r2, r3, #8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	431a      	orrs	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	609a      	str	r2, [r3, #8]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e041      	b.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a14      	ldr	r2, [pc, #80]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d8:	d004      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a10      	ldr	r2, [pc, #64]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d10c      	bne.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40000400 	.word	0x40000400

08003724 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <__libc_init_array>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	2600      	movs	r6, #0
 800374c:	4d0c      	ldr	r5, [pc, #48]	; (8003780 <__libc_init_array+0x38>)
 800374e:	4c0d      	ldr	r4, [pc, #52]	; (8003784 <__libc_init_array+0x3c>)
 8003750:	1b64      	subs	r4, r4, r5
 8003752:	10a4      	asrs	r4, r4, #2
 8003754:	42a6      	cmp	r6, r4
 8003756:	d109      	bne.n	800376c <__libc_init_array+0x24>
 8003758:	f000 f822 	bl	80037a0 <_init>
 800375c:	2600      	movs	r6, #0
 800375e:	4d0a      	ldr	r5, [pc, #40]	; (8003788 <__libc_init_array+0x40>)
 8003760:	4c0a      	ldr	r4, [pc, #40]	; (800378c <__libc_init_array+0x44>)
 8003762:	1b64      	subs	r4, r4, r5
 8003764:	10a4      	asrs	r4, r4, #2
 8003766:	42a6      	cmp	r6, r4
 8003768:	d105      	bne.n	8003776 <__libc_init_array+0x2e>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003770:	4798      	blx	r3
 8003772:	3601      	adds	r6, #1
 8003774:	e7ee      	b.n	8003754 <__libc_init_array+0xc>
 8003776:	f855 3b04 	ldr.w	r3, [r5], #4
 800377a:	4798      	blx	r3
 800377c:	3601      	adds	r6, #1
 800377e:	e7f2      	b.n	8003766 <__libc_init_array+0x1e>
 8003780:	080037f0 	.word	0x080037f0
 8003784:	080037f0 	.word	0x080037f0
 8003788:	080037f0 	.word	0x080037f0
 800378c:	080037f4 	.word	0x080037f4

08003790 <memset>:
 8003790:	4603      	mov	r3, r0
 8003792:	4402      	add	r2, r0
 8003794:	4293      	cmp	r3, r2
 8003796:	d100      	bne.n	800379a <memset+0xa>
 8003798:	4770      	bx	lr
 800379a:	f803 1b01 	strb.w	r1, [r3], #1
 800379e:	e7f9      	b.n	8003794 <memset+0x4>

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
