
ecu_rework_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000392c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003a38  08003a38  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab0  08003ab0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003ab0  08003ab0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ab0  08003ab0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000024  08003adc  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003adc  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d818  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002191  00000000  00000000  0002d865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002f9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00030708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001787b  00000000  00000000  00031310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9bb  00000000  00000000  00048b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089eff  00000000  00000000  00056546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003614  00000000  00000000  000e0498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a20 	.word	0x08003a20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08003a20 	.word	0x08003a20

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fe96 	bl	8001244 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f81a 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f982 	bl	8000824 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000520:	f000 f872 	bl	8000608 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000524:	f000 f930 	bl	8000788 <MX_TIM3_Init>
  MX_CAN_Init();
 8000528:	f000 f8ac 	bl	8000684 <MX_CAN_Init>
  MX_TIM2_Init();
 800052c:	f000 f8e0 	bl	80006f0 <MX_TIM2_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN 2 */
  __disable_irq();
  SM_Init();
 8000534:	f000 fb96 	bl	8000c64 <SM_Init>
  SUPP_InitAndStart();
 8000538:	f000 f9f0 	bl	800091c <SUPP_InitAndStart>
  HAL_CAN_Start(&hcan);
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <main+0x3c>)
 800053e:	f001 fcbb 	bl	8001eb8 <HAL_CAN_Start>
  __ASM volatile ("cpsie i" : : : "memory");
 8000542:	b662      	cpsie	i
}
 8000544:	bf00      	nop

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	  SM_Update();
 8000546:	f000 fbd1 	bl	8000cec <SM_Update>
 800054a:	e7fc      	b.n	8000546 <main+0x36>
 800054c:	200000ac 	.word	0x200000ac

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055a:	2228      	movs	r2, #40	; 0x28
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fa56 	bl	8003a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800059c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 f85c 	bl	8002664 <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b2:	f000 f9d3 	bl	800095c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2102      	movs	r1, #2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fac6 	bl	8002b64 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005de:	f000 f9bd 	bl	800095c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005e2:	2302      	movs	r3, #2
 80005e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fc3e 	bl	8002e70 <HAL_RCCEx_PeriphCLKConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005fa:	f000 f9af 	bl	800095c <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	; 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_ADC1_Init+0x74>)
 800061a:	4a19      	ldr	r2, [pc, #100]	; (8000680 <MX_ADC1_Init+0x78>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_ADC1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_ADC1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_ADC1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_ADC1_Init+0x74>)
 8000632:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000636:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_ADC1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_ADC1_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_ADC1_Init+0x74>)
 8000646:	f000 fe83 	bl	8001350 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 f984 	bl	800095c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000654:	2309      	movs	r3, #9
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000658:	2301      	movs	r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800065c:	2307      	movs	r3, #7
 800065e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_ADC1_Init+0x74>)
 8000666:	f001 f8e3 	bl	8001830 <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000670:	f000 f974 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000011c 	.word	0x2000011c
 8000680:	40012400 	.word	0x40012400

08000684 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_CAN_Init+0x64>)
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <MX_CAN_Init+0x68>)
 800068c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_CAN_Init+0x64>)
 8000690:	2212      	movs	r2, #18
 8000692:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_CAN_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_CAN_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_CAN_Init+0x64>)
 80006a2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80006a6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_CAN_Init+0x64>)
 80006aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_CAN_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_CAN_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_CAN_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_CAN_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_CAN_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_CAN_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_CAN_Init+0x64>)
 80006d6:	f001 faf4 	bl	8001cc2 <HAL_CAN_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80006e0:	f000 f93c 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000ac 	.word	0x200000ac
 80006ec:	40006400 	.word	0x40006400

080006f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_TIM2_Init+0x94>)
 800070e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000712:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_TIM2_Init+0x94>)
 8000716:	2247      	movs	r2, #71	; 0x47
 8000718:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_TIM2_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_TIM2_Init+0x94>)
 8000722:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000726:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_TIM2_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_TIM2_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000734:	4813      	ldr	r0, [pc, #76]	; (8000784 <MX_TIM2_Init+0x94>)
 8000736:	f002 fd15 	bl	8003164 <HAL_TIM_Base_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000740:	f000 f90c 	bl	800095c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	4619      	mov	r1, r3
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_TIM2_Init+0x94>)
 8000752:	f002 feef 	bl	8003534 <HAL_TIM_ConfigClockSource>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800075c:	f000 f8fe 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000760:	2320      	movs	r3, #32
 8000762:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_TIM2_Init+0x94>)
 800076e:	f003 f8c1 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000778:	f000 f8f0 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000014c 	.word	0x2000014c

08000788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_TIM3_Init+0x94>)
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <MX_TIM3_Init+0x98>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_TIM3_Init+0x94>)
 80007ac:	2247      	movs	r2, #71	; 0x47
 80007ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_TIM3_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_TIM3_Init+0x94>)
 80007b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80007bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_TIM3_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_TIM3_Init+0x94>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007ca:	4814      	ldr	r0, [pc, #80]	; (800081c <MX_TIM3_Init+0x94>)
 80007cc:	f002 fcca 	bl	8003164 <HAL_TIM_Base_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f8c1 	bl	800095c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	4619      	mov	r1, r3
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_TIM3_Init+0x94>)
 80007e8:	f002 fea4 	bl	8003534 <HAL_TIM_ConfigClockSource>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f000 f8b3 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007f6:	2320      	movs	r3, #32
 80007f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80007fa:	2380      	movs	r3, #128	; 0x80
 80007fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_TIM3_Init+0x94>)
 8000804:	f003 f876 	bl	80038f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800080e:	f000 f8a5 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000d4 	.word	0x200000d4
 8000820:	40000400 	.word	0x40000400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000838:	4b35      	ldr	r3, [pc, #212]	; (8000910 <MX_GPIO_Init+0xec>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a34      	ldr	r2, [pc, #208]	; (8000910 <MX_GPIO_Init+0xec>)
 800083e:	f043 0320 	orr.w	r3, r3, #32
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <MX_GPIO_Init+0xec>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MX_GPIO_Init+0xec>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <MX_GPIO_Init+0xec>)
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <MX_GPIO_Init+0xec>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0304 	and.w	r3, r3, #4
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_GPIO_Init+0xec>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a28      	ldr	r2, [pc, #160]	; (8000910 <MX_GPIO_Init+0xec>)
 800086e:	f043 0308 	orr.w	r3, r3, #8
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_GPIO_Init+0xec>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0308 	and.w	r3, r3, #8
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_LOCK_OUT_Pin|FAN_OUT1_Pin|HLIM_OUT_Pin|PC_OUT_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8000886:	4823      	ldr	r0, [pc, #140]	; (8000914 <MX_GPIO_Init+0xf0>)
 8000888:	f001 fed3 	bl	8002632 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_OUT2_Pin|FLT_OUT_Pin|LLIM_OUT_Pin|NEG_OUT_Pin
 800088c:	2200      	movs	r2, #0
 800088e:	f247 31c0 	movw	r1, #29632	; 0x73c0
 8000892:	4821      	ldr	r0, [pc, #132]	; (8000918 <MX_GPIO_Init+0xf4>)
 8000894:	f001 fecd 	bl	8002632 <HAL_GPIO_WritePin>
                          |DCDC_OUT_Pin|SWAP_OUT_Pin|SUPP_LOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_LOCK_OUT_Pin FAN_OUT1_Pin HLIM_OUT_Pin PC_OUT_Pin */
  GPIO_InitStruct.Pin = SW_LOCK_OUT_Pin|FAN_OUT1_Pin|HLIM_OUT_Pin|PC_OUT_Pin;
 8000898:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800089c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4619      	mov	r1, r3
 80008b0:	4818      	ldr	r0, [pc, #96]	; (8000914 <MX_GPIO_Init+0xf0>)
 80008b2:	f001 fd2d 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : HLIM_IN_Pin LLIM_IN_Pin FLT_IN_Pin */
  GPIO_InitStruct.Pin = HLIM_IN_Pin|LLIM_IN_Pin|FLT_IN_Pin;
 80008b6:	23e0      	movs	r3, #224	; 0xe0
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_GPIO_Init+0xf0>)
 80008ca:	f001 fd21 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_OUT2_Pin FLT_OUT_Pin LLIM_OUT_Pin NEG_OUT_Pin
                           DCDC_OUT_Pin SWAP_OUT_Pin SUPP_LOW_Pin */
  GPIO_InitStruct.Pin = FAN_OUT2_Pin|FLT_OUT_Pin|LLIM_OUT_Pin|NEG_OUT_Pin
 80008ce:	f247 33c0 	movw	r3, #29632	; 0x73c0
 80008d2:	613b      	str	r3, [r7, #16]
                          |DCDC_OUT_Pin|SWAP_OUT_Pin|SUPP_LOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_GPIO_Init+0xf4>)
 80008e8:	f001 fd12 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESTOP_IN_Pin */
  GPIO_InitStruct.Pin = ESTOP_IN_Pin;
 80008ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ESTOP_IN_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_GPIO_Init+0xf4>)
 8000902:	f001 fd05 	bl	8002310 <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000
 8000914:	40010800 	.word	0x40010800
 8000918:	40010c00 	.word	0x40010c00

0800091c <SUPP_InitAndStart>:

/* USER CODE BEGIN 4 */
static void SUPP_InitAndStart(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	if (HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1))
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <SUPP_InitAndStart+0x38>)
 8000922:	f001 f919 	bl	8001b58 <HAL_ADCEx_Calibration_Start>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SUPP_InitAndStart+0x14>
	{
		Error_Handler();
 800092c:	f000 f816 	bl	800095c <Error_Handler>
	}

	if (HAL_OK != HAL_ADC_Start_IT(&hadc1))
 8000930:	4808      	ldr	r0, [pc, #32]	; (8000954 <SUPP_InitAndStart+0x38>)
 8000932:	f000 fde5 	bl	8001500 <HAL_ADC_Start_IT>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SUPP_InitAndStart+0x24>
	{
		Error_Handler();
 800093c:	f000 f80e 	bl	800095c <Error_Handler>
	}

	if (HAL_OK != HAL_TIM_Base_Start(&htim3))
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <SUPP_InitAndStart+0x3c>)
 8000942:	f002 fc5f 	bl	8003204 <HAL_TIM_Base_Start>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SUPP_InitAndStart+0x34>
	{
		Error_Handler();
 800094c:	f000 f806 	bl	800095c <Error_Handler>
	}

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000011c 	.word	0x2000011c
 8000958:	200000d4 	.word	0x200000d4

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <sm_State1Handler>:
//
// state1 handler function: sets fault and low power supply indication
//

static void sm_State1Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000972:	4807      	ldr	r0, [pc, #28]	; (8000990 <sm_State1Handler+0x28>)
 8000974:	f001 fe5d 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SUPP_LOW_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <sm_State1Handler+0x28>)
 8000980:	f001 fe57 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 8000984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000988:	f000 fcbe 	bl	8001308 <HAL_Delay>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40010c00 	.word	0x40010c00

08000994 <sm_State2Handler>:

//
// state2 handler function: start precharge and close negative terminal
//
static void sm_State2Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <sm_State2Handler+0x28>)
 80009a0:	f001 fe47 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NEG_OUT_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <sm_State2Handler+0x2c>)
 80009aa:	f001 fe42 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 80009ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b2:	f000 fca9 	bl	8001308 <HAL_Delay>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40010800 	.word	0x40010800
 80009c0:	40010c00 	.word	0x40010c00

080009c4 <sm_State3Handler>:

//
// state3 handler function: close dcdc and wait till it stablizes
//
static void sm_State3Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, DCDC_OUT_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <sm_State3Handler+0x1c>)
 80009ce:	f001 fe30 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 80009d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d6:	f000 fc97 	bl	8001308 <HAL_Delay>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <sm_State4Handler>:

//
// state4 handler function: swap power source from aux battery to dcdc
//
static void sm_State4Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SWAP_OUT_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ee:	4804      	ldr	r0, [pc, #16]	; (8000a00 <sm_State4Handler+0x1c>)
 80009f0:	f001 fe1f 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 80009f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f8:	f000 fc86 	bl	8001308 <HAL_Delay>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40010c00 	.word	0x40010c00

08000a04 <sm_State5Handler>:

//
// state5 handler function: close FAN power mosfet
//
static void sm_State5Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, FAN_OUT1_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <sm_State5Handler+0x28>)
 8000a0e:	f001 fe10 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, FAN_OUT2_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <sm_State5Handler+0x2c>)
 8000a1a:	f001 fe0a 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 8000a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a22:	f000 fc71 	bl	8001308 <HAL_Delay>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	40010c00 	.word	0x40010c00

08000a34 <sm_State6Handler>:

//
// state6 handler function: close llim to activate motor
//
static void sm_State6Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <sm_State6Handler+0x1c>)
 8000a40:	f001 fdf7 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 8000a44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a48:	f000 fc5e 	bl	8001308 <HAL_Delay>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40010c00 	.word	0x40010c00

08000a54 <sm_State7Handler>:

//
// state7 handler function: end precharge sequence
//
static void sm_State7Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a5e:	480a      	ldr	r0, [pc, #40]	; (8000a88 <sm_State7Handler+0x34>)
 8000a60:	f001 fde7 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6a:	4808      	ldr	r0, [pc, #32]	; (8000a8c <sm_State7Handler+0x38>)
 8000a6c:	f001 fde1 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SUPP_LOW_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <sm_State7Handler+0x38>)
 8000a78:	f001 fddb 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_Delay(SM_STATE_DELAY_TIME);
 8000a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a80:	f000 fc42 	bl	8001308 <HAL_Delay>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40010800 	.word	0x40010800
 8000a8c:	40010c00 	.word	0x40010c00

08000a90 <sm_State8Handler>:

//
// state8 handler function: close hlim for mppt
//
static void sm_State8Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2110      	movs	r1, #16
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <sm_State8Handler+0x20>)
 8000a9a:	f001 fdca 	bl	8002632 <HAL_GPIO_WritePin>
	//start timer to check for hlim and llim inputs
	HAL_TIM_Base_Start_IT(&htim2);
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <sm_State8Handler+0x24>)
 8000aa0:	f002 fbf4 	bl	800328c <HAL_TIM_Base_Start_IT>
	HAL_Delay(SM_STATE_DELAY_TIME);
 8000aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa8:	f000 fc2e 	bl	8001308 <HAL_Delay>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	2000014c 	.word	0x2000014c

08000ab8 <sm_State9Handler>:

//
// state9 handler function: adc reading and can message handling
//
static void sm_State9Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	static uint16_t reading = 0u;
	static uint8_t aTxData[8] = {0u};
	static uint32_t txMailBox;

	//read ADC value and send via can
	reading = SUPP_GetAdcVal();
 8000abc:	f000 fb8a 	bl	80011d4 <SUPP_GetAdcVal>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <sm_State9Handler+0x38>)
 8000ac6:	801a      	strh	r2, [r3, #0]
	aTxData[0u] =  reading & SM_ADCVAL_LOWER_MASK;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <sm_State9Handler+0x38>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <sm_State9Handler+0x3c>)
 8000ad0:	701a      	strb	r2, [r3, #0]
	aTxData[1u] =  (reading & SM_ADCVAL_UPPER_MASK) >> SM_ADCVAL_SHIFT_VAL;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <sm_State9Handler+0x38>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	0a1b      	lsrs	r3, r3, #8
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <sm_State9Handler+0x3c>)
 8000ade:	705a      	strb	r2, [r3, #1]
	HAL_CAN_AddTxMessage(&hcan, &zTxHeader, aTxData, &txMailBox);
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <sm_State9Handler+0x40>)
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <sm_State9Handler+0x3c>)
 8000ae4:	4905      	ldr	r1, [pc, #20]	; (8000afc <sm_State9Handler+0x44>)
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <sm_State9Handler+0x48>)
 8000ae8:	f001 fa2a 	bl	8001f40 <HAL_CAN_AddTxMessage>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000006e 	.word	0x2000006e
 8000af4:	20000070 	.word	0x20000070
 8000af8:	20000078 	.word	0x20000078
 8000afc:	20000000 	.word	0x20000000
 8000b00:	200000ac 	.word	0x200000ac

08000b04 <sm_State10Handler>:

//
// State10: LLIM High Event handling
//
static void sm_State10Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0e:	4811      	ldr	r0, [pc, #68]	; (8000b54 <sm_State10Handler+0x50>)
 8000b10:	f001 fd8f 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_Delay(SM_PC_DELAY_TIME_1);
 8000b14:	f241 1094 	movw	r0, #4500	; 0x1194
 8000b18:	f000 fbf6 	bl	8001308 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <sm_State10Handler+0x54>)
 8000b24:	f001 fd85 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_Delay(SM_PC_DELAY_TIME_1);
 8000b28:	f241 1094 	movw	r0, #4500	; 0x1194
 8000b2c:	f000 fbec 	bl	8001308 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b36:	4807      	ldr	r0, [pc, #28]	; (8000b54 <sm_State10Handler+0x50>)
 8000b38:	f001 fd7b 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_Delay(SM_PC_DELAY_TIME_2);
 8000b3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b40:	f000 fbe2 	bl	8001308 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <sm_State10Handler+0x54>)
 8000b4c:	f001 fd71 	bl	8002632 <HAL_GPIO_WritePin>

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40010c00 	.word	0x40010c00
 8000b58:	40010800 	.word	0x40010800

08000b5c <sm_State11Handler>:

//
// state10 handler function: open all terminals and indicate fault in a forever loop
//
static void sm_State11Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
	__disable_irq();
	HAL_GPIO_WritePin(GPIOB, SWAP_OUT_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6a:	4819      	ldr	r0, [pc, #100]	; (8000bd0 <sm_State11Handler+0x74>)
 8000b6c:	f001 fd61 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2110      	movs	r1, #16
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <sm_State11Handler+0x78>)
 8000b76:	f001 fd5c 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LLIM_OUT_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b80:	4813      	ldr	r0, [pc, #76]	; (8000bd0 <sm_State11Handler+0x74>)
 8000b82:	f001 fd56 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PC_OUT_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <sm_State11Handler+0x78>)
 8000b8e:	f001 fd50 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NEG_OUT_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <sm_State11Handler+0x74>)
 8000b98:	f001 fd4b 	bl	8002632 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DCDC_OUT_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <sm_State11Handler+0x74>)
 8000ba2:	f001 fd46 	bl	8002632 <HAL_GPIO_WritePin>

	//toggle fault indicator led
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <sm_State11Handler+0x74>)
 8000bae:	f001 fd40 	bl	8002632 <HAL_GPIO_WritePin>
		HAL_Delay(SM_STATE_DELAY_TIME);
 8000bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb6:	f000 fba7 	bl	8001308 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <sm_State11Handler+0x74>)
 8000bc2:	f001 fd36 	bl	8002632 <HAL_GPIO_WritePin>
		HAL_Delay(SM_STATE_DELAY_TIME);
 8000bc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bca:	f000 fb9d 	bl	8001308 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, FLT_OUT_Pin, GPIO_PIN_SET);
 8000bce:	e7ea      	b.n	8000ba6 <sm_State11Handler+0x4a>
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	40010800 	.word	0x40010800

08000bd8 <sm_FltCheck>:

//
// fault-checking function: goes into fault based on flt_in and estop_in signal
//
static void sm_FltCheck(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	static uint8_t faultCounter = 0u;
	GPIO_PinState st1 = HAL_GPIO_ReadPin(GPIOA, FLT_IN_Pin);
 8000bde:	2180      	movs	r1, #128	; 0x80
 8000be0:	4814      	ldr	r0, [pc, #80]	; (8000c34 <sm_FltCheck+0x5c>)
 8000be2:	f001 fd0f 	bl	8002604 <HAL_GPIO_ReadPin>
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState st2 =	HAL_GPIO_ReadPin(GPIOB, ESTOP_IN_Pin);
 8000bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bee:	4812      	ldr	r0, [pc, #72]	; (8000c38 <sm_FltCheck+0x60>)
 8000bf0:	f001 fd08 	bl	8002604 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	71bb      	strb	r3, [r7, #6]

	//something's wrong when estop_in or flt_in is pulled to gnd
	if (st1 == GPIO_PIN_RESET || st2 == GPIO_PIN_RESET)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <sm_FltCheck+0x2c>
 8000bfe:	79bb      	ldrb	r3, [r7, #6]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10e      	bne.n	8000c22 <sm_FltCheck+0x4a>
	{
		//do some de-bouncing, give it three chances
		if(faultCounter >= SM_FLT_MAX_COUNTER_VAL)
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <sm_FltCheck+0x64>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d903      	bls.n	8000c14 <sm_FltCheck+0x3c>
		{
			SM_SetStatusFlag(SM_STATUS_FLT_FLAG);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 f8a7 	bl	8000d60 <SM_SetStatusFlag>
		if(faultCounter >= SM_FLT_MAX_COUNTER_VAL)
 8000c12:	e00a      	b.n	8000c2a <sm_FltCheck+0x52>
		}
		else
		{
			faultCounter++;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <sm_FltCheck+0x64>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <sm_FltCheck+0x64>)
 8000c1e:	701a      	strb	r2, [r3, #0]
		if(faultCounter >= SM_FLT_MAX_COUNTER_VAL)
 8000c20:	e003      	b.n	8000c2a <sm_FltCheck+0x52>
		}
	}
	else
	{
		faultCounter = 0u;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <sm_FltCheck+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
	}
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40010800 	.word	0x40010800
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	2000007c 	.word	0x2000007c

08000c40 <sm_IsStatusFlagged>:

//
// Checks whether a status (FLT, HLIM High, LLIM High) has been flagged
//
static uint8_t sm_IsStatusFlagged(uint8_t flag)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	return (flag & sm_statusFlags);
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <sm_IsStatusFlagged+0x20>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4013      	ands	r3, r2
 8000c54:	b2db      	uxtb	r3, r3
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	2000006d 	.word	0x2000006d

08000c64 <SM_Init>:

//
// Initialize state machine module
//
void SM_Init(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
	sm_stateVal = (uint8_t)SM_eState1;
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <SM_Init+0x54>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
	sm_pfaStateHandler[SM_eState1] = &sm_State1Handler;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SM_Init+0x58>)
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <SM_Init+0x5c>)
 8000c72:	601a      	str	r2, [r3, #0]
	sm_pfaStateHandler[SM_eState2] = &sm_State2Handler;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <SM_Init+0x58>)
 8000c76:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <SM_Init+0x60>)
 8000c78:	605a      	str	r2, [r3, #4]
	sm_pfaStateHandler[SM_eState3] = &sm_State3Handler;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <SM_Init+0x58>)
 8000c7c:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <SM_Init+0x64>)
 8000c7e:	609a      	str	r2, [r3, #8]
	sm_pfaStateHandler[SM_eState4] = &sm_State4Handler;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <SM_Init+0x58>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <SM_Init+0x68>)
 8000c84:	60da      	str	r2, [r3, #12]
	sm_pfaStateHandler[SM_eState5] = &sm_State5Handler;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <SM_Init+0x58>)
 8000c88:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <SM_Init+0x6c>)
 8000c8a:	611a      	str	r2, [r3, #16]
	sm_pfaStateHandler[SM_eState6] = &sm_State6Handler;
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <SM_Init+0x58>)
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <SM_Init+0x70>)
 8000c90:	615a      	str	r2, [r3, #20]
	sm_pfaStateHandler[SM_eState7] = &sm_State7Handler;
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <SM_Init+0x58>)
 8000c94:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <SM_Init+0x74>)
 8000c96:	619a      	str	r2, [r3, #24]
	sm_pfaStateHandler[SM_eState8] = &sm_State8Handler;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SM_Init+0x58>)
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <SM_Init+0x78>)
 8000c9c:	61da      	str	r2, [r3, #28]
	sm_pfaStateHandler[SM_eState9] = &sm_State9Handler;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <SM_Init+0x58>)
 8000ca0:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <SM_Init+0x7c>)
 8000ca2:	621a      	str	r2, [r3, #32]
	sm_pfaStateHandler[SM_eState10] = &sm_State10Handler;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SM_Init+0x58>)
 8000ca6:	4a0f      	ldr	r2, [pc, #60]	; (8000ce4 <SM_Init+0x80>)
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
	sm_pfaStateHandler[SM_eState11] = &sm_State11Handler;
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SM_Init+0x58>)
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <SM_Init+0x84>)
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	2000006c 	.word	0x2000006c
 8000cbc:	20000040 	.word	0x20000040
 8000cc0:	08000969 	.word	0x08000969
 8000cc4:	08000995 	.word	0x08000995
 8000cc8:	080009c5 	.word	0x080009c5
 8000ccc:	080009e5 	.word	0x080009e5
 8000cd0:	08000a05 	.word	0x08000a05
 8000cd4:	08000a35 	.word	0x08000a35
 8000cd8:	08000a55 	.word	0x08000a55
 8000cdc:	08000a91 	.word	0x08000a91
 8000ce0:	08000ab9 	.word	0x08000ab9
 8000ce4:	08000b05 	.word	0x08000b05
 8000ce8:	08000b5d 	.word	0x08000b5d

08000cec <SM_Update>:

//
// State machine update states
//
void SM_Update(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	//function pointer array for storing the routines
	(void)sm_pfaStateHandler[sm_stateVal]();
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <SM_Update+0x6c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <SM_Update+0x70>)
 8000cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfe:	4798      	blx	r3
	sm_stateVal++;
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <SM_Update+0x6c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	3301      	adds	r3, #1
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <SM_Update+0x6c>)
 8000d0c:	701a      	strb	r2, [r3, #0]

	//hold the state to state 9, or come back from state 10 to state 9
	//in normal scenario (without fault or llim_in = high), stay in state 9
	if (SM_eState9 == sm_stateVal || SM_eState10 == sm_stateVal)
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <SM_Update+0x6c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d004      	beq.n	8000d22 <SM_Update+0x36>
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <SM_Update+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b09      	cmp	r3, #9
 8000d20:	d102      	bne.n	8000d28 <SM_Update+0x3c>
	{
		sm_stateVal = SM_eState9;
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <SM_Update+0x6c>)
 8000d24:	2208      	movs	r2, #8
 8000d26:	701a      	strb	r2, [r3, #0]
	}

	//if there is fault, move to state 11
	if(sm_IsStatusFlagged(SM_STATUS_FLT_FLAG))
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff ff89 	bl	8000c40 <sm_IsStatusFlagged>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <SM_Update+0x50>
	{
		sm_stateVal = SM_eState11;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <SM_Update+0x6c>)
 8000d36:	220a      	movs	r2, #10
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e008      	b.n	8000d4e <SM_Update+0x62>
	}
	//if llim_in goes up high, move to state 10
	else if (sm_IsStatusFlagged(SM_STATUS_LLIM_HIGH_FLAG))
 8000d3c:	2004      	movs	r0, #4
 8000d3e:	f7ff ff7f 	bl	8000c40 <sm_IsStatusFlagged>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <SM_Update+0x62>
	{
		sm_stateVal = SM_eState10;
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <SM_Update+0x6c>)
 8000d4a:	2209      	movs	r2, #9
 8000d4c:	701a      	strb	r2, [r3, #0]
	else
	{
		//Do nothing
	}

	sm_FltCheck();
 8000d4e:	f7ff ff43 	bl	8000bd8 <sm_FltCheck>
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000006c 	.word	0x2000006c
 8000d5c:	20000040 	.word	0x20000040

08000d60 <SM_SetStatusFlag>:

void SM_SetStatusFlag(uint8_t flag)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	sm_statusFlags |= flag;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SM_SetStatusFlag+0x24>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <SM_SetStatusFlag+0x24>)
 8000d78:	701a      	strb	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	2000006d 	.word	0x2000006d

08000d88 <SM_ClearStatusFlag>:

void SM_ClearStatusFlag(uint8_t flag)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	sm_statusFlags &= ~flag;
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	b25a      	sxtb	r2, r3
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <SM_ClearStatusFlag+0x30>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	4013      	ands	r3, r2
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <SM_ClearStatusFlag+0x30>)
 8000daa:	701a      	strb	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000006d 	.word	0x2000006d

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_MspInit+0x5c>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <HAL_MspInit+0x5c>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6193      	str	r3, [r2, #24]
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_MspInit+0x5c>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_MspInit+0x5c>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_MspInit+0x5c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_MspInit+0x5c>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_MspInit+0x60>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_MspInit+0x60>)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000

08000e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_ADC_MspInit+0x7c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d129      	bne.n	8000e94 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_ADC_MspInit+0x80>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <HAL_ADC_MspInit+0x80>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_ADC_MspInit+0x80>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_ADC_MspInit+0x80>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_ADC_MspInit+0x80>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_ADC_MspInit+0x80>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e70:	2302      	movs	r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e74:	2303      	movs	r3, #3
 8000e76:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <HAL_ADC_MspInit+0x84>)
 8000e80:	f001 fa46 	bl	8002310 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2103      	movs	r1, #3
 8000e88:	2012      	movs	r0, #18
 8000e8a:	f001 fa0a 	bl	80022a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e8e:	2012      	movs	r0, #18
 8000e90:	f001 fa23 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40012400 	.word	0x40012400
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010c00 	.word	0x40010c00

08000ea8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <HAL_CAN_MspInit+0x8c>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d131      	bne.n	8000f2c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	61d3      	str	r3, [r2, #28]
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ef8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000efc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <HAL_CAN_MspInit+0x94>)
 8000f0e:	f001 f9ff 	bl	8002310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_CAN_MspInit+0x94>)
 8000f28:	f001 f9f2 	bl	8002310 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40006400 	.word	0x40006400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010800 	.word	0x40010800

08000f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f50:	d114      	bne.n	8000f7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	201c      	movs	r0, #28
 8000f70:	f001 f997 	bl	80022a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f74:	201c      	movs	r0, #28
 8000f76:	f001 f9b0 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f7a:	e010      	b.n	8000f9e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_TIM_Base_MspInit+0x6c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10b      	bne.n	8000f9e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_TIM_Base_MspInit+0x68>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40000400 	.word	0x40000400

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff6:	f000 f96b 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  SUPP_UpdateAdcFilter(HAL_ADC_GetValue(&hadc1));
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <ADC1_2_IRQHandler+0x20>)
 8001006:	f000 fb31 	bl	800166c <HAL_ADC_GetValue>
 800100a:	4603      	mov	r3, r0
 800100c:	b29b      	uxth	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f85c 	bl	80010cc <SUPP_UpdateAdcFilter>
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <ADC1_2_IRQHandler+0x20>)
 8001016:	f000 fb35 	bl	8001684 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000011c 	.word	0x2000011c

08001024 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  GPIO_PinState hlimSt = HAL_GPIO_ReadPin(GPIOA, HLIM_IN_Pin);
 800102a:	2120      	movs	r1, #32
 800102c:	4824      	ldr	r0, [pc, #144]	; (80010c0 <TIM2_IRQHandler+0x9c>)
 800102e:	f001 fae9 	bl	8002604 <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  GPIO_PinState llimSt = HAL_GPIO_ReadPin(GPIOA, LLIM_IN_Pin);
 8001036:	2140      	movs	r1, #64	; 0x40
 8001038:	4821      	ldr	r0, [pc, #132]	; (80010c0 <TIM2_IRQHandler+0x9c>)
 800103a:	f001 fae3 	bl	8002604 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	71bb      	strb	r3, [r7, #6]

  if(TIM_DEBOUNCE_COUNTER_MAX >= itDbCounter)
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <TIM2_IRQHandler+0xa0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d811      	bhi.n	8001070 <TIM2_IRQHandler+0x4c>
  {
	  if(GPIO_PIN_SET == hlimSt || GPIO_PIN_SET == llimSt)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d002      	beq.n	8001058 <TIM2_IRQHandler+0x34>
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d107      	bne.n	8001068 <TIM2_IRQHandler+0x44>
	  {
		  itDbCounter++;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <TIM2_IRQHandler+0xa0>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	3301      	adds	r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <TIM2_IRQHandler+0xa0>)
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e024      	b.n	80010b2 <TIM2_IRQHandler+0x8e>
	  }
	  else
	  {
		  itDbCounter = 0u;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <TIM2_IRQHandler+0xa0>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e020      	b.n	80010b2 <TIM2_IRQHandler+0x8e>
	  }
  }
  else
  {
	  if(GPIO_PIN_SET == hlimSt)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <TIM2_IRQHandler+0x64>
	  {
		  SM_SetStatusFlag(SM_STATUS_HLIM_HIGH_FLAG);
 8001076:	2002      	movs	r0, #2
 8001078:	f7ff fe72 	bl	8000d60 <SM_SetStatusFlag>
		  HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2110      	movs	r1, #16
 8001080:	480f      	ldr	r0, [pc, #60]	; (80010c0 <TIM2_IRQHandler+0x9c>)
 8001082:	f001 fad6 	bl	8002632 <HAL_GPIO_WritePin>
 8001086:	e007      	b.n	8001098 <TIM2_IRQHandler+0x74>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, HLIM_OUT_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2110      	movs	r1, #16
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <TIM2_IRQHandler+0x9c>)
 800108e:	f001 fad0 	bl	8002632 <HAL_GPIO_WritePin>
		  SM_ClearStatusFlag(SM_STATUS_HLIM_HIGH_FLAG);
 8001092:	2002      	movs	r0, #2
 8001094:	f7ff fe78 	bl	8000d88 <SM_ClearStatusFlag>
	  }

	  if(GPIO_PIN_SET == llimSt)
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d103      	bne.n	80010a6 <TIM2_IRQHandler+0x82>
	  {
		  SM_SetStatusFlag(SM_STATUS_LLIM_HIGH_FLAG);
 800109e:	2004      	movs	r0, #4
 80010a0:	f7ff fe5e 	bl	8000d60 <SM_SetStatusFlag>
 80010a4:	e002      	b.n	80010ac <TIM2_IRQHandler+0x88>
	  }
	  else
	  {
		  SM_ClearStatusFlag(SM_STATUS_LLIM_HIGH_FLAG);
 80010a6:	2004      	movs	r0, #4
 80010a8:	f7ff fe6e 	bl	8000d88 <SM_ClearStatusFlag>
	  }

	  itDbCounter = 0u;
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <TIM2_IRQHandler+0xa0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <TIM2_IRQHandler+0xa4>)
 80010b4:	f002 f936 	bl	8003324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40010800 	.word	0x40010800
 80010c4:	20000194 	.word	0x20000194
 80010c8:	2000014c 	.word	0x2000014c

080010cc <SUPP_UpdateAdcFilter>:

//
// Shoves an ADC reading into the filter circular buffer and update filter output
//
void SUPP_UpdateAdcFilter(uint16_t adcVal)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
	uint8_t index;

	//update circular buffer
	supp_aAdcVal[supp_bufferIndex] = adcVal;
 80010d6:	4b39      	ldr	r3, [pc, #228]	; (80011bc <SUPP_UpdateAdcFilter+0xf0>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4619      	mov	r1, r3
 80010de:	4a38      	ldr	r2, [pc, #224]	; (80011c0 <SUPP_UpdateAdcFilter+0xf4>)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	supp_bufferIndex = SUPP_GET_NEXT_IND(supp_bufferIndex);
 80010e6:	4b35      	ldr	r3, [pc, #212]	; (80011bc <SUPP_UpdateAdcFilter+0xf0>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	3301      	adds	r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <SUPP_UpdateAdcFilter+0xf0>)
 80010f8:	701a      	strb	r2, [r3, #0]
	supp_bufferSumIndex = supp_bufferIndex;
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <SUPP_UpdateAdcFilter+0xf0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <SUPP_UpdateAdcFilter+0xf8>)
 8001102:	701a      	strb	r2, [r3, #0]
	supp_fFilteredOut = 0.0f;
 8001104:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <SUPP_UpdateAdcFilter+0xfc>)
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

	//digital convolution of buffer values with filter impulse response
	for(index = SUPP_BUFFER_FIRST_INDEX; index < SUPP_RAW_READING_BUFFER_LENGTH; index++)
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e032      	b.n	8001178 <SUPP_UpdateAdcFilter+0xac>
	{
		if(0u < supp_bufferSumIndex)
 8001112:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <SUPP_UpdateAdcFilter+0xf8>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d007      	beq.n	800112c <SUPP_UpdateAdcFilter+0x60>
		{
			supp_bufferSumIndex--;
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <SUPP_UpdateAdcFilter+0xf8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3b01      	subs	r3, #1
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <SUPP_UpdateAdcFilter+0xf8>)
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e002      	b.n	8001132 <SUPP_UpdateAdcFilter+0x66>
		}
		else
		{
			supp_bufferSumIndex = SUPP_BUFFER_LAST_INDEX;
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <SUPP_UpdateAdcFilter+0xf8>)
 800112e:	220f      	movs	r2, #15
 8001130:	701a      	strb	r2, [r3, #0]
		}
		supp_fFilteredOut += supp_filterTaps[index] * supp_aAdcVal[supp_bufferSumIndex];
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	4a25      	ldr	r2, [pc, #148]	; (80011cc <SUPP_UpdateAdcFilter+0x100>)
 8001136:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <SUPP_UpdateAdcFilter+0xf8>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <SUPP_UpdateAdcFilter+0xf4>)
 8001144:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f96c 	bl	8000428 <__aeabi_i2f>
 8001150:	4603      	mov	r3, r0
 8001152:	4619      	mov	r1, r3
 8001154:	4620      	mov	r0, r4
 8001156:	f7fe fff9 	bl	800014c <__aeabi_fmul>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <SUPP_UpdateAdcFilter+0xfc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	4610      	mov	r0, r2
 8001166:	f7ff f8ab 	bl	80002c0 <__addsf3>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <SUPP_UpdateAdcFilter+0xfc>)
 8001170:	601a      	str	r2, [r3, #0]
	for(index = SUPP_BUFFER_FIRST_INDEX; index < SUPP_RAW_READING_BUFFER_LENGTH; index++)
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	3301      	adds	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b0f      	cmp	r3, #15
 800117c:	d9c9      	bls.n	8001112 <SUPP_UpdateAdcFilter+0x46>
	}

	//output rounding to int
	supp_filteredOut = SUPP_FLOAT_TO_UINT_ROUND(supp_fFilteredOut);
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <SUPP_UpdateAdcFilter+0xfc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f89a 	bl	80002c0 <__addsf3>
 800118c:	4603      	mov	r3, r0
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f99e 	bl	80004d0 <__aeabi_f2uiz>
 8001194:	4603      	mov	r3, r0
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <SUPP_UpdateAdcFilter+0x104>)
 800119a:	801a      	strh	r2, [r3, #0]

	//adc value upbounding
	if(SUPP_ADC_MAX_VAL > supp_filteredOut)
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <SUPP_UpdateAdcFilter+0x104>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d803      	bhi.n	80011b2 <SUPP_UpdateAdcFilter+0xe6>
	{
		supp_filteredOut = SUPP_ADC_MAX_VAL;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <SUPP_UpdateAdcFilter+0x104>)
 80011ac:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011b0:	801a      	strh	r2, [r3, #0]
	}
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd90      	pop	{r4, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000a0 	.word	0x200000a0
 80011c0:	20000080 	.word	0x20000080
 80011c4:	200000a1 	.word	0x200000a1
 80011c8:	200000a4 	.word	0x200000a4
 80011cc:	08003a58 	.word	0x08003a58
 80011d0:	200000a8 	.word	0x200000a8

080011d4 <SUPP_GetAdcVal>:

uint16_t SUPP_GetAdcVal(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	return supp_filteredOut;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <SUPP_GetAdcVal+0x14>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200000a8 	.word	0x200000a8

080011ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011fa:	490d      	ldr	r1, [pc, #52]	; (8001230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001210:	4c0a      	ldr	r4, [pc, #40]	; (800123c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800121e:	f7ff ffe5 	bl	80011ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001222:	f002 fbd1 	bl	80039c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001226:	f7ff f973 	bl	8000510 <main>
  bx lr
 800122a:	4770      	bx	lr
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001234:	08003ab8 	.word	0x08003ab8
  ldr r2, =_sbss
 8001238:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800123c:	2000019c 	.word	0x2000019c

08001240 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <CAN1_RX1_IRQHandler>
	...

08001244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_Init+0x28>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_Init+0x28>)
 800124e:	f043 0310 	orr.w	r3, r3, #16
 8001252:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f001 f819 	bl	800228c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 f808 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001260:	f7ff fdac 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40022000 	.word	0x40022000

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x54>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	fbb3 f3f1 	udiv	r3, r3, r1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f001 f831 	bl	80022f6 <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00e      	b.n	80012bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d80a      	bhi.n	80012ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f000 fff9 	bl	80022a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_InitTick+0x5c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000018 	.word	0x20000018
 80012c8:	20000020 	.word	0x20000020
 80012cc:	2000001c 	.word	0x2000001c

080012d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_IncTick+0x1c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_IncTick+0x20>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <HAL_IncTick+0x20>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000020 	.word	0x20000020
 80012f0:	20000198 	.word	0x20000198

080012f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b02      	ldr	r3, [pc, #8]	; (8001304 <HAL_GetTick+0x10>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	20000198 	.word	0x20000198

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff fff0 	bl	80012f4 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffe0 	bl	80012f4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000020 	.word	0x20000020

08001350 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e0be      	b.n	80014f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	2b00      	cmp	r3, #0
 800137e:	d109      	bne.n	8001394 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fd46 	bl	8000e20 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fb9d 	bl	8001ad4 <ADC_ConversionStop_Disable>
 800139a:	4603      	mov	r3, r0
 800139c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 8099 	bne.w	80014de <HAL_ADC_Init+0x18e>
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 8095 	bne.w	80014de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013bc:	f023 0302 	bic.w	r3, r3, #2
 80013c0:	f043 0202 	orr.w	r2, r3, #2
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7b1b      	ldrb	r3, [r3, #12]
 80013d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	4313      	orrs	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013e8:	d003      	beq.n	80013f2 <HAL_ADC_Init+0xa2>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d102      	bne.n	80013f8 <HAL_ADC_Init+0xa8>
 80013f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f6:	e000      	b.n	80013fa <HAL_ADC_Init+0xaa>
 80013f8:	2300      	movs	r3, #0
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7d1b      	ldrb	r3, [r3, #20]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d119      	bne.n	800143c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7b1b      	ldrb	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d109      	bne.n	8001424 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	3b01      	subs	r3, #1
 8001416:	035a      	lsls	r2, r3, #13
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	e00b      	b.n	800143c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001428:	f043 0220 	orr.w	r2, r3, #32
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	f043 0201 	orr.w	r2, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	430a      	orrs	r2, r1
 800144e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <HAL_ADC_Init+0x1a8>)
 8001458:	4013      	ands	r3, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	430b      	orrs	r3, r1
 8001462:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800146c:	d003      	beq.n	8001476 <HAL_ADC_Init+0x126>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d104      	bne.n	8001480 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	3b01      	subs	r3, #1
 800147c:	051b      	lsls	r3, r3, #20
 800147e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	430a      	orrs	r2, r1
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_ADC_Init+0x1ac>)
 800149c:	4013      	ands	r3, r2
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d10b      	bne.n	80014bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	f023 0303 	bic.w	r3, r3, #3
 80014b2:	f043 0201 	orr.w	r2, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014ba:	e018      	b.n	80014ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	f023 0312 	bic.w	r3, r3, #18
 80014c4:	f043 0210 	orr.w	r2, r3, #16
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f043 0201 	orr.w	r2, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014dc:	e007      	b.n	80014ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	f043 0210 	orr.w	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	ffe1f7fd 	.word	0xffe1f7fd
 80014fc:	ff1f0efe 	.word	0xff1f0efe

08001500 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_ADC_Start_IT+0x1a>
 8001516:	2302      	movs	r3, #2
 8001518:	e0a0      	b.n	800165c <HAL_ADC_Start_IT+0x15c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fa7c 	bl	8001a20 <ADC_Enable>
 8001528:	4603      	mov	r3, r0
 800152a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f040 808f 	bne.w	8001652 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a45      	ldr	r2, [pc, #276]	; (8001664 <HAL_ADC_Start_IT+0x164>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d105      	bne.n	800155e <HAL_ADC_Start_IT+0x5e>
 8001552:	4b45      	ldr	r3, [pc, #276]	; (8001668 <HAL_ADC_Start_IT+0x168>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d115      	bne.n	800158a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001574:	2b00      	cmp	r3, #0
 8001576:	d026      	beq.n	80015c6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001580:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001588:	e01d      	b.n	80015c6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a33      	ldr	r2, [pc, #204]	; (8001668 <HAL_ADC_Start_IT+0x168>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d004      	beq.n	80015aa <HAL_ADC_Start_IT+0xaa>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2f      	ldr	r2, [pc, #188]	; (8001664 <HAL_ADC_Start_IT+0x164>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10d      	bne.n	80015c6 <HAL_ADC_Start_IT+0xc6>
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_ADC_Start_IT+0x168>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d006      	beq.n	80015e0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	f023 0206 	bic.w	r2, r3, #6
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80015de:	e002      	b.n	80015e6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f06f 0202 	mvn.w	r2, #2
 80015f6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0220 	orr.w	r2, r2, #32
 8001606:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001612:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001616:	d113      	bne.n	8001640 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800161c:	4a11      	ldr	r2, [pc, #68]	; (8001664 <HAL_ADC_Start_IT+0x164>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d105      	bne.n	800162e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_ADC_Start_IT+0x168>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	e00c      	b.n	800165a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	e003      	b.n	800165a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40012800 	.word	0x40012800
 8001668:	40012400 	.word	0x40012400

0800166c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	2b20      	cmp	r3, #32
 8001698:	d140      	bne.n	800171c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d139      	bne.n	800171c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016ce:	d11d      	bne.n	800170c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d119      	bne.n	800170c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0220 	bic.w	r2, r2, #32
 80016e6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f87c 	bl	800180a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f06f 0212 	mvn.w	r2, #18
 800171a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	2b80      	cmp	r3, #128	; 0x80
 8001728:	d14f      	bne.n	80017ca <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b04      	cmp	r3, #4
 8001736:	d148      	bne.n	80017ca <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800175a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800175e:	d012      	beq.n	8001786 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800176a:	2b00      	cmp	r3, #0
 800176c:	d125      	bne.n	80017ba <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001778:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800177c:	d11d      	bne.n	80017ba <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001782:	2b00      	cmp	r3, #0
 8001784:	d119      	bne.n	80017ba <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001794:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d105      	bne.n	80017ba <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fa78 	bl	8001cb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 020c 	mvn.w	r2, #12
 80017c8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d4:	2b40      	cmp	r3, #64	; 0x40
 80017d6:	d114      	bne.n	8001802 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d10d      	bne.n	8001802 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f812 	bl	800181c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 0201 	mvn.w	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
	...

08001830 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x20>
 800184c:	2302      	movs	r3, #2
 800184e:	e0dc      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x1da>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b06      	cmp	r3, #6
 800185e:	d81c      	bhi.n	800189a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	3b05      	subs	r3, #5
 8001872:	221f      	movs	r2, #31
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	4019      	ands	r1, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	3b05      	subs	r3, #5
 800188c:	fa00 f203 	lsl.w	r2, r0, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	635a      	str	r2, [r3, #52]	; 0x34
 8001898:	e03c      	b.n	8001914 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d81c      	bhi.n	80018dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	3b23      	subs	r3, #35	; 0x23
 80018b4:	221f      	movs	r2, #31
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	4019      	ands	r1, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	3b23      	subs	r3, #35	; 0x23
 80018ce:	fa00 f203 	lsl.w	r2, r0, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	631a      	str	r2, [r3, #48]	; 0x30
 80018da:	e01b      	b.n	8001914 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b41      	subs	r3, #65	; 0x41
 80018ee:	221f      	movs	r2, #31
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4019      	ands	r1, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	3b41      	subs	r3, #65	; 0x41
 8001908:	fa00 f203 	lsl.w	r2, r0, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b09      	cmp	r3, #9
 800191a:	d91c      	bls.n	8001956 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68d9      	ldr	r1, [r3, #12]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	3b1e      	subs	r3, #30
 800192e:	2207      	movs	r2, #7
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	4019      	ands	r1, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6898      	ldr	r0, [r3, #8]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	3b1e      	subs	r3, #30
 8001948:	fa00 f203 	lsl.w	r2, r0, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	e019      	b.n	800198a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6919      	ldr	r1, [r3, #16]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	2207      	movs	r2, #7
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	4019      	ands	r1, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	6898      	ldr	r0, [r3, #8]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	fa00 f203 	lsl.w	r2, r0, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b10      	cmp	r3, #16
 8001990:	d003      	beq.n	800199a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001996:	2b11      	cmp	r3, #17
 8001998:	d132      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_ADC_ConfigChannel+0x1e4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d125      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d126      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019c0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d11a      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_ADC_ConfigChannel+0x1e8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <HAL_ADC_ConfigChannel+0x1ec>)
 80019d0:	fba2 2303 	umull	r2, r3, r2, r3
 80019d4:	0c9a      	lsrs	r2, r3, #18
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f9      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x1b2>
 80019ee:	e007      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	f043 0220 	orr.w	r2, r3, #32
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	40012400 	.word	0x40012400
 8001a18:	20000018 	.word	0x20000018
 8001a1c:	431bde83 	.word	0x431bde83

08001a20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d040      	beq.n	8001ac0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <ADC_Enable+0xac>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <ADC_Enable+0xb0>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	0c9b      	lsrs	r3, r3, #18
 8001a5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a5c:	e002      	b.n	8001a64 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f9      	bne.n	8001a5e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a6a:	f7ff fc43 	bl	80012f4 <HAL_GetTick>
 8001a6e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a70:	e01f      	b.n	8001ab2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a72:	f7ff fc3f 	bl	80012f4 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d918      	bls.n	8001ab2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d011      	beq.n	8001ab2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	f043 0210 	orr.w	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e007      	b.n	8001ac2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d1d8      	bne.n	8001a72 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000018 	.word	0x20000018
 8001ad0:	431bde83 	.word	0x431bde83

08001ad4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d12e      	bne.n	8001b4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001afe:	f7ff fbf9 	bl	80012f4 <HAL_GetTick>
 8001b02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b04:	e01b      	b.n	8001b3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b06:	f7ff fbf5 	bl	80012f4 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d914      	bls.n	8001b3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d10d      	bne.n	8001b3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	f043 0210 	orr.w	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e007      	b.n	8001b4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d0dc      	beq.n	8001b06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADCEx_Calibration_Start+0x1e>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e095      	b.n	8001ca2 <HAL_ADCEx_Calibration_Start+0x14a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffa8 	bl	8001ad4 <ADC_ConversionStop_Disable>
 8001b84:	4603      	mov	r3, r0
 8001b86:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 8084 	bne.w	8001c98 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b98:	f023 0302 	bic.w	r3, r3, #2
 8001b9c:	f043 0202 	orr.w	r2, r3, #2
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ba4:	4b41      	ldr	r3, [pc, #260]	; (8001cac <HAL_ADCEx_Calibration_Start+0x154>)
 8001ba6:	681c      	ldr	r4, [r3, #0]
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f001 fa17 	bl	8002fdc <HAL_RCCEx_GetPeriphCLKFreq>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001bb4:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001bb6:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001bb8:	e002      	b.n	8001bc0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f9      	bne.n	8001bba <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff2a 	bl	8001a20 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0208 	orr.w	r2, r2, #8
 8001bda:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001bdc:	f7ff fb8a 	bl	80012f4 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001be2:	e01b      	b.n	8001c1c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001be4:	f7ff fb86 	bl	80012f4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b0a      	cmp	r3, #10
 8001bf0:	d914      	bls.n	8001c1c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00d      	beq.n	8001c1c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	f023 0312 	bic.w	r3, r3, #18
 8001c08:	f043 0210 	orr.w	r2, r3, #16
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e042      	b.n	8001ca2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1dc      	bne.n	8001be4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0204 	orr.w	r2, r2, #4
 8001c38:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c3a:	f7ff fb5b 	bl	80012f4 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c40:	e01b      	b.n	8001c7a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c42:	f7ff fb57 	bl	80012f4 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b0a      	cmp	r3, #10
 8001c4e:	d914      	bls.n	8001c7a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00d      	beq.n	8001c7a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	f023 0312 	bic.w	r3, r3, #18
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e013      	b.n	8001ca2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1dc      	bne.n	8001c42 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	f023 0303 	bic.w	r3, r3, #3
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000018 	.word	0x20000018

08001cb0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0ed      	b.n	8001eb0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff f8e1 	bl	8000ea8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf6:	f7ff fafd 	bl	80012f4 <HAL_GetTick>
 8001cfa:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cfc:	e012      	b.n	8001d24 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cfe:	f7ff faf9 	bl	80012f4 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b0a      	cmp	r3, #10
 8001d0a:	d90b      	bls.n	8001d24 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2205      	movs	r2, #5
 8001d1c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0c5      	b.n	8001eb0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0e5      	beq.n	8001cfe <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0202 	bic.w	r2, r2, #2
 8001d40:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d42:	f7ff fad7 	bl	80012f4 <HAL_GetTick>
 8001d46:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d48:	e012      	b.n	8001d70 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d4a:	f7ff fad3 	bl	80012f4 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b0a      	cmp	r3, #10
 8001d56:	d90b      	bls.n	8001d70 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2205      	movs	r2, #5
 8001d68:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e09f      	b.n	8001eb0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1e5      	bne.n	8001d4a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7e1b      	ldrb	r3, [r3, #24]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d108      	bne.n	8001d98 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e007      	b.n	8001da8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e5b      	ldrb	r3, [r3, #25]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d108      	bne.n	8001dc2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e007      	b.n	8001dd2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7e9b      	ldrb	r3, [r3, #26]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d108      	bne.n	8001dec <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0220 	orr.w	r2, r2, #32
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e007      	b.n	8001dfc <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0220 	bic.w	r2, r2, #32
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7edb      	ldrb	r3, [r3, #27]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d108      	bne.n	8001e16 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0210 	bic.w	r2, r2, #16
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e007      	b.n	8001e26 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0210 	orr.w	r2, r2, #16
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7f1b      	ldrb	r3, [r3, #28]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d108      	bne.n	8001e40 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0208 	orr.w	r2, r2, #8
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e007      	b.n	8001e50 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0208 	bic.w	r2, r2, #8
 8001e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7f5b      	ldrb	r3, [r3, #29]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d108      	bne.n	8001e6a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0204 	orr.w	r2, r2, #4
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	e007      	b.n	8001e7a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0204 	bic.w	r2, r2, #4
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	ea42 0103 	orr.w	r1, r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	1e5a      	subs	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d12e      	bne.n	8001f2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ee4:	f7ff fa06 	bl	80012f4 <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001eea:	e012      	b.n	8001f12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eec:	f7ff fa02 	bl	80012f4 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b0a      	cmp	r3, #10
 8001ef8:	d90b      	bls.n	8001f12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2205      	movs	r2, #5
 8001f0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e012      	b.n	8001f38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e5      	bne.n	8001eec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e006      	b.n	8001f38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f5e:	7ffb      	ldrb	r3, [r7, #31]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d003      	beq.n	8001f6c <HAL_CAN_AddTxMessage+0x2c>
 8001f64:	7ffb      	ldrb	r3, [r7, #31]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	f040 80b8 	bne.w	80020dc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10a      	bne.n	8001f8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80a0 	beq.w	80020cc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	0e1b      	lsrs	r3, r3, #24
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d907      	bls.n	8001fac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e09e      	b.n	80020ea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001fac:	2201      	movs	r2, #1
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fc8:	68f9      	ldr	r1, [r7, #12]
 8001fca:	6809      	ldr	r1, [r1, #0]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3318      	adds	r3, #24
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	440b      	add	r3, r1
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e00f      	b.n	8001ffa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fe4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fea:	68f9      	ldr	r1, [r7, #12]
 8001fec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001fee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3318      	adds	r3, #24
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	440b      	add	r3, r1
 8001ff8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6819      	ldr	r1, [r3, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3318      	adds	r3, #24
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	440b      	add	r3, r1
 800200a:	3304      	adds	r3, #4
 800200c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	7d1b      	ldrb	r3, [r3, #20]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d111      	bne.n	800203a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3318      	adds	r3, #24
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	4413      	add	r3, r2
 8002022:	3304      	adds	r3, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	6811      	ldr	r1, [r2, #0]
 800202a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3318      	adds	r3, #24
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	440b      	add	r3, r1
 8002036:	3304      	adds	r3, #4
 8002038:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3307      	adds	r3, #7
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	061a      	lsls	r2, r3, #24
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3306      	adds	r3, #6
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3305      	adds	r3, #5
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	4313      	orrs	r3, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	3204      	adds	r2, #4
 800205a:	7812      	ldrb	r2, [r2, #0]
 800205c:	4610      	mov	r0, r2
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6811      	ldr	r1, [r2, #0]
 8002062:	ea43 0200 	orr.w	r2, r3, r0
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	440b      	add	r3, r1
 800206c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002070:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3303      	adds	r3, #3
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	061a      	lsls	r2, r3, #24
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3302      	adds	r3, #2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3301      	adds	r3, #1
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	4313      	orrs	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	7812      	ldrb	r2, [r2, #0]
 8002092:	4610      	mov	r0, r2
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	6811      	ldr	r1, [r2, #0]
 8002098:	ea43 0200 	orr.w	r2, r3, r0
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80020a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3318      	adds	r3, #24
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	4413      	add	r3, r2
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	6811      	ldr	r1, [r2, #0]
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3318      	adds	r3, #24
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	440b      	add	r3, r1
 80020c6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	e00e      	b.n	80020ea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e006      	b.n	80020ea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
  }
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4906      	ldr	r1, [pc, #24]	; (800218c <__NVIC_EnableIRQ+0x34>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	; (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	; (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002258:	d301      	bcc.n	800225e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225a:	2301      	movs	r3, #1
 800225c:	e00f      	b.n	800227e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <SysTick_Config+0x40>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002266:	210f      	movs	r1, #15
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f7ff ff90 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <SysTick_Config+0x40>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <SysTick_Config+0x40>)
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000e010 	.word	0xe000e010

0800228c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff2d 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b4:	f7ff ff42 	bl	800213c <__NVIC_GetPriorityGrouping>
 80022b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff ff90 	bl	80021e4 <NVIC_EncodePriority>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5f 	bl	8002190 <__NVIC_SetPriority>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff35 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffa2 	bl	8002248 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b08b      	sub	sp, #44	; 0x2c
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002322:	e148      	b.n	80025b6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002324:	2201      	movs	r2, #1
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	429a      	cmp	r2, r3
 800233e:	f040 8137 	bne.w	80025b0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4aa3      	ldr	r2, [pc, #652]	; (80025d4 <HAL_GPIO_Init+0x2c4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d05e      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 800234c:	4aa1      	ldr	r2, [pc, #644]	; (80025d4 <HAL_GPIO_Init+0x2c4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d875      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002352:	4aa1      	ldr	r2, [pc, #644]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d058      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002358:	4a9f      	ldr	r2, [pc, #636]	; (80025d8 <HAL_GPIO_Init+0x2c8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d86f      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800235e:	4a9f      	ldr	r2, [pc, #636]	; (80025dc <HAL_GPIO_Init+0x2cc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d052      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002364:	4a9d      	ldr	r2, [pc, #628]	; (80025dc <HAL_GPIO_Init+0x2cc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d869      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800236a:	4a9d      	ldr	r2, [pc, #628]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d04c      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 8002370:	4a9b      	ldr	r2, [pc, #620]	; (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d863      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002376:	4a9b      	ldr	r2, [pc, #620]	; (80025e4 <HAL_GPIO_Init+0x2d4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d046      	beq.n	800240a <HAL_GPIO_Init+0xfa>
 800237c:	4a99      	ldr	r2, [pc, #612]	; (80025e4 <HAL_GPIO_Init+0x2d4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d85d      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 8002382:	2b12      	cmp	r3, #18
 8002384:	d82a      	bhi.n	80023dc <HAL_GPIO_Init+0xcc>
 8002386:	2b12      	cmp	r3, #18
 8002388:	d859      	bhi.n	800243e <HAL_GPIO_Init+0x12e>
 800238a:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <HAL_GPIO_Init+0x80>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	0800240b 	.word	0x0800240b
 8002394:	080023e5 	.word	0x080023e5
 8002398:	080023f7 	.word	0x080023f7
 800239c:	08002439 	.word	0x08002439
 80023a0:	0800243f 	.word	0x0800243f
 80023a4:	0800243f 	.word	0x0800243f
 80023a8:	0800243f 	.word	0x0800243f
 80023ac:	0800243f 	.word	0x0800243f
 80023b0:	0800243f 	.word	0x0800243f
 80023b4:	0800243f 	.word	0x0800243f
 80023b8:	0800243f 	.word	0x0800243f
 80023bc:	0800243f 	.word	0x0800243f
 80023c0:	0800243f 	.word	0x0800243f
 80023c4:	0800243f 	.word	0x0800243f
 80023c8:	0800243f 	.word	0x0800243f
 80023cc:	0800243f 	.word	0x0800243f
 80023d0:	0800243f 	.word	0x0800243f
 80023d4:	080023ed 	.word	0x080023ed
 80023d8:	08002401 	.word	0x08002401
 80023dc:	4a82      	ldr	r2, [pc, #520]	; (80025e8 <HAL_GPIO_Init+0x2d8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023e2:	e02c      	b.n	800243e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e029      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	3304      	adds	r3, #4
 80023f2:	623b      	str	r3, [r7, #32]
          break;
 80023f4:	e024      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	3308      	adds	r3, #8
 80023fc:	623b      	str	r3, [r7, #32]
          break;
 80023fe:	e01f      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	330c      	adds	r3, #12
 8002406:	623b      	str	r3, [r7, #32]
          break;
 8002408:	e01a      	b.n	8002440 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002412:	2304      	movs	r3, #4
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e013      	b.n	8002440 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002420:	2308      	movs	r3, #8
 8002422:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	611a      	str	r2, [r3, #16]
          break;
 800242a:	e009      	b.n	8002440 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800242c:	2308      	movs	r3, #8
 800242e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	615a      	str	r2, [r3, #20]
          break;
 8002436:	e003      	b.n	8002440 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
          break;
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x130>
          break;
 800243e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2bff      	cmp	r3, #255	; 0xff
 8002444:	d801      	bhi.n	800244a <HAL_GPIO_Init+0x13a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	e001      	b.n	800244e <HAL_GPIO_Init+0x13e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2bff      	cmp	r3, #255	; 0xff
 8002454:	d802      	bhi.n	800245c <HAL_GPIO_Init+0x14c>
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x152>
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	3b08      	subs	r3, #8
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	210f      	movs	r1, #15
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	6a39      	ldr	r1, [r7, #32]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	431a      	orrs	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8090 	beq.w	80025b0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002490:	4b56      	ldr	r3, [pc, #344]	; (80025ec <HAL_GPIO_Init+0x2dc>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a55      	ldr	r2, [pc, #340]	; (80025ec <HAL_GPIO_Init+0x2dc>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_GPIO_Init+0x2dc>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024a8:	4a51      	ldr	r2, [pc, #324]	; (80025f0 <HAL_GPIO_Init+0x2e0>)
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4013      	ands	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a49      	ldr	r2, [pc, #292]	; (80025f4 <HAL_GPIO_Init+0x2e4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00d      	beq.n	80024f0 <HAL_GPIO_Init+0x1e0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a48      	ldr	r2, [pc, #288]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d007      	beq.n	80024ec <HAL_GPIO_Init+0x1dc>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a47      	ldr	r2, [pc, #284]	; (80025fc <HAL_GPIO_Init+0x2ec>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_GPIO_Init+0x1d8>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e004      	b.n	80024f2 <HAL_GPIO_Init+0x1e2>
 80024e8:	2303      	movs	r3, #3
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0x1e2>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_GPIO_Init+0x1e2>
 80024f0:	2300      	movs	r3, #0
 80024f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f4:	f002 0203 	and.w	r2, r2, #3
 80024f8:	0092      	lsls	r2, r2, #2
 80024fa:	4093      	lsls	r3, r2
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002502:	493b      	ldr	r1, [pc, #236]	; (80025f0 <HAL_GPIO_Init+0x2e0>)
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d006      	beq.n	800252a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800251c:	4b38      	ldr	r3, [pc, #224]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4937      	ldr	r1, [pc, #220]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800252a:	4b35      	ldr	r3, [pc, #212]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	43db      	mvns	r3, r3
 8002532:	4933      	ldr	r1, [pc, #204]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 8002534:	4013      	ands	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d006      	beq.n	8002552 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002544:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	492d      	ldr	r1, [pc, #180]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002552:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	43db      	mvns	r3, r3
 800255a:	4929      	ldr	r1, [pc, #164]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 800255c:	4013      	ands	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800256c:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	4923      	ldr	r1, [pc, #140]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800257a:	4b21      	ldr	r3, [pc, #132]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	43db      	mvns	r3, r3
 8002582:	491f      	ldr	r1, [pc, #124]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 8002584:	4013      	ands	r3, r2
 8002586:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d006      	beq.n	80025a2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	4919      	ldr	r1, [pc, #100]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4915      	ldr	r1, [pc, #84]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	3301      	adds	r3, #1
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f47f aeaf 	bne.w	8002324 <HAL_GPIO_Init+0x14>
  }
}
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
 80025ca:	372c      	adds	r7, #44	; 0x2c
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	10320000 	.word	0x10320000
 80025d8:	10310000 	.word	0x10310000
 80025dc:	10220000 	.word	0x10220000
 80025e0:	10210000 	.word	0x10210000
 80025e4:	10120000 	.word	0x10120000
 80025e8:	10110000 	.word	0x10110000
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40010800 	.word	0x40010800
 80025f8:	40010c00 	.word	0x40010c00
 80025fc:	40011000 	.word	0x40011000
 8002600:	40010400 	.word	0x40010400

08002604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
 8002620:	e001      	b.n	8002626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002626:	7bfb      	ldrb	r3, [r7, #15]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	807b      	strh	r3, [r7, #2]
 800263e:	4613      	mov	r3, r2
 8002640:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002642:	787b      	ldrb	r3, [r7, #1]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002648:	887a      	ldrh	r2, [r7, #2]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800264e:	e003      	b.n	8002658 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002650:	887b      	ldrh	r3, [r7, #2]
 8002652:	041a      	lsls	r2, r3, #16
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	611a      	str	r2, [r3, #16]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
	...

08002664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e26c      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8087 	beq.w	8002792 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002684:	4b92      	ldr	r3, [pc, #584]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b04      	cmp	r3, #4
 800268e:	d00c      	beq.n	80026aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002690:	4b8f      	ldr	r3, [pc, #572]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d112      	bne.n	80026c2 <HAL_RCC_OscConfig+0x5e>
 800269c:	4b8c      	ldr	r3, [pc, #560]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a8:	d10b      	bne.n	80026c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026aa:	4b89      	ldr	r3, [pc, #548]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d06c      	beq.n	8002790 <HAL_RCC_OscConfig+0x12c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d168      	bne.n	8002790 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e246      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x76>
 80026cc:	4b80      	ldr	r3, [pc, #512]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a7f      	ldr	r2, [pc, #508]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	e02e      	b.n	8002738 <HAL_RCC_OscConfig+0xd4>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x98>
 80026e2:	4b7b      	ldr	r3, [pc, #492]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a7a      	ldr	r2, [pc, #488]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b78      	ldr	r3, [pc, #480]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a77      	ldr	r2, [pc, #476]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e01d      	b.n	8002738 <HAL_RCC_OscConfig+0xd4>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0xbc>
 8002706:	4b72      	ldr	r3, [pc, #456]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a71      	ldr	r2, [pc, #452]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6e      	ldr	r2, [pc, #440]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0xd4>
 8002720:	4b6b      	ldr	r3, [pc, #428]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a6a      	ldr	r2, [pc, #424]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a67      	ldr	r2, [pc, #412]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002736:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fdd8 	bl	80012f4 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7fe fdd4 	bl	80012f4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1fa      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0xe4>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fdc4 	bl	80012f4 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fdc0 	bl	80012f4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1e6      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002782:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x10c>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d063      	beq.n	8002866 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800279e:	4b4c      	ldr	r3, [pc, #304]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027aa:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d11c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x18c>
 80027b6:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d116      	bne.n	80027f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_RCC_OscConfig+0x176>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e1ba      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027da:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4939      	ldr	r1, [pc, #228]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	e03a      	b.n	8002866 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f8:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_RCC_OscConfig+0x270>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe fd79 	bl	80012f4 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002806:	f7fe fd75 	bl	80012f4 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e19b      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002818:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4927      	ldr	r1, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
 8002838:	e015      	b.n	8002866 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283a:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <HAL_RCC_OscConfig+0x270>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe fd58 	bl	80012f4 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7fe fd54 	bl	80012f4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e17a      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d03a      	beq.n	80028e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d019      	beq.n	80028ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287a:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_RCC_OscConfig+0x274>)
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002880:	f7fe fd38 	bl	80012f4 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002888:	f7fe fd34 	bl	80012f4 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e15a      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <HAL_RCC_OscConfig+0x26c>)
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f000 fac4 	bl	8002e34 <RCC_Delay>
 80028ac:	e01c      	b.n	80028e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_RCC_OscConfig+0x274>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7fe fd1e 	bl	80012f4 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ba:	e00f      	b.n	80028dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028bc:	f7fe fd1a 	bl	80012f4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d908      	bls.n	80028dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e140      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	42420000 	.word	0x42420000
 80028d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	4b9e      	ldr	r3, [pc, #632]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e9      	bne.n	80028bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a6 	beq.w	8002a42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fa:	4b97      	ldr	r3, [pc, #604]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10d      	bne.n	8002922 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	4b94      	ldr	r3, [pc, #592]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	4a93      	ldr	r2, [pc, #588]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002910:	61d3      	str	r3, [r2, #28]
 8002912:	4b91      	ldr	r3, [pc, #580]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b8e      	ldr	r3, [pc, #568]	; (8002b5c <HAL_RCC_OscConfig+0x4f8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d118      	bne.n	8002960 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292e:	4b8b      	ldr	r3, [pc, #556]	; (8002b5c <HAL_RCC_OscConfig+0x4f8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a8a      	ldr	r2, [pc, #552]	; (8002b5c <HAL_RCC_OscConfig+0x4f8>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293a:	f7fe fcdb 	bl	80012f4 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe fcd7 	bl	80012f4 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b64      	cmp	r3, #100	; 0x64
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0fd      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b81      	ldr	r3, [pc, #516]	; (8002b5c <HAL_RCC_OscConfig+0x4f8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x312>
 8002968:	4b7b      	ldr	r3, [pc, #492]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4a7a      	ldr	r2, [pc, #488]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6213      	str	r3, [r2, #32]
 8002974:	e02d      	b.n	80029d2 <HAL_RCC_OscConfig+0x36e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x334>
 800297e:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4a75      	ldr	r2, [pc, #468]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	6213      	str	r3, [r2, #32]
 800298a:	4b73      	ldr	r3, [pc, #460]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4a72      	ldr	r2, [pc, #456]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	6213      	str	r3, [r2, #32]
 8002996:	e01c      	b.n	80029d2 <HAL_RCC_OscConfig+0x36e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b05      	cmp	r3, #5
 800299e:	d10c      	bne.n	80029ba <HAL_RCC_OscConfig+0x356>
 80029a0:	4b6d      	ldr	r3, [pc, #436]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4a6c      	ldr	r2, [pc, #432]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	6213      	str	r3, [r2, #32]
 80029ac:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4a69      	ldr	r2, [pc, #420]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6213      	str	r3, [r2, #32]
 80029b8:	e00b      	b.n	80029d2 <HAL_RCC_OscConfig+0x36e>
 80029ba:	4b67      	ldr	r3, [pc, #412]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4a66      	ldr	r2, [pc, #408]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6213      	str	r3, [r2, #32]
 80029c6:	4b64      	ldr	r3, [pc, #400]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4a63      	ldr	r2, [pc, #396]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	f023 0304 	bic.w	r3, r3, #4
 80029d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d015      	beq.n	8002a06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7fe fc8b 	bl	80012f4 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fc87 	bl	80012f4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0ab      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f8:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ee      	beq.n	80029e2 <HAL_RCC_OscConfig+0x37e>
 8002a04:	e014      	b.n	8002a30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7fe fc75 	bl	80012f4 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fe fc71 	bl	80012f4 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e095      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a24:	4b4c      	ldr	r3, [pc, #304]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ee      	bne.n	8002a0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d105      	bne.n	8002a42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a36:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4a47      	ldr	r2, [pc, #284]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8081 	beq.w	8002b4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a4c:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d061      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d146      	bne.n	8002aee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a60:	4b3f      	ldr	r3, [pc, #252]	; (8002b60 <HAL_RCC_OscConfig+0x4fc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fc45 	bl	80012f4 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fe fc41 	bl	80012f4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e067      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a80:	4b35      	ldr	r3, [pc, #212]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f0      	bne.n	8002a6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a94:	d108      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a96:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	492d      	ldr	r1, [pc, #180]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa8:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a19      	ldr	r1, [r3, #32]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	4927      	ldr	r1, [pc, #156]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_RCC_OscConfig+0x4fc>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fc15 	bl	80012f4 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ace:	f7fe fc11 	bl	80012f4 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e037      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x46a>
 8002aec:	e02f      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <HAL_RCC_OscConfig+0x4fc>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe fbfe 	bl	80012f4 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe fbfa 	bl	80012f4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e020      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x498>
 8002b1a:	e018      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e013      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	42420060 	.word	0x42420060

08002b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0d0      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d910      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b67      	ldr	r3, [pc, #412]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4965      	ldr	r1, [pc, #404]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0b8      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc0:	4b59      	ldr	r3, [pc, #356]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a58      	ldr	r2, [pc, #352]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd8:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002be2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	494d      	ldr	r1, [pc, #308]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d040      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d115      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e073      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06b      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4936      	ldr	r1, [pc, #216]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fb4e 	bl	80012f4 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fe fb4a 	bl	80012f4 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e053      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d210      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	4922      	ldr	r1, [pc, #136]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e032      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4916      	ldr	r1, [pc, #88]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	490e      	ldr	r1, [pc, #56]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cf2:	f000 f821 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	490a      	ldr	r1, [pc, #40]	; (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	5ccb      	ldrb	r3, [r1, r3]
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1cc>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_ClockConfig+0x1d0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe faac 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40022000 	.word	0x40022000
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08003a98 	.word	0x08003a98
 8002d30:	20000018 	.word	0x20000018
 8002d34:	2000001c 	.word	0x2000001c

08002d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	b490      	push	{r4, r7}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d40:	1d3c      	adds	r4, r7, #4
 8002d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d48:	f240 2301 	movw	r3, #513	; 0x201
 8002d4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d002      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x40>
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x46>
 8002d76:	e02d      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d7a:	623b      	str	r3, [r7, #32]
      break;
 8002d7c:	e02d      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	0c9b      	lsrs	r3, r3, #18
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	0c5b      	lsrs	r3, r3, #17
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002daa:	4413      	add	r3, r2
 8002dac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002db0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db6:	fb02 f203 	mul.w	r2, r2, r3
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	e004      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	623b      	str	r3, [r7, #32]
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dd6:	623b      	str	r3, [r7, #32]
      break;
 8002dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dda:	6a3b      	ldr	r3, [r7, #32]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc90      	pop	{r4, r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	08003a38 	.word	0x08003a38
 8002dec:	40021000 	.word	0x40021000
 8002df0:	007a1200 	.word	0x007a1200
 8002df4:	003d0900 	.word	0x003d0900

08002df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dfc:	4b02      	ldr	r3, [pc, #8]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	20000018 	.word	0x20000018

08002e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e10:	f7ff fff2 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	0adb      	lsrs	r3, r3, #11
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	; (8002e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	08003aa8 	.word	0x08003aa8

08002e34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <RCC_Delay+0x34>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <RCC_Delay+0x38>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	0a5b      	lsrs	r3, r3, #9
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e50:	bf00      	nop
  }
  while (Delay --);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1e5a      	subs	r2, r3, #1
 8002e56:	60fa      	str	r2, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f9      	bne.n	8002e50 <RCC_Delay+0x1c>
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	20000018 	.word	0x20000018
 8002e6c:	10624dd3 	.word	0x10624dd3

08002e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d07d      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e90:	4b4f      	ldr	r3, [pc, #316]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9c:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4a4b      	ldr	r2, [pc, #300]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	61d3      	str	r3, [r2, #28]
 8002ea8:	4b49      	ldr	r3, [pc, #292]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d118      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec4:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a42      	ldr	r2, [pc, #264]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ece:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fa10 	bl	80012f4 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	e008      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed8:	f7fe fa0c 	bl	80012f4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e06d      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eea:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d02e      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d027      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f14:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f1e:	4b2e      	ldr	r3, [pc, #184]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f24:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f2a:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d014      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fe f9db 	bl	80012f4 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe f9d7 	bl	80012f4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e036      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ee      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4917      	ldr	r1, [pc, #92]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	490b      	ldr	r1, [pc, #44]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4904      	ldr	r1, [pc, #16]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	42420440 	.word	0x42420440

08002fdc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b08d      	sub	sp, #52	; 0x34
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fe4:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002fe6:	f107 040c 	add.w	r4, r7, #12
 8002fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ff0:	f240 2301 	movw	r3, #513	; 0x201
 8002ff4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffe:	2300      	movs	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	2300      	movs	r3, #0
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b10      	cmp	r3, #16
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b10      	cmp	r3, #16
 8003014:	f200 8091 	bhi.w	800313a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d04c      	beq.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d07c      	beq.n	800311e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003024:	e089      	b.n	800313a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003026:	4b4b      	ldr	r3, [pc, #300]	; (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800302c:	4b49      	ldr	r3, [pc, #292]	; (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8082 	beq.w	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	0c9b      	lsrs	r3, r3, #18
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003046:	4413      	add	r3, r2
 8003048:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800304c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d018      	beq.n	800308a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003058:	4b3e      	ldr	r3, [pc, #248]	; (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	0c5b      	lsrs	r3, r3, #17
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003066:	4413      	add	r3, r2
 8003068:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003078:	4a37      	ldr	r2, [pc, #220]	; (8003158 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003088:	e004      	b.n	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	4a33      	ldr	r2, [pc, #204]	; (800315c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a0:	d102      	bne.n	80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030a6:	e04a      	b.n	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4a2c      	ldr	r2, [pc, #176]	; (8003160 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030b6:	e042      	b.n	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80030b8:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c8:	d108      	bne.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80030d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030da:	e01f      	b.n	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e6:	d109      	bne.n	80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80030f4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030fa:	e00f      	b.n	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003106:	d11c      	bne.n	8003142 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d016      	beq.n	8003142 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003114:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800311a:	e012      	b.n	8003142 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800311c:	e011      	b.n	8003142 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800311e:	f7ff fe75 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 8003122:	4602      	mov	r2, r0
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	0b9b      	lsrs	r3, r3, #14
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003138:	e004      	b.n	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800313a:	bf00      	nop
 800313c:	e002      	b.n	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003142:	bf00      	nop
    }
  }
  return (frequency);
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003146:	4618      	mov	r0, r3
 8003148:	3734      	adds	r7, #52	; 0x34
 800314a:	46bd      	mov	sp, r7
 800314c:	bd90      	pop	{r4, r7, pc}
 800314e:	bf00      	nop
 8003150:	08003a48 	.word	0x08003a48
 8003154:	40021000 	.word	0x40021000
 8003158:	007a1200 	.word	0x007a1200
 800315c:	003d0900 	.word	0x003d0900
 8003160:	aaaaaaab 	.word	0xaaaaaaab

08003164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e041      	b.n	80031fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fed8 	bl	8000f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f000 fab8 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d001      	beq.n	800321c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e02d      	b.n	8003278 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a16      	ldr	r2, [pc, #88]	; (8003284 <HAL_TIM_Base_Start+0x80>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_TIM_Base_Start+0x3e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003236:	d004      	beq.n	8003242 <HAL_TIM_Base_Start+0x3e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a12      	ldr	r2, [pc, #72]	; (8003288 <HAL_TIM_Base_Start+0x84>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d111      	bne.n	8003266 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b06      	cmp	r3, #6
 8003252:	d010      	beq.n	8003276 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003264:	e007      	b.n	8003276 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400

0800328c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d001      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e035      	b.n	8003310 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a16      	ldr	r2, [pc, #88]	; (800331c <HAL_TIM_Base_Start_IT+0x90>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_TIM_Base_Start_IT+0x4e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ce:	d004      	beq.n	80032da <HAL_TIM_Base_Start_IT+0x4e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a12      	ldr	r2, [pc, #72]	; (8003320 <HAL_TIM_Base_Start_IT+0x94>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d111      	bne.n	80032fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b06      	cmp	r3, #6
 80032ea:	d010      	beq.n	800330e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fc:	e007      	b.n	800330e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0201 	orr.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40000400 	.word	0x40000400

08003324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d122      	bne.n	8003380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b02      	cmp	r3, #2
 8003346:	d11b      	bne.n	8003380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0202 	mvn.w	r2, #2
 8003350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f9ba 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 800336c:	e005      	b.n	800337a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f9ad 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f9bc 	bl	80036f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b04      	cmp	r3, #4
 800338c:	d122      	bne.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11b      	bne.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0204 	mvn.w	r2, #4
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f990 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f983 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f992 	bl	80036f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d122      	bne.n	8003428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d11b      	bne.n	8003428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0208 	mvn.w	r2, #8
 80033f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2204      	movs	r2, #4
 80033fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f966 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 8003414:	e005      	b.n	8003422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f959 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f968 	bl	80036f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b10      	cmp	r3, #16
 8003434:	d122      	bne.n	800347c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b10      	cmp	r3, #16
 8003442:	d11b      	bne.n	800347c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0210 	mvn.w	r2, #16
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2208      	movs	r2, #8
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f93c 	bl	80036e0 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f92f 	bl	80036ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f93e 	bl	80036f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d10e      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0201 	mvn.w	r2, #1
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f90a 	bl	80036bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b80      	cmp	r3, #128	; 0x80
 80034b4:	d10e      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b80      	cmp	r3, #128	; 0x80
 80034c2:	d107      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa71 	bl	80039b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b40      	cmp	r3, #64	; 0x40
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f902 	bl	8003704 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b20      	cmp	r3, #32
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b20      	cmp	r3, #32
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0220 	mvn.w	r2, #32
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fa3c 	bl	80039a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_TIM_ConfigClockSource+0x18>
 8003548:	2302      	movs	r3, #2
 800354a:	e0b3      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x180>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800356a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003572:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003584:	d03e      	beq.n	8003604 <HAL_TIM_ConfigClockSource+0xd0>
 8003586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358a:	f200 8087 	bhi.w	800369c <HAL_TIM_ConfigClockSource+0x168>
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	f000 8085 	beq.w	80036a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359a:	d87f      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x168>
 800359c:	2b70      	cmp	r3, #112	; 0x70
 800359e:	d01a      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0xa2>
 80035a0:	2b70      	cmp	r3, #112	; 0x70
 80035a2:	d87b      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x168>
 80035a4:	2b60      	cmp	r3, #96	; 0x60
 80035a6:	d050      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x116>
 80035a8:	2b60      	cmp	r3, #96	; 0x60
 80035aa:	d877      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x168>
 80035ac:	2b50      	cmp	r3, #80	; 0x50
 80035ae:	d03c      	beq.n	800362a <HAL_TIM_ConfigClockSource+0xf6>
 80035b0:	2b50      	cmp	r3, #80	; 0x50
 80035b2:	d873      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x168>
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d058      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x136>
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d86f      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x168>
 80035bc:	2b30      	cmp	r3, #48	; 0x30
 80035be:	d064      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x156>
 80035c0:	2b30      	cmp	r3, #48	; 0x30
 80035c2:	d86b      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x168>
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d060      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x156>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d867      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x168>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05c      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x156>
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d05a      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035d4:	e062      	b.n	800369c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6899      	ldr	r1, [r3, #8]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f000 f966 	bl	80038b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	609a      	str	r2, [r3, #8]
      break;
 8003602:	e04e      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f000 f94f 	bl	80038b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003626:	609a      	str	r2, [r3, #8]
      break;
 8003628:	e03b      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	461a      	mov	r2, r3
 8003638:	f000 f8c6 	bl	80037c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2150      	movs	r1, #80	; 0x50
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f91d 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003648:	e02b      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	461a      	mov	r2, r3
 8003658:	f000 f8e4 	bl	8003824 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2160      	movs	r1, #96	; 0x60
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f90d 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003668:	e01b      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	461a      	mov	r2, r3
 8003678:	f000 f8a6 	bl	80037c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f8fd 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003688:	e00b      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f000 f8f4 	bl	8003882 <TIM_ITRx_SetConfig>
        break;
 800369a:	e002      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800369c:	bf00      	nop
 800369e:	e000      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
	...

08003718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a25      	ldr	r2, [pc, #148]	; (80037c0 <TIM_Base_SetConfig+0xa8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_Base_SetConfig+0x28>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003736:	d003      	beq.n	8003740 <TIM_Base_SetConfig+0x28>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a22      	ldr	r2, [pc, #136]	; (80037c4 <TIM_Base_SetConfig+0xac>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d108      	bne.n	8003752 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1a      	ldr	r2, [pc, #104]	; (80037c0 <TIM_Base_SetConfig+0xa8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d007      	beq.n	800376a <TIM_Base_SetConfig+0x52>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d003      	beq.n	800376a <TIM_Base_SetConfig+0x52>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <TIM_Base_SetConfig+0xac>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <TIM_Base_SetConfig+0xa8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d103      	bne.n	80037b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	615a      	str	r2, [r3, #20]
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40000400 	.word	0x40000400

080037c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f023 0201 	bic.w	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f023 030a 	bic.w	r3, r3, #10
 8003804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 0210 	bic.w	r2, r3, #16
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800384e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	031b      	lsls	r3, r3, #12
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003860:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	621a      	str	r2, [r3, #32]
}
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	f043 0307 	orr.w	r3, r3, #7
 80038a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	609a      	str	r2, [r3, #8]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b087      	sub	sp, #28
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	021a      	lsls	r2, r3, #8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	431a      	orrs	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	4313      	orrs	r3, r2
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	609a      	str	r2, [r3, #8]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003908:	2302      	movs	r3, #2
 800390a:	e041      	b.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d009      	beq.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003958:	d004      	beq.n	8003964 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d10c      	bne.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800396a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40000400 	.word	0x40000400

080039a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <__libc_init_array>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	2600      	movs	r6, #0
 80039cc:	4d0c      	ldr	r5, [pc, #48]	; (8003a00 <__libc_init_array+0x38>)
 80039ce:	4c0d      	ldr	r4, [pc, #52]	; (8003a04 <__libc_init_array+0x3c>)
 80039d0:	1b64      	subs	r4, r4, r5
 80039d2:	10a4      	asrs	r4, r4, #2
 80039d4:	42a6      	cmp	r6, r4
 80039d6:	d109      	bne.n	80039ec <__libc_init_array+0x24>
 80039d8:	f000 f822 	bl	8003a20 <_init>
 80039dc:	2600      	movs	r6, #0
 80039de:	4d0a      	ldr	r5, [pc, #40]	; (8003a08 <__libc_init_array+0x40>)
 80039e0:	4c0a      	ldr	r4, [pc, #40]	; (8003a0c <__libc_init_array+0x44>)
 80039e2:	1b64      	subs	r4, r4, r5
 80039e4:	10a4      	asrs	r4, r4, #2
 80039e6:	42a6      	cmp	r6, r4
 80039e8:	d105      	bne.n	80039f6 <__libc_init_array+0x2e>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f0:	4798      	blx	r3
 80039f2:	3601      	adds	r6, #1
 80039f4:	e7ee      	b.n	80039d4 <__libc_init_array+0xc>
 80039f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fa:	4798      	blx	r3
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7f2      	b.n	80039e6 <__libc_init_array+0x1e>
 8003a00:	08003ab0 	.word	0x08003ab0
 8003a04:	08003ab0 	.word	0x08003ab0
 8003a08:	08003ab0 	.word	0x08003ab0
 8003a0c:	08003ab4 	.word	0x08003ab4

08003a10 <memset>:
 8003a10:	4603      	mov	r3, r0
 8003a12:	4402      	add	r2, r0
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d100      	bne.n	8003a1a <memset+0xa>
 8003a18:	4770      	bx	lr
 8003a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1e:	e7f9      	b.n	8003a14 <memset+0x4>

08003a20 <_init>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	bf00      	nop
 8003a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a26:	bc08      	pop	{r3}
 8003a28:	469e      	mov	lr, r3
 8003a2a:	4770      	bx	lr

08003a2c <_fini>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	bf00      	nop
 8003a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a32:	bc08      	pop	{r3}
 8003a34:	469e      	mov	lr, r3
 8003a36:	4770      	bx	lr
