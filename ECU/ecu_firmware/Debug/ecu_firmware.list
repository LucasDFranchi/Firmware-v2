
ecu_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000247c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002588  08002588  00012588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025ac  080025ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025ac  080025ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025ac  080025ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025b0  080025b0  000125b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080025c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080025c0  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae32  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b75  00000000  00000000  0002ae67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002c9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  0002d620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017872  00000000  00000000  0002e178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b48  00000000  00000000  000459ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bc1e  00000000  00000000  0004f532  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db150  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f8  00000000  00000000  000db1cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002570 	.word	0x08002570

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002570 	.word	0x08002570

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb50 	bl	80007f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80b 	bl	800016e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f946 	bl	80003e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f926 	bl	80003ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f862 	bl	8000228 <MX_ADC1_Init>
  MX_CAN_Init();
 8000164:	f000 f89e 	bl	80002a4 <MX_CAN_Init>
  MX_TIM3_Init();
 8000168:	f000 f8d2 	bl	8000310 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016c:	e7fe      	b.n	800016c <main+0x20>

0800016e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	b094      	sub	sp, #80	; 0x50
 8000172:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000178:	2228      	movs	r2, #40	; 0x28
 800017a:	2100      	movs	r1, #0
 800017c:	4618      	mov	r0, r3
 800017e:	f002 f9ef 	bl	8002560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000182:	f107 0314 	add.w	r3, r7, #20
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	605a      	str	r2, [r3, #4]
 800018c:	609a      	str	r2, [r3, #8]
 800018e:	60da      	str	r2, [r3, #12]
 8000190:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019e:	2301      	movs	r3, #1
 80001a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a8:	2300      	movs	r3, #0
 80001aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b0:	2302      	movs	r3, #2
 80001b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c4:	4618      	mov	r0, r3
 80001c6:	f001 fa85 	bl	80016d4 <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001d0:	f000 f99c 	bl	800050c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d8:	2302      	movs	r3, #2
 80001da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ea:	f107 0314 	add.w	r3, r7, #20
 80001ee:	2102      	movs	r1, #2
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 fcef 	bl	8001bd4 <HAL_RCC_ClockConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001fc:	f000 f986 	bl	800050c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000200:	2302      	movs	r3, #2
 8000202:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000208:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f001 fe71 	bl	8001ef4 <HAL_RCCEx_PeriphCLKConfig>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000218:	f000 f978 	bl	800050c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800021c:	f001 fdc4 	bl	8001da8 <HAL_RCC_EnableCSS>
}
 8000220:	bf00      	nop
 8000222:	3750      	adds	r7, #80	; 0x50
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_ADC1_Init+0x74>)
 800023a:	4a19      	ldr	r2, [pc, #100]	; (80002a0 <MX_ADC1_Init+0x78>)
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800023e:	4b17      	ldr	r3, [pc, #92]	; (800029c <MX_ADC1_Init+0x74>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000244:	4b15      	ldr	r3, [pc, #84]	; (800029c <MX_ADC1_Init+0x74>)
 8000246:	2201      	movs	r2, #1
 8000248:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <MX_ADC1_Init+0x74>)
 800024c:	2200      	movs	r2, #0
 800024e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <MX_ADC1_Init+0x74>)
 8000252:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000256:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <MX_ADC1_Init+0x74>)
 800025a:	2200      	movs	r2, #0
 800025c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800025e:	4b0f      	ldr	r3, [pc, #60]	; (800029c <MX_ADC1_Init+0x74>)
 8000260:	2201      	movs	r2, #1
 8000262:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <MX_ADC1_Init+0x74>)
 8000266:	f000 fb27 	bl	80008b8 <HAL_ADC_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000270:	f000 f94c 	bl	800050c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000274:	2309      	movs	r3, #9
 8000276:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000278:	2301      	movs	r3, #1
 800027a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4619      	mov	r1, r3
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <MX_ADC1_Init+0x74>)
 8000286:	f000 fbef 	bl	8000a68 <HAL_ADC_ConfigChannel>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000290:	f000 f93c 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000098 	.word	0x20000098
 80002a0:	40012400 	.word	0x40012400

080002a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <MX_CAN_Init+0x64>)
 80002aa:	4a18      	ldr	r2, [pc, #96]	; (800030c <MX_CAN_Init+0x68>)
 80002ac:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80002ae:	4b16      	ldr	r3, [pc, #88]	; (8000308 <MX_CAN_Init+0x64>)
 80002b0:	2212      	movs	r2, #18
 80002b2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <MX_CAN_Init+0x64>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002ba:	4b13      	ldr	r3, [pc, #76]	; (8000308 <MX_CAN_Init+0x64>)
 80002bc:	2200      	movs	r2, #0
 80002be:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_CAN_Init+0x64>)
 80002c2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80002c6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_CAN_Init+0x64>)
 80002ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002ce:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002d0:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <MX_CAN_Init+0x64>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_CAN_Init+0x64>)
 80002d8:	2200      	movs	r2, #0
 80002da:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <MX_CAN_Init+0x64>)
 80002de:	2200      	movs	r2, #0
 80002e0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_CAN_Init+0x64>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <MX_CAN_Init+0x64>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_CAN_Init+0x64>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002f4:	4804      	ldr	r0, [pc, #16]	; (8000308 <MX_CAN_Init+0x64>)
 80002f6:	f000 fcf0 	bl	8000cda <HAL_CAN_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000300:	f000 f904 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000028 	.word	0x20000028
 800030c:	40006400 	.word	0x40006400

08000310 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000324:	463b      	mov	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800032c:	4b1d      	ldr	r3, [pc, #116]	; (80003a4 <MX_TIM3_Init+0x94>)
 800032e:	4a1e      	ldr	r2, [pc, #120]	; (80003a8 <MX_TIM3_Init+0x98>)
 8000330:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8000332:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <MX_TIM3_Init+0x94>)
 8000334:	2248      	movs	r2, #72	; 0x48
 8000336:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_TIM3_Init+0x94>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800033e:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <MX_TIM3_Init+0x94>)
 8000340:	f242 7210 	movw	r2, #10000	; 0x2710
 8000344:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <MX_TIM3_Init+0x94>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_TIM3_Init+0x94>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000352:	4814      	ldr	r0, [pc, #80]	; (80003a4 <MX_TIM3_Init+0x94>)
 8000354:	f001 fe84 	bl	8002060 <HAL_TIM_Base_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800035e:	f000 f8d5 	bl	800050c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000368:	f107 0308 	add.w	r3, r7, #8
 800036c:	4619      	mov	r1, r3
 800036e:	480d      	ldr	r0, [pc, #52]	; (80003a4 <MX_TIM3_Init+0x94>)
 8000370:	f001 fec5 	bl	80020fe <HAL_TIM_ConfigClockSource>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800037a:	f000 f8c7 	bl	800050c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800037e:	2320      	movs	r3, #32
 8000380:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000382:	2380      	movs	r3, #128	; 0x80
 8000384:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000386:	463b      	mov	r3, r7
 8000388:	4619      	mov	r1, r3
 800038a:	4806      	ldr	r0, [pc, #24]	; (80003a4 <MX_TIM3_Init+0x94>)
 800038c:	f002 f866 	bl	800245c <HAL_TIMEx_MasterConfigSynchronization>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000396:	f000 f8b9 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	3718      	adds	r7, #24
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000050 	.word	0x20000050
 80003a8:	40000400 	.word	0x40000400

080003ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_DMA_Init+0x38>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <MX_DMA_Init+0x38>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_DMA_Init+0x38>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2100      	movs	r1, #0
 80003ce:	200b      	movs	r0, #11
 80003d0:	f000 fe55 	bl	800107e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003d4:	200b      	movs	r0, #11
 80003d6:	f000 fe6e 	bl	80010b6 <HAL_NVIC_EnableIRQ>

}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fc:	4b3f      	ldr	r3, [pc, #252]	; (80004fc <MX_GPIO_Init+0x114>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a3e      	ldr	r2, [pc, #248]	; (80004fc <MX_GPIO_Init+0x114>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b3c      	ldr	r3, [pc, #240]	; (80004fc <MX_GPIO_Init+0x114>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b39      	ldr	r3, [pc, #228]	; (80004fc <MX_GPIO_Init+0x114>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a38      	ldr	r2, [pc, #224]	; (80004fc <MX_GPIO_Init+0x114>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b36      	ldr	r3, [pc, #216]	; (80004fc <MX_GPIO_Init+0x114>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0304 	and.w	r3, r3, #4
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042c:	4b33      	ldr	r3, [pc, #204]	; (80004fc <MX_GPIO_Init+0x114>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a32      	ldr	r2, [pc, #200]	; (80004fc <MX_GPIO_Init+0x114>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b30      	ldr	r3, [pc, #192]	; (80004fc <MX_GPIO_Init+0x114>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0308 	and.w	r3, r3, #8
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_LOCK_OUT_Pin|FAN_OUT1_Pin|HLIM_OUT_Pin|PC_OUT_Pin, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800044a:	482d      	ldr	r0, [pc, #180]	; (8000500 <MX_GPIO_Init+0x118>)
 800044c:	f001 f908 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_OUT2_Pin|FLT_OUT_Pin|LLIM_OUT_Pin|NEG_OUT_Pin
 8000450:	2200      	movs	r2, #0
 8000452:	f247 31c0 	movw	r1, #29632	; 0x73c0
 8000456:	482b      	ldr	r0, [pc, #172]	; (8000504 <MX_GPIO_Init+0x11c>)
 8000458:	f001 f902 	bl	8001660 <HAL_GPIO_WritePin>
                          |DCDC_OUT_Pin|SWAP_OUT_Pin|SUPP_LOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_LOCK_OUT_Pin FAN_OUT1_Pin HLIM_OUT_Pin PC_OUT_Pin */
  GPIO_InitStruct.Pin = SW_LOCK_OUT_Pin|FAN_OUT1_Pin|HLIM_OUT_Pin|PC_OUT_Pin;
 800045c:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046a:	2303      	movs	r3, #3
 800046c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	4822      	ldr	r0, [pc, #136]	; (8000500 <MX_GPIO_Init+0x118>)
 8000476:	f000 ff99 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : HLIM_IN_Pin LLIM_IN_Pin */
  GPIO_InitStruct.Pin = HLIM_IN_Pin|LLIM_IN_Pin;
 800047a:	2360      	movs	r3, #96	; 0x60
 800047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800047e:	4b22      	ldr	r3, [pc, #136]	; (8000508 <MX_GPIO_Init+0x120>)
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	481c      	ldr	r0, [pc, #112]	; (8000500 <MX_GPIO_Init+0x118>)
 800048e:	f000 ff8d 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : FLT_IN_Pin */
  GPIO_InitStruct.Pin = FLT_IN_Pin;
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLT_IN_GPIO_Port, &GPIO_InitStruct);
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	4619      	mov	r1, r3
 80004a4:	4816      	ldr	r0, [pc, #88]	; (8000500 <MX_GPIO_Init+0x118>)
 80004a6:	f000 ff81 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_OUT2_Pin FLT_OUT_Pin LLIM_OUT_Pin NEG_OUT_Pin
                           DCDC_OUT_Pin SWAP_OUT_Pin SUPP_LOW_Pin */
  GPIO_InitStruct.Pin = FAN_OUT2_Pin|FLT_OUT_Pin|LLIM_OUT_Pin|NEG_OUT_Pin
 80004aa:	f247 33c0 	movw	r3, #29632	; 0x73c0
 80004ae:	613b      	str	r3, [r7, #16]
                          |DCDC_OUT_Pin|SWAP_OUT_Pin|SUPP_LOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b0:	2301      	movs	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b8:	2303      	movs	r3, #3
 80004ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	4810      	ldr	r0, [pc, #64]	; (8000504 <MX_GPIO_Init+0x11c>)
 80004c4:	f000 ff72 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ESTOP_IN_Pin */
  GPIO_InitStruct.Pin = ESTOP_IN_Pin;
 80004c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ESTOP_IN_GPIO_Port, &GPIO_InitStruct);
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	4619      	mov	r1, r3
 80004dc:	4809      	ldr	r0, [pc, #36]	; (8000504 <MX_GPIO_Init+0x11c>)
 80004de:	f000 ff65 	bl	80013ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2101      	movs	r1, #1
 80004e6:	2017      	movs	r0, #23
 80004e8:	f000 fdc9 	bl	800107e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004ec:	2017      	movs	r0, #23
 80004ee:	f000 fde2 	bl	80010b6 <HAL_NVIC_EnableIRQ>

}
 80004f2:	bf00      	nop
 80004f4:	3720      	adds	r7, #32
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800
 8000504:	40010c00 	.word	0x40010c00
 8000508:	10110000 	.word	0x10110000

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000512:	e7fe      	b.n	8000512 <Error_Handler+0x6>

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <HAL_MspInit+0x60>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a15      	ldr	r2, [pc, #84]	; (8000574 <HAL_MspInit+0x60>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <HAL_MspInit+0x60>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <HAL_MspInit+0x60>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <HAL_MspInit+0x60>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <HAL_MspInit+0x60>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800054a:	2006      	movs	r0, #6
 800054c:	f000 fd8c 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_MspInit+0x64>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_MspInit+0x64>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	40010000 	.word	0x40010000

0800057c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a28      	ldr	r2, [pc, #160]	; (8000638 <HAL_ADC_MspInit+0xbc>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d149      	bne.n	8000630 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800059c:	4b27      	ldr	r3, [pc, #156]	; (800063c <HAL_ADC_MspInit+0xc0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a26      	ldr	r2, [pc, #152]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b24      	ldr	r3, [pc, #144]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a20      	ldr	r2, [pc, #128]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <HAL_ADC_MspInit+0xc0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0308 	and.w	r3, r3, #8
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d0:	2303      	movs	r3, #3
 80005d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	4819      	ldr	r0, [pc, #100]	; (8000640 <HAL_ADC_MspInit+0xc4>)
 80005dc:	f000 fee6 	bl	80013ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 80005e2:	4a19      	ldr	r2, [pc, #100]	; (8000648 <HAL_ADC_MspInit+0xcc>)
 80005e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 80005f4:	2280      	movs	r2, #128	; 0x80
 80005f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 80005fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 8000602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000606:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 800060a:	2220      	movs	r2, #32
 800060c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 8000616:	f000 fd69 	bl	80010ec <HAL_DMA_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000620:	f7ff ff74 	bl	800050c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 8000628:	621a      	str	r2, [r3, #32]
 800062a:	4a06      	ldr	r2, [pc, #24]	; (8000644 <HAL_ADC_MspInit+0xc8>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40012400 	.word	0x40012400
 800063c:	40021000 	.word	0x40021000
 8000640:	40010c00 	.word	0x40010c00
 8000644:	200000c8 	.word	0x200000c8
 8000648:	40020008 	.word	0x40020008

0800064c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <HAL_CAN_MspInit+0x8c>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d131      	bne.n	80006d0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_CAN_MspInit+0x90>)
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	4a1a      	ldr	r2, [pc, #104]	; (80006dc <HAL_CAN_MspInit+0x90>)
 8000672:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000676:	61d3      	str	r3, [r2, #28]
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_CAN_MspInit+0x90>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_CAN_MspInit+0x90>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a14      	ldr	r2, [pc, #80]	; (80006dc <HAL_CAN_MspInit+0x90>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_CAN_MspInit+0x90>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800069c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4619      	mov	r1, r3
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <HAL_CAN_MspInit+0x94>)
 80006b2:	f000 fe7b 	bl	80013ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c0:	2303      	movs	r3, #3
 80006c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <HAL_CAN_MspInit+0x94>)
 80006cc:	f000 fe6e 	bl	80013ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40006400 	.word	0x40006400
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010800 	.word	0x40010800

080006e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <HAL_TIM_Base_MspInit+0x34>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d10b      	bne.n	800070e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_TIM_Base_MspInit+0x38>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <HAL_TIM_Base_MspInit+0x38>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_TIM_Base_MspInit+0x38>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	40000400 	.word	0x40000400
 800071c:	40021000 	.word	0x40021000

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000724:	f001 fbae 	bl	8001e84 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <NMI_Handler+0x8>

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <MemManage_Handler+0x4>

08000736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <UsageFault_Handler+0x4>

08000742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076a:	f000 f889 	bl	8000880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <DMA1_Channel1_IRQHandler+0x10>)
 800077a:	f000 fd11 	bl	80011a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000c8 	.word	0x200000c8

08000788 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800078c:	2020      	movs	r0, #32
 800078e:	f000 ff7f 	bl	8001690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000792:	2040      	movs	r0, #64	; 0x40
 8000794:	f000 ff7c 	bl	8001690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	; (80007e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	; (80007ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ce:	f7ff ffe5 	bl	800079c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d2:	f001 fea1 	bl	8002518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff fcb9 	bl	800014c <main>
  bx lr
 80007da:	4770      	bx	lr
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e4:	080025b4 	.word	0x080025b4
  ldr r2, =_sbss
 80007e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007ec:	20000110 	.word	0x20000110

080007f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_2_IRQHandler>
	...

080007f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_Init+0x28>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_Init+0x28>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 fc2f 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f808 	bl	8000820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000810:	f7ff fe80 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_InitTick+0x54>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_InitTick+0x58>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	fbb3 f3f1 	udiv	r3, r3, r1
 800083a:	fbb2 f3f3 	udiv	r3, r2, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fc47 	bl	80010d2 <HAL_SYSTICK_Config>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e00e      	b.n	800086c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b0f      	cmp	r3, #15
 8000852:	d80a      	bhi.n	800086a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000854:	2200      	movs	r2, #0
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f000 fc0f 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <HAL_InitTick+0x5c>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	e000      	b.n	800086c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000000 	.word	0x20000000
 8000878:	20000008 	.word	0x20000008
 800087c:	20000004 	.word	0x20000004

08000880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_IncTick+0x1c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x20>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <HAL_IncTick+0x20>)
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	20000008 	.word	0x20000008
 80008a0:	2000010c 	.word	0x2000010c

080008a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b02      	ldr	r3, [pc, #8]	; (80008b4 <HAL_GetTick+0x10>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	2000010c 	.word	0x2000010c

080008b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d101      	bne.n	80008da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e0be      	b.n	8000a58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d109      	bne.n	80008fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fe40 	bl	800057c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f000 f9ab 	bl	8000c58 <ADC_ConversionStop_Disable>
 8000902:	4603      	mov	r3, r0
 8000904:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090a:	f003 0310 	and.w	r3, r3, #16
 800090e:	2b00      	cmp	r3, #0
 8000910:	f040 8099 	bne.w	8000a46 <HAL_ADC_Init+0x18e>
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8095 	bne.w	8000a46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000920:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000924:	f023 0302 	bic.w	r3, r3, #2
 8000928:	f043 0202 	orr.w	r2, r3, #2
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000938:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7b1b      	ldrb	r3, [r3, #12]
 800093e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000940:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	4313      	orrs	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000950:	d003      	beq.n	800095a <HAL_ADC_Init+0xa2>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d102      	bne.n	8000960 <HAL_ADC_Init+0xa8>
 800095a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095e:	e000      	b.n	8000962 <HAL_ADC_Init+0xaa>
 8000960:	2300      	movs	r3, #0
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7d1b      	ldrb	r3, [r3, #20]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d119      	bne.n	80009a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7b1b      	ldrb	r3, [r3, #12]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d109      	bne.n	800098c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	3b01      	subs	r3, #1
 800097e:	035a      	lsls	r2, r3, #13
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	e00b      	b.n	80009a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000990:	f043 0220 	orr.w	r2, r3, #32
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099c:	f043 0201 	orr.w	r2, r3, #1
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	430a      	orrs	r2, r1
 80009b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <HAL_ADC_Init+0x1a8>)
 80009c0:	4013      	ands	r3, r2
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	68b9      	ldr	r1, [r7, #8]
 80009c8:	430b      	orrs	r3, r1
 80009ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009d4:	d003      	beq.n	80009de <HAL_ADC_Init+0x126>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d104      	bne.n	80009e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	691b      	ldr	r3, [r3, #16]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	051b      	lsls	r3, r3, #20
 80009e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	430a      	orrs	r2, r1
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_ADC_Init+0x1ac>)
 8000a04:	4013      	ands	r3, r2
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d10b      	bne.n	8000a24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a16:	f023 0303 	bic.w	r3, r3, #3
 8000a1a:	f043 0201 	orr.w	r2, r3, #1
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a22:	e018      	b.n	8000a56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a28:	f023 0312 	bic.w	r3, r3, #18
 8000a2c:	f043 0210 	orr.w	r2, r3, #16
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a38:	f043 0201 	orr.w	r2, r3, #1
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a44:	e007      	b.n	8000a56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4a:	f043 0210 	orr.w	r2, r3, #16
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	ffe1f7fd 	.word	0xffe1f7fd
 8000a64:	ff1f0efe 	.word	0xff1f0efe

08000a68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d101      	bne.n	8000a88 <HAL_ADC_ConfigChannel+0x20>
 8000a84:	2302      	movs	r3, #2
 8000a86:	e0dc      	b.n	8000c42 <HAL_ADC_ConfigChannel+0x1da>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	2b06      	cmp	r3, #6
 8000a96:	d81c      	bhi.n	8000ad2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	3b05      	subs	r3, #5
 8000aaa:	221f      	movs	r2, #31
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	4019      	ands	r1, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	3b05      	subs	r3, #5
 8000ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	430a      	orrs	r2, r1
 8000ace:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad0:	e03c      	b.n	8000b4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	2b0c      	cmp	r3, #12
 8000ad8:	d81c      	bhi.n	8000b14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	3b23      	subs	r3, #35	; 0x23
 8000aec:	221f      	movs	r2, #31
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	4019      	ands	r1, r3
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	3b23      	subs	r3, #35	; 0x23
 8000b06:	fa00 f203 	lsl.w	r2, r0, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	631a      	str	r2, [r3, #48]	; 0x30
 8000b12:	e01b      	b.n	8000b4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	3b41      	subs	r3, #65	; 0x41
 8000b26:	221f      	movs	r2, #31
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4019      	ands	r1, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	3b41      	subs	r3, #65	; 0x41
 8000b40:	fa00 f203 	lsl.w	r2, r0, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	d91c      	bls.n	8000b8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68d9      	ldr	r1, [r3, #12]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	3b1e      	subs	r3, #30
 8000b66:	2207      	movs	r2, #7
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	4019      	ands	r1, r3
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	6898      	ldr	r0, [r3, #8]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	3b1e      	subs	r3, #30
 8000b80:	fa00 f203 	lsl.w	r2, r0, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	e019      	b.n	8000bc2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6919      	ldr	r1, [r3, #16]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4019      	ands	r1, r3
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	6898      	ldr	r0, [r3, #8]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b10      	cmp	r3, #16
 8000bc8:	d003      	beq.n	8000bd2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bce:	2b11      	cmp	r3, #17
 8000bd0:	d132      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <HAL_ADC_ConfigChannel+0x1e4>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d125      	bne.n	8000c28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d126      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000bf8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b10      	cmp	r3, #16
 8000c00:	d11a      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_ADC_ConfigChannel+0x1e8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <HAL_ADC_ConfigChannel+0x1ec>)
 8000c08:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0c:	0c9a      	lsrs	r2, r3, #18
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c18:	e002      	b.n	8000c20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f9      	bne.n	8000c1a <HAL_ADC_ConfigChannel+0x1b2>
 8000c26:	e007      	b.n	8000c38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	f043 0220 	orr.w	r2, r3, #32
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40012400 	.word	0x40012400
 8000c50:	20000000 	.word	0x20000000
 8000c54:	431bde83 	.word	0x431bde83

08000c58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d12e      	bne.n	8000cd0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0201 	bic.w	r2, r2, #1
 8000c80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c82:	f7ff fe0f 	bl	80008a4 <HAL_GetTick>
 8000c86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c88:	e01b      	b.n	8000cc2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c8a:	f7ff fe0b 	bl	80008a4 <HAL_GetTick>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d914      	bls.n	8000cc2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d10d      	bne.n	8000cc2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	f043 0210 	orr.w	r2, r3, #16
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	f043 0201 	orr.w	r2, r3, #1
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e007      	b.n	8000cd2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d0dc      	beq.n	8000c8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b084      	sub	sp, #16
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e0ed      	b.n	8000ec8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fca7 	bl	800064c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f042 0201 	orr.w	r2, r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d0e:	f7ff fdc9 	bl	80008a4 <HAL_GetTick>
 8000d12:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d14:	e012      	b.n	8000d3c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d16:	f7ff fdc5 	bl	80008a4 <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b0a      	cmp	r3, #10
 8000d22:	d90b      	bls.n	8000d3c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d28:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2205      	movs	r2, #5
 8000d34:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e0c5      	b.n	8000ec8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0e5      	beq.n	8000d16 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0202 	bic.w	r2, r2, #2
 8000d58:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d5a:	f7ff fda3 	bl	80008a4 <HAL_GetTick>
 8000d5e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d60:	e012      	b.n	8000d88 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d62:	f7ff fd9f 	bl	80008a4 <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b0a      	cmp	r3, #10
 8000d6e:	d90b      	bls.n	8000d88 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2205      	movs	r2, #5
 8000d80:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e09f      	b.n	8000ec8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1e5      	bne.n	8000d62 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7e1b      	ldrb	r3, [r3, #24]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d108      	bne.n	8000db0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e007      	b.n	8000dc0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7e5b      	ldrb	r3, [r3, #25]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d108      	bne.n	8000dda <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e007      	b.n	8000dea <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7e9b      	ldrb	r3, [r3, #26]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d108      	bne.n	8000e04 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 0220 	orr.w	r2, r2, #32
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e007      	b.n	8000e14 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0220 	bic.w	r2, r2, #32
 8000e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7edb      	ldrb	r3, [r3, #27]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d108      	bne.n	8000e2e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0210 	bic.w	r2, r2, #16
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e007      	b.n	8000e3e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 0210 	orr.w	r2, r2, #16
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7f1b      	ldrb	r3, [r3, #28]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d108      	bne.n	8000e58 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 0208 	orr.w	r2, r2, #8
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0208 	bic.w	r2, r2, #8
 8000e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7f5b      	ldrb	r3, [r3, #29]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d108      	bne.n	8000e82 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0204 	orr.w	r2, r2, #4
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e007      	b.n	8000e92 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0204 	bic.w	r2, r2, #4
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	ea42 0103 	orr.w	r1, r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	1e5a      	subs	r2, r3, #1
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0b      	blt.n	8000f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	4906      	ldr	r1, [pc, #24]	; (8000f68 <__NVIC_EnableIRQ+0x34>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff90 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff2d 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001090:	f7ff ff42 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f7ff ff90 	bl	8000fc0 <NVIC_EncodePriority>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff5f 	bl	8000f6c <__NVIC_SetPriority>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff35 	bl	8000f34 <__NVIC_EnableIRQ>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffa2 	bl	8001024 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e043      	b.n	800118a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <HAL_DMA_Init+0xa8>)
 800110a:	4413      	add	r3, r2
 800110c:	4a22      	ldr	r2, [pc, #136]	; (8001198 <HAL_DMA_Init+0xac>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	009a      	lsls	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a1f      	ldr	r2, [pc, #124]	; (800119c <HAL_DMA_Init+0xb0>)
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2202      	movs	r2, #2
 8001124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001136:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800113a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001144:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001150:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	bffdfff8 	.word	0xbffdfff8
 8001198:	cccccccd 	.word	0xcccccccd
 800119c:	40020000 	.word	0x40020000

080011a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	2204      	movs	r2, #4
 80011be:	409a      	lsls	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d04f      	beq.n	8001268 <HAL_DMA_IRQHandler+0xc8>
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d04a      	beq.n	8001268 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0320 	and.w	r3, r3, #32
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0204 	bic.w	r2, r2, #4
 80011ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a66      	ldr	r2, [pc, #408]	; (8001390 <HAL_DMA_IRQHandler+0x1f0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d029      	beq.n	800124e <HAL_DMA_IRQHandler+0xae>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a65      	ldr	r2, [pc, #404]	; (8001394 <HAL_DMA_IRQHandler+0x1f4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d022      	beq.n	800124a <HAL_DMA_IRQHandler+0xaa>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a63      	ldr	r2, [pc, #396]	; (8001398 <HAL_DMA_IRQHandler+0x1f8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01a      	beq.n	8001244 <HAL_DMA_IRQHandler+0xa4>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a62      	ldr	r2, [pc, #392]	; (800139c <HAL_DMA_IRQHandler+0x1fc>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d012      	beq.n	800123e <HAL_DMA_IRQHandler+0x9e>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a60      	ldr	r2, [pc, #384]	; (80013a0 <HAL_DMA_IRQHandler+0x200>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d00a      	beq.n	8001238 <HAL_DMA_IRQHandler+0x98>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a5f      	ldr	r2, [pc, #380]	; (80013a4 <HAL_DMA_IRQHandler+0x204>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d102      	bne.n	8001232 <HAL_DMA_IRQHandler+0x92>
 800122c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001230:	e00e      	b.n	8001250 <HAL_DMA_IRQHandler+0xb0>
 8001232:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001236:	e00b      	b.n	8001250 <HAL_DMA_IRQHandler+0xb0>
 8001238:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800123c:	e008      	b.n	8001250 <HAL_DMA_IRQHandler+0xb0>
 800123e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001242:	e005      	b.n	8001250 <HAL_DMA_IRQHandler+0xb0>
 8001244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001248:	e002      	b.n	8001250 <HAL_DMA_IRQHandler+0xb0>
 800124a:	2340      	movs	r3, #64	; 0x40
 800124c:	e000      	b.n	8001250 <HAL_DMA_IRQHandler+0xb0>
 800124e:	2304      	movs	r3, #4
 8001250:	4a55      	ldr	r2, [pc, #340]	; (80013a8 <HAL_DMA_IRQHandler+0x208>)
 8001252:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 8094 	beq.w	8001386 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001266:	e08e      	b.n	8001386 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	2202      	movs	r2, #2
 800126e:	409a      	lsls	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d056      	beq.n	8001326 <HAL_DMA_IRQHandler+0x186>
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d051      	beq.n	8001326 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10b      	bne.n	80012a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 020a 	bic.w	r2, r2, #10
 800129e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a38      	ldr	r2, [pc, #224]	; (8001390 <HAL_DMA_IRQHandler+0x1f0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d029      	beq.n	8001306 <HAL_DMA_IRQHandler+0x166>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a37      	ldr	r2, [pc, #220]	; (8001394 <HAL_DMA_IRQHandler+0x1f4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d022      	beq.n	8001302 <HAL_DMA_IRQHandler+0x162>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a35      	ldr	r2, [pc, #212]	; (8001398 <HAL_DMA_IRQHandler+0x1f8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01a      	beq.n	80012fc <HAL_DMA_IRQHandler+0x15c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a34      	ldr	r2, [pc, #208]	; (800139c <HAL_DMA_IRQHandler+0x1fc>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d012      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x156>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <HAL_DMA_IRQHandler+0x200>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00a      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x150>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a31      	ldr	r2, [pc, #196]	; (80013a4 <HAL_DMA_IRQHandler+0x204>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d102      	bne.n	80012ea <HAL_DMA_IRQHandler+0x14a>
 80012e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012e8:	e00e      	b.n	8001308 <HAL_DMA_IRQHandler+0x168>
 80012ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ee:	e00b      	b.n	8001308 <HAL_DMA_IRQHandler+0x168>
 80012f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f4:	e008      	b.n	8001308 <HAL_DMA_IRQHandler+0x168>
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	e005      	b.n	8001308 <HAL_DMA_IRQHandler+0x168>
 80012fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001300:	e002      	b.n	8001308 <HAL_DMA_IRQHandler+0x168>
 8001302:	2320      	movs	r3, #32
 8001304:	e000      	b.n	8001308 <HAL_DMA_IRQHandler+0x168>
 8001306:	2302      	movs	r3, #2
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <HAL_DMA_IRQHandler+0x208>)
 800130a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	2b00      	cmp	r3, #0
 800131a:	d034      	beq.n	8001386 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001324:	e02f      	b.n	8001386 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	2208      	movs	r2, #8
 800132c:	409a      	lsls	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d028      	beq.n	8001388 <HAL_DMA_IRQHandler+0x1e8>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b00      	cmp	r3, #0
 800133e:	d023      	beq.n	8001388 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 020e 	bic.w	r2, r2, #14
 800134e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f202 	lsl.w	r2, r1, r2
 800135e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
    }
  }
  return;
 8001386:	bf00      	nop
 8001388:	bf00      	nop
}
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40020008 	.word	0x40020008
 8001394:	4002001c 	.word	0x4002001c
 8001398:	40020030 	.word	0x40020030
 800139c:	40020044 	.word	0x40020044
 80013a0:	40020058 	.word	0x40020058
 80013a4:	4002006c 	.word	0x4002006c
 80013a8:	40020000 	.word	0x40020000

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b08b      	sub	sp, #44	; 0x2c
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013be:	e127      	b.n	8001610 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c0:	2201      	movs	r2, #1
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	429a      	cmp	r2, r3
 80013da:	f040 8116 	bne.w	800160a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b12      	cmp	r3, #18
 80013e4:	d034      	beq.n	8001450 <HAL_GPIO_Init+0xa4>
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d80d      	bhi.n	8001406 <HAL_GPIO_Init+0x5a>
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d02b      	beq.n	8001446 <HAL_GPIO_Init+0x9a>
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d804      	bhi.n	80013fc <HAL_GPIO_Init+0x50>
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d031      	beq.n	800145a <HAL_GPIO_Init+0xae>
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d01c      	beq.n	8001434 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013fa:	e048      	b.n	800148e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d043      	beq.n	8001488 <HAL_GPIO_Init+0xdc>
 8001400:	2b11      	cmp	r3, #17
 8001402:	d01b      	beq.n	800143c <HAL_GPIO_Init+0x90>
          break;
 8001404:	e043      	b.n	800148e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001406:	4a89      	ldr	r2, [pc, #548]	; (800162c <HAL_GPIO_Init+0x280>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d026      	beq.n	800145a <HAL_GPIO_Init+0xae>
 800140c:	4a87      	ldr	r2, [pc, #540]	; (800162c <HAL_GPIO_Init+0x280>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d806      	bhi.n	8001420 <HAL_GPIO_Init+0x74>
 8001412:	4a87      	ldr	r2, [pc, #540]	; (8001630 <HAL_GPIO_Init+0x284>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d020      	beq.n	800145a <HAL_GPIO_Init+0xae>
 8001418:	4a86      	ldr	r2, [pc, #536]	; (8001634 <HAL_GPIO_Init+0x288>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d01d      	beq.n	800145a <HAL_GPIO_Init+0xae>
          break;
 800141e:	e036      	b.n	800148e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001420:	4a85      	ldr	r2, [pc, #532]	; (8001638 <HAL_GPIO_Init+0x28c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d019      	beq.n	800145a <HAL_GPIO_Init+0xae>
 8001426:	4a85      	ldr	r2, [pc, #532]	; (800163c <HAL_GPIO_Init+0x290>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d016      	beq.n	800145a <HAL_GPIO_Init+0xae>
 800142c:	4a84      	ldr	r2, [pc, #528]	; (8001640 <HAL_GPIO_Init+0x294>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0xae>
          break;
 8001432:	e02c      	b.n	800148e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e028      	b.n	800148e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	3304      	adds	r3, #4
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e023      	b.n	800148e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	3308      	adds	r3, #8
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e01e      	b.n	800148e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	330c      	adds	r3, #12
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e019      	b.n	800148e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001462:	2304      	movs	r3, #4
 8001464:	623b      	str	r3, [r7, #32]
          break;
 8001466:	e012      	b.n	800148e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001470:	2308      	movs	r3, #8
 8001472:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	611a      	str	r2, [r3, #16]
          break;
 800147a:	e008      	b.n	800148e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	615a      	str	r2, [r3, #20]
          break;
 8001486:	e002      	b.n	800148e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2bff      	cmp	r3, #255	; 0xff
 8001492:	d801      	bhi.n	8001498 <HAL_GPIO_Init+0xec>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	e001      	b.n	800149c <HAL_GPIO_Init+0xf0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3304      	adds	r3, #4
 800149c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2bff      	cmp	r3, #255	; 0xff
 80014a2:	d802      	bhi.n	80014aa <HAL_GPIO_Init+0xfe>
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x104>
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	3b08      	subs	r3, #8
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	210f      	movs	r1, #15
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	401a      	ands	r2, r3
 80014c2:	6a39      	ldr	r1, [r7, #32]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	431a      	orrs	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 8096 	beq.w	800160a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014de:	4b59      	ldr	r3, [pc, #356]	; (8001644 <HAL_GPIO_Init+0x298>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4a58      	ldr	r2, [pc, #352]	; (8001644 <HAL_GPIO_Init+0x298>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6193      	str	r3, [r2, #24]
 80014ea:	4b56      	ldr	r3, [pc, #344]	; (8001644 <HAL_GPIO_Init+0x298>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f6:	4a54      	ldr	r2, [pc, #336]	; (8001648 <HAL_GPIO_Init+0x29c>)
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4b      	ldr	r2, [pc, #300]	; (800164c <HAL_GPIO_Init+0x2a0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0x19e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4a      	ldr	r2, [pc, #296]	; (8001650 <HAL_GPIO_Init+0x2a4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d00d      	beq.n	8001546 <HAL_GPIO_Init+0x19a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a49      	ldr	r2, [pc, #292]	; (8001654 <HAL_GPIO_Init+0x2a8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d007      	beq.n	8001542 <HAL_GPIO_Init+0x196>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a48      	ldr	r2, [pc, #288]	; (8001658 <HAL_GPIO_Init+0x2ac>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_GPIO_Init+0x192>
 800153a:	2303      	movs	r3, #3
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x1a0>
 800153e:	2304      	movs	r3, #4
 8001540:	e004      	b.n	800154c <HAL_GPIO_Init+0x1a0>
 8001542:	2302      	movs	r3, #2
 8001544:	e002      	b.n	800154c <HAL_GPIO_Init+0x1a0>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_GPIO_Init+0x1a0>
 800154a:	2300      	movs	r3, #0
 800154c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154e:	f002 0203 	and.w	r2, r2, #3
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	4093      	lsls	r3, r2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800155c:	493a      	ldr	r1, [pc, #232]	; (8001648 <HAL_GPIO_Init+0x29c>)
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_GPIO_Init+0x2b0>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4938      	ldr	r1, [pc, #224]	; (800165c <HAL_GPIO_Init+0x2b0>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
 8001582:	e006      	b.n	8001592 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001584:	4b35      	ldr	r3, [pc, #212]	; (800165c <HAL_GPIO_Init+0x2b0>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	43db      	mvns	r3, r3
 800158c:	4933      	ldr	r1, [pc, #204]	; (800165c <HAL_GPIO_Init+0x2b0>)
 800158e:	4013      	ands	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800159e:	4b2f      	ldr	r3, [pc, #188]	; (800165c <HAL_GPIO_Init+0x2b0>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	492e      	ldr	r1, [pc, #184]	; (800165c <HAL_GPIO_Init+0x2b0>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
 80015aa:	e006      	b.n	80015ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_GPIO_Init+0x2b0>)
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	4929      	ldr	r1, [pc, #164]	; (800165c <HAL_GPIO_Init+0x2b0>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <HAL_GPIO_Init+0x2b0>)
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	4924      	ldr	r1, [pc, #144]	; (800165c <HAL_GPIO_Init+0x2b0>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
 80015d2:	e006      	b.n	80015e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <HAL_GPIO_Init+0x2b0>)
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	43db      	mvns	r3, r3
 80015dc:	491f      	ldr	r1, [pc, #124]	; (800165c <HAL_GPIO_Init+0x2b0>)
 80015de:	4013      	ands	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_GPIO_Init+0x2b0>)
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	491a      	ldr	r1, [pc, #104]	; (800165c <HAL_GPIO_Init+0x2b0>)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60cb      	str	r3, [r1, #12]
 80015fa:	e006      	b.n	800160a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_GPIO_Init+0x2b0>)
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	43db      	mvns	r3, r3
 8001604:	4915      	ldr	r1, [pc, #84]	; (800165c <HAL_GPIO_Init+0x2b0>)
 8001606:	4013      	ands	r3, r2
 8001608:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	3301      	adds	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	fa22 f303 	lsr.w	r3, r2, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	f47f aed0 	bne.w	80013c0 <HAL_GPIO_Init+0x14>
  }
}
 8001620:	bf00      	nop
 8001622:	372c      	adds	r7, #44	; 0x2c
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	10210000 	.word	0x10210000
 8001630:	10110000 	.word	0x10110000
 8001634:	10120000 	.word	0x10120000
 8001638:	10310000 	.word	0x10310000
 800163c:	10320000 	.word	0x10320000
 8001640:	10220000 	.word	0x10220000
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	40010800 	.word	0x40010800
 8001650:	40010c00 	.word	0x40010c00
 8001654:	40011000 	.word	0x40011000
 8001658:	40011400 	.word	0x40011400
 800165c:	40010400 	.word	0x40010400

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
 800166c:	4613      	mov	r3, r2
 800166e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800167c:	e003      	b.n	8001686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	041a      	lsls	r2, r3, #16
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	611a      	str	r2, [r3, #16]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f806 	bl	80016c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40010400 	.word	0x40010400

080016c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e26c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8087 	beq.w	8001802 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f4:	4b92      	ldr	r3, [pc, #584]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d00c      	beq.n	800171a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001700:	4b8f      	ldr	r3, [pc, #572]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	d112      	bne.n	8001732 <HAL_RCC_OscConfig+0x5e>
 800170c:	4b8c      	ldr	r3, [pc, #560]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001718:	d10b      	bne.n	8001732 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171a:	4b89      	ldr	r3, [pc, #548]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d06c      	beq.n	8001800 <HAL_RCC_OscConfig+0x12c>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d168      	bne.n	8001800 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e246      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x76>
 800173c:	4b80      	ldr	r3, [pc, #512]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a7f      	ldr	r2, [pc, #508]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	e02e      	b.n	80017a8 <HAL_RCC_OscConfig+0xd4>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0x98>
 8001752:	4b7b      	ldr	r3, [pc, #492]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a7a      	ldr	r2, [pc, #488]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b78      	ldr	r3, [pc, #480]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a77      	ldr	r2, [pc, #476]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e01d      	b.n	80017a8 <HAL_RCC_OscConfig+0xd4>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0xbc>
 8001776:	4b72      	ldr	r3, [pc, #456]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a71      	ldr	r2, [pc, #452]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a6e      	ldr	r2, [pc, #440]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e00b      	b.n	80017a8 <HAL_RCC_OscConfig+0xd4>
 8001790:	4b6b      	ldr	r3, [pc, #428]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a6a      	ldr	r2, [pc, #424]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b68      	ldr	r3, [pc, #416]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a67      	ldr	r2, [pc, #412]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d013      	beq.n	80017d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff f878 	bl	80008a4 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff f874 	bl	80008a4 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1fa      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b5d      	ldr	r3, [pc, #372]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0xe4>
 80017d6:	e014      	b.n	8001802 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff f864 	bl	80008a4 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff f860 	bl	80008a4 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e1e6      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	4b53      	ldr	r3, [pc, #332]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x10c>
 80017fe:	e000      	b.n	8001802 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d063      	beq.n	80018d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800180e:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00b      	beq.n	8001832 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800181a:	4b49      	ldr	r3, [pc, #292]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b08      	cmp	r3, #8
 8001824:	d11c      	bne.n	8001860 <HAL_RCC_OscConfig+0x18c>
 8001826:	4b46      	ldr	r3, [pc, #280]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d116      	bne.n	8001860 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001832:	4b43      	ldr	r3, [pc, #268]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <HAL_RCC_OscConfig+0x176>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d001      	beq.n	800184a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e1ba      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184a:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4939      	ldr	r1, [pc, #228]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185e:	e03a      	b.n	80018d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d020      	beq.n	80018aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001868:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 800186a:	2201      	movs	r2, #1
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff f819 	bl	80008a4 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001876:	f7ff f815 	bl	80008a4 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e19b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4927      	ldr	r1, [pc, #156]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
 80018a8:	e015      	b.n	80018d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_RCC_OscConfig+0x270>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7fe fff8 	bl	80008a4 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b8:	f7fe fff4 	bl	80008a4 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e17a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d03a      	beq.n	8001958 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d019      	beq.n	800191e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7fe ffd8 	bl	80008a4 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f8:	f7fe ffd4 	bl	80008a4 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e15a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_RCC_OscConfig+0x26c>)
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001916:	2001      	movs	r0, #1
 8001918:	f000 fac8 	bl	8001eac <RCC_Delay>
 800191c:	e01c      	b.n	8001958 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_RCC_OscConfig+0x274>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7fe ffbe 	bl	80008a4 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192a:	e00f      	b.n	800194c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7fe ffba 	bl	80008a4 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d908      	bls.n	800194c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e140      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000
 8001944:	42420000 	.word	0x42420000
 8001948:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	4b9e      	ldr	r3, [pc, #632]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1e9      	bne.n	800192c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80a6 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196a:	4b97      	ldr	r3, [pc, #604]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10d      	bne.n	8001992 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b94      	ldr	r3, [pc, #592]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a93      	ldr	r2, [pc, #588]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b91      	ldr	r3, [pc, #580]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198e:	2301      	movs	r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b8e      	ldr	r3, [pc, #568]	; (8001bcc <HAL_RCC_OscConfig+0x4f8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d118      	bne.n	80019d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199e:	4b8b      	ldr	r3, [pc, #556]	; (8001bcc <HAL_RCC_OscConfig+0x4f8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a8a      	ldr	r2, [pc, #552]	; (8001bcc <HAL_RCC_OscConfig+0x4f8>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019aa:	f7fe ff7b 	bl	80008a4 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b2:	f7fe ff77 	bl	80008a4 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e0fd      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	4b81      	ldr	r3, [pc, #516]	; (8001bcc <HAL_RCC_OscConfig+0x4f8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x312>
 80019d8:	4b7b      	ldr	r3, [pc, #492]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4a7a      	ldr	r2, [pc, #488]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	e02d      	b.n	8001a42 <HAL_RCC_OscConfig+0x36e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x334>
 80019ee:	4b76      	ldr	r3, [pc, #472]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4a75      	ldr	r2, [pc, #468]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6213      	str	r3, [r2, #32]
 80019fa:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a72      	ldr	r2, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6213      	str	r3, [r2, #32]
 8001a06:	e01c      	b.n	8001a42 <HAL_RCC_OscConfig+0x36e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x356>
 8001a10:	4b6d      	ldr	r3, [pc, #436]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4a6c      	ldr	r2, [pc, #432]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6213      	str	r3, [r2, #32]
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a69      	ldr	r2, [pc, #420]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0x36e>
 8001a2a:	4b67      	ldr	r3, [pc, #412]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4a66      	ldr	r2, [pc, #408]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6213      	str	r3, [r2, #32]
 8001a36:	4b64      	ldr	r3, [pc, #400]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4a63      	ldr	r2, [pc, #396]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d015      	beq.n	8001a76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7fe ff2b 	bl	80008a4 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7fe ff27 	bl	80008a4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0ab      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	4b57      	ldr	r3, [pc, #348]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0ee      	beq.n	8001a52 <HAL_RCC_OscConfig+0x37e>
 8001a74:	e014      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7fe ff15 	bl	80008a4 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7fe ff11 	bl	80008a4 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e095      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1ee      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d105      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa6:	4b48      	ldr	r3, [pc, #288]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a47      	ldr	r2, [pc, #284]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8081 	beq.w	8001bbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001abc:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d061      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d146      	bne.n	8001b5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad0:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <HAL_RCC_OscConfig+0x4fc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7fe fee5 	bl	80008a4 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ade:	f7fe fee1 	bl	80008a4 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e067      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af0:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b04:	d108      	bne.n	8001b18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	492d      	ldr	r1, [pc, #180]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a19      	ldr	r1, [r3, #32]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	4927      	ldr	r1, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b30:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <HAL_RCC_OscConfig+0x4fc>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7fe feb5 	bl	80008a4 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7fe feb1 	bl	80008a4 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e037      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x46a>
 8001b5c:	e02f      	b.n	8001bbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_RCC_OscConfig+0x4fc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7fe fe9e 	bl	80008a4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7fe fe9a 	bl	80008a4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e020      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x498>
 8001b8a:	e018      	b.n	8001bbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e013      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40007000 	.word	0x40007000
 8001bd0:	42420060 	.word	0x42420060

08001bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0d0      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d910      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 0207 	bic.w	r2, r3, #7
 8001bfe:	4965      	ldr	r1, [pc, #404]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b8      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c48:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	494d      	ldr	r1, [pc, #308]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d040      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d115      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e07f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e073      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e06b      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f023 0203 	bic.w	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4936      	ldr	r1, [pc, #216]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc4:	f7fe fdee 	bl	80008a4 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7fe fdea 	bl	80008a4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e053      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 020c 	and.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1eb      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d210      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4922      	ldr	r1, [pc, #136]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e032      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4916      	ldr	r1, [pc, #88]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	490e      	ldr	r1, [pc, #56]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d62:	f000 f82d 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d66:	4601      	mov	r1, r0
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	fa21 f303 	lsr.w	r3, r1, r3
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x1d0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fd4c 	bl	8000820 <HAL_InitTick>

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	0800259c 	.word	0x0800259c
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_RCC_EnableCSS+0x14>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	4242004c 	.word	0x4242004c

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	b490      	push	{r4, r7}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dc8:	1d3c      	adds	r4, r7, #4
 8001dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dd0:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x40>
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x46>
 8001dfe:	e02d      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e02:	623b      	str	r3, [r7, #32]
      break;
 8001e04:	e02d      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	0c9b      	lsrs	r3, r3, #18
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e12:	4413      	add	r3, r2
 8001e14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	0c5b      	lsrs	r3, r3, #17
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e32:	4413      	add	r3, r2
 8001e34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e3e:	fb02 f203 	mul.w	r2, r2, r3
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	e004      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	623b      	str	r3, [r7, #32]
      break;
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e5e:	623b      	str	r3, [r7, #32]
      break;
 8001e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e62:	6a3b      	ldr	r3, [r7, #32]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc90      	pop	{r4, r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	08002588 	.word	0x08002588
 8001e74:	08002598 	.word	0x08002598
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	007a1200 	.word	0x007a1200
 8001e80:	003d0900 	.word	0x003d0900

08001e84 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	2b80      	cmp	r3, #128	; 0x80
 8001e92:	d104      	bne.n	8001e9e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001e94:	f000 f828 	bl	8001ee8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	701a      	strb	r2, [r3, #0]
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	4002100a 	.word	0x4002100a

08001eac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <RCC_Delay+0x34>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <RCC_Delay+0x38>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ec8:	bf00      	nop
  }
  while (Delay --);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1e5a      	subs	r2, r3, #1
 8001ece:	60fa      	str	r2, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <RCC_Delay+0x1c>
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	10624dd3 	.word	0x10624dd3

08001ee8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d07d      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f20:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	4a4b      	ldr	r2, [pc, #300]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	61d3      	str	r3, [r2, #28]
 8001f2c:	4b49      	ldr	r3, [pc, #292]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	4b46      	ldr	r3, [pc, #280]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d118      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f48:	4b43      	ldr	r3, [pc, #268]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a42      	ldr	r2, [pc, #264]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f54:	f7fe fca6 	bl	80008a4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	e008      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5c:	f7fe fca2 	bl	80008a4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e06d      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d02e      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d027      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f98:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fae:	4a29      	ldr	r2, [pc, #164]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d014      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fc71 	bl	80008a4 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fc6d 	bl	80008a4 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e036      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ee      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4917      	ldr	r1, [pc, #92]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4a13      	ldr	r2, [pc, #76]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	490b      	ldr	r1, [pc, #44]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	4904      	ldr	r1, [pc, #16]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
 800205c:	42420440 	.word	0x42420440

08002060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e041      	b.n	80020f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d106      	bne.n	800208c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe fb2c 	bl	80006e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3304      	adds	r3, #4
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f000 f8e4 	bl	800226c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_TIM_ConfigClockSource+0x18>
 8002112:	2302      	movs	r3, #2
 8002114:	e0a6      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x166>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002134:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800213c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d067      	beq.n	800221e <HAL_TIM_ConfigClockSource+0x120>
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d80b      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x6c>
 8002152:	2b10      	cmp	r3, #16
 8002154:	d073      	beq.n	800223e <HAL_TIM_ConfigClockSource+0x140>
 8002156:	2b10      	cmp	r3, #16
 8002158:	d802      	bhi.n	8002160 <HAL_TIM_ConfigClockSource+0x62>
 800215a:	2b00      	cmp	r3, #0
 800215c:	d06f      	beq.n	800223e <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800215e:	e078      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002160:	2b20      	cmp	r3, #32
 8002162:	d06c      	beq.n	800223e <HAL_TIM_ConfigClockSource+0x140>
 8002164:	2b30      	cmp	r3, #48	; 0x30
 8002166:	d06a      	beq.n	800223e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002168:	e073      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800216a:	2b70      	cmp	r3, #112	; 0x70
 800216c:	d00d      	beq.n	800218a <HAL_TIM_ConfigClockSource+0x8c>
 800216e:	2b70      	cmp	r3, #112	; 0x70
 8002170:	d804      	bhi.n	800217c <HAL_TIM_ConfigClockSource+0x7e>
 8002172:	2b50      	cmp	r3, #80	; 0x50
 8002174:	d033      	beq.n	80021de <HAL_TIM_ConfigClockSource+0xe0>
 8002176:	2b60      	cmp	r3, #96	; 0x60
 8002178:	d041      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x100>
      break;
 800217a:	e06a      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800217c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002180:	d066      	beq.n	8002250 <HAL_TIM_ConfigClockSource+0x152>
 8002182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002186:	d017      	beq.n	80021b8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002188:	e063      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6899      	ldr	r1, [r3, #8]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f000 f940 	bl	800241e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	609a      	str	r2, [r3, #8]
      break;
 80021b6:	e04c      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6899      	ldr	r1, [r3, #8]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f000 f929 	bl	800241e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021da:	609a      	str	r2, [r3, #8]
      break;
 80021dc:	e039      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f000 f8a0 	bl	8002330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2150      	movs	r1, #80	; 0x50
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f8f7 	bl	80023ea <TIM_ITRx_SetConfig>
      break;
 80021fc:	e029      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6859      	ldr	r1, [r3, #4]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	461a      	mov	r2, r3
 800220c:	f000 f8be 	bl	800238c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2160      	movs	r1, #96	; 0x60
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f8e7 	bl	80023ea <TIM_ITRx_SetConfig>
      break;
 800221c:	e019      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	461a      	mov	r2, r3
 800222c:	f000 f880 	bl	8002330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2140      	movs	r1, #64	; 0x40
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f8d7 	bl	80023ea <TIM_ITRx_SetConfig>
      break;
 800223c:	e009      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4619      	mov	r1, r3
 8002248:	4610      	mov	r0, r2
 800224a:	f000 f8ce 	bl	80023ea <TIM_ITRx_SetConfig>
        break;
 800224e:	e000      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002250:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a29      	ldr	r2, [pc, #164]	; (8002324 <TIM_Base_SetConfig+0xb8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00b      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d007      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a26      	ldr	r2, [pc, #152]	; (8002328 <TIM_Base_SetConfig+0xbc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a25      	ldr	r2, [pc, #148]	; (800232c <TIM_Base_SetConfig+0xc0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d108      	bne.n	80022ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <TIM_Base_SetConfig+0xb8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00b      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022bc:	d007      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <TIM_Base_SetConfig+0xbc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d003      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a18      	ldr	r2, [pc, #96]	; (800232c <TIM_Base_SetConfig+0xc0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d108      	bne.n	80022e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <TIM_Base_SetConfig+0xb8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d103      	bne.n	8002314 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	615a      	str	r2, [r3, #20]
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800

08002330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	f023 0201 	bic.w	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800235a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f023 030a 	bic.w	r3, r3, #10
 800236c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	621a      	str	r2, [r3, #32]
}
 8002382:	bf00      	nop
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f023 0210 	bic.w	r2, r3, #16
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	031b      	lsls	r3, r3, #12
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	621a      	str	r2, [r3, #32]
}
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b085      	sub	sp, #20
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	f043 0307 	orr.w	r3, r3, #7
 800240c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	609a      	str	r2, [r3, #8]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr

0800241e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800241e:	b480      	push	{r7}
 8002420:	b087      	sub	sp, #28
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002438:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	021a      	lsls	r2, r3, #8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	431a      	orrs	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4313      	orrs	r3, r2
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	609a      	str	r2, [r3, #8]
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002470:	2302      	movs	r3, #2
 8002472:	e046      	b.n	8002502 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a16      	ldr	r2, [pc, #88]	; (800250c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00e      	beq.n	80024d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c0:	d009      	beq.n	80024d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d004      	beq.n	80024d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a10      	ldr	r2, [pc, #64]	; (8002514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d10c      	bne.n	80024f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	40012c00 	.word	0x40012c00
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800

08002518 <__libc_init_array>:
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	2500      	movs	r5, #0
 800251c:	4e0c      	ldr	r6, [pc, #48]	; (8002550 <__libc_init_array+0x38>)
 800251e:	4c0d      	ldr	r4, [pc, #52]	; (8002554 <__libc_init_array+0x3c>)
 8002520:	1ba4      	subs	r4, r4, r6
 8002522:	10a4      	asrs	r4, r4, #2
 8002524:	42a5      	cmp	r5, r4
 8002526:	d109      	bne.n	800253c <__libc_init_array+0x24>
 8002528:	f000 f822 	bl	8002570 <_init>
 800252c:	2500      	movs	r5, #0
 800252e:	4e0a      	ldr	r6, [pc, #40]	; (8002558 <__libc_init_array+0x40>)
 8002530:	4c0a      	ldr	r4, [pc, #40]	; (800255c <__libc_init_array+0x44>)
 8002532:	1ba4      	subs	r4, r4, r6
 8002534:	10a4      	asrs	r4, r4, #2
 8002536:	42a5      	cmp	r5, r4
 8002538:	d105      	bne.n	8002546 <__libc_init_array+0x2e>
 800253a:	bd70      	pop	{r4, r5, r6, pc}
 800253c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002540:	4798      	blx	r3
 8002542:	3501      	adds	r5, #1
 8002544:	e7ee      	b.n	8002524 <__libc_init_array+0xc>
 8002546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800254a:	4798      	blx	r3
 800254c:	3501      	adds	r5, #1
 800254e:	e7f2      	b.n	8002536 <__libc_init_array+0x1e>
 8002550:	080025ac 	.word	0x080025ac
 8002554:	080025ac 	.word	0x080025ac
 8002558:	080025ac 	.word	0x080025ac
 800255c:	080025b0 	.word	0x080025b0

08002560 <memset>:
 8002560:	4603      	mov	r3, r0
 8002562:	4402      	add	r2, r0
 8002564:	4293      	cmp	r3, r2
 8002566:	d100      	bne.n	800256a <memset+0xa>
 8002568:	4770      	bx	lr
 800256a:	f803 1b01 	strb.w	r1, [r3], #1
 800256e:	e7f9      	b.n	8002564 <memset+0x4>

08002570 <_init>:
 8002570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002572:	bf00      	nop
 8002574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002576:	bc08      	pop	{r3}
 8002578:	469e      	mov	lr, r3
 800257a:	4770      	bx	lr

0800257c <_fini>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	bf00      	nop
 8002580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002582:	bc08      	pop	{r3}
 8002584:	469e      	mov	lr, r3
 8002586:	4770      	bx	lr
